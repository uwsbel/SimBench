```python
import pychrono.core as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import os

# ------------------------------------
# Parameters
# ------------------------------------

# Vehicle parameters
vehicle_dir = "path/to/ARTcar/vehicle/directory"  # Update with the actual path to the ARTcar vehicle JSON file
initLoc = chrono.ChVectorD(0, 1, 0.2)  # Initial vehicle location
initRot = chrono.ChQuaternionD(1, 0, 0, 0)  # Initial vehicle orientation
tire_contact_method = veh.contact_method_NSC  # Tire contact method (NSC in this case)
chassis_vis_type = veh.VisualizationType_MESH  # Chassis visualization type (MESH)
suspension_vis_type = veh.VisualizationType_PRIMITIVES  # Suspension visualization type (PRIMITIVES)
steering_vis_type = veh.VisualizationType_PRIMITIVES  # Steering visualization type (PRIMITIVES)
wheel_vis_type = veh.VisualizationType_MESH  # Wheel visualization type (MESH)

# Terrain parameters
terrain_length = 100  # Terrain length
terrain_width = 100   # Terrain width
terrain_texture = "path/to/terrain/texture.jpg"  # Update with the actual path to the terrain texture

# Simulation parameters
step_size = 1e-3  # Simulation step size
target_fps = 50  # Target frames per second

# ------------------------------------
# Create Chrono system and other assets
# ------------------------------------

# Create Chrono system
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create vehicle
vehicle = veh.ChVehicle(vehicle_dir, system)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(initLoc, initRot))
vehicle.SetTireContactMethod(tire_contact_method)
vehicle.SetChassisVisualizationType(chassis_vis_type)
vehicle.SetSuspensionVisualizationType(suspension_vis_type)
vehicle.SetSteeringVisualizationType(steering_vis_type)
vehicle.SetWheelVisualizationType(wheel_vis_type)

# Create terrain
terrain = veh.RigidTerrain(system)
patch = terrain.AddPatch(chrono.ChMaterialSurfaceNSC(),  # Use NSC material for the terrain
                         chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(terrain_length / 2, terrain_width / 2, 0),
                         chrono.ChQuaternionD(1, 0, 0, 0))
patch.SetTexture(terrain_texture, terrain_length, terrain_width)
patch.SetContactFrictionCoefficient(0.9)
terrain.Initialize()

# Create driver
driver = veh.ChInteractiveDriverIRR(vehicle)
driver.Initialize()

# ------------------------------------
# Create Irrlicht visualization
# ------------------------------------
application = irr.ChIrrApp(system)
application.SetSkyImage(chrono.GetChronoDataFile('skybox/skybox_01_front.jpg'),
                        chrono.GetChronoDataFile('skybox/skybox_01_back.jpg'),
                        chrono.GetChronoDataFile('skybox/skybox_01_left.jpg'),
                        chrono.GetChronoDataFile('skybox/skybox_01_right.jpg'),
                        chrono.GetChronoDataFile('skybox/skybox_01_top.jpg'),
                        chrono.GetChronoDataFile('skybox/skybox_01_down.jpg'))
application.AddTypicalLights()
application.AddCamera(chrono.ChVectorD(1, 1, 1), chrono.ChVectorD(0, 0, 0))
application.SetTimestep(step_size)
application.AssetBindAll()
application.AssetUpdateAll()

# ------------------------------------
# Simulation loop
# ------------------------------------
application.SetTryRealtime(True)
application.SetDesiredFPS(target_fps)

while application.GetDevice().run():
    time = system.GetChTime()

    # Update vehicle and driver
    driver.Synchronize(time)
    vehicle.Update(time)

    # Advance simulation
    system.DoStepDynamics(step_size)

    # Update visualization
    application.BeginScene()
    application.DrawAll()
    application.EndScene()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries (`chrono`, `veh`, `irr`, `os`).
   - Define parameters for the vehicle, terrain, and simulation.
   - Create the Chrono system (`ChSystemNSC`).
   - Create the ARTcar vehicle using its JSON file and set its properties (initial position, visualization, etc.).
   - Create the rigid terrain, add a patch with a texture, and set contact properties.
   - Create an interactive driver to control the vehicle.
   - Set up the Irrlicht visualization with a skybox, lights, and a camera.

2. **Simulation Loop:**
   - Enter the main simulation loop, aiming for real-time simulation at the desired FPS.
   - Synchronize the driver inputs with the simulation time.
   - Update the vehicle state based on the driver inputs and physics.
   - Advance the simulation by one time step using `DoStepDynamics`.
   - Render the current frame using Irrlicht functions (`BeginScene`, `DrawAll`, `EndScene`).

**Remember to:**

- Replace placeholders like `"path/to/ARTcar/vehicle/directory"` and `"path/to/terrain/texture.jpg"` with the actual paths to your files.
- Adjust parameters as needed to fit your simulation requirements.

This script sets up a basic simulation of an ARTcar vehicle on a rigid terrain. You can further enhance it by adding elements like:

- Obstacles on the terrain.
- Sensors on the vehicle (e.g., GPS, IMU).
- Data logging and analysis.
- More complex control algorithms for the vehicle.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#

# Create the Chrono system
system = chrono.ChSystemNSC()

# Set the default outward/inward shape margins for collision detection,
# this is epecially important for very large or very small objects.
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001)

# Create the ARTcar vehicle, set parameters, and initialize
vehicle = veh.ARTcar_Simple(system)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChInitPosition(chrono.ChVectorD(0, 1, 0.5)))
vehicle.SetInitOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
vehicle.SetContactMethod(contact_method=veh.ChContactMethod_NSC)
vehicle.SetChassisVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetSuspensionVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetSteeringVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetWheelVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetTireVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.Initialize()

# Create the terrain, set its size and texture
terrain = veh.RigidTerrain(system)
terrain_size = chrono.ChVectorD(80, 12, 3)
terrain.Initialize(chrono.ChVectorD(0, 0, 0), terrain_size)
terrain.SetTexture(veh.GetDataFile("terrain/textures/grass.jpg"), 20, 20)

# Create the driver system
driver = veh.ChDriverSimple(vehicle)
driver.Initialize()

# ---------------------------------------------------------------------
#
#  Create an Irrlicht application to visualize the system
#

myapplication = chronoirr.ChIrrApp(
    system, "PyChrono example: ARTcar", chronoirr.dimension2du(1024, 768)
)
myapplication.AddTypicalSky()
myapplication.AddTypicalLogo(chrono.GetChronoDataFile("logo_pychrono_alpha.png"))
myapplication.AddTypicalCamera(
    chronoirr.vector3df(0, 1.5, -2), chronoirr.vector3df(0, 0, 0)
)
myapplication.AddLightWithShadow(
    chronoirr.vector3df(10, 20, 10),
    chronoirr.vector3df(0, 2.6, 0),
    30,
    10,
    40,
    60,
    512,
    chronoirr.SColorf(1, 1, 1),
)
myapplication.AssetBindAll()
myapplication.AssetUpdateAll()
myapplication.AddShadowAll()

# ---------------------------------------------------------------------
#
#  Run the simulation
#

myapplication.SetTimestep(0.01)

while myapplication.GetDevice().run():
    # Render scene
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.EndScene()

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update the vehicle systems
    vehicle.Update(system.GetChTime(), driver_inputs)

    # Advance simulation step
    system.DoStepDynamics(0.01)

    # Display simulation at 50 FPS
    myapplication.SetTryRealtime(True)
    myapplication.SetDesiredFPS(50)
```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries: `pychrono`, `pychrono.irrlicht`, and `pychrono.vehicle`.
   - Creates a `ChSystemNSC` for the simulation.
   - Sets default collision margins.

2. **Vehicle Creation:**
   - Creates an `ARTcar_Simple` vehicle object.
   - Sets initial position, orientation, contact method, and visualization types.
   - Initializes the vehicle.

3. **Terrain Creation:**
   - Creates a `RigidTerrain` object.
   - Initializes the terrain with specified dimensions and a grass texture.

4. **Driver System:**
   - Creates a `ChDriverSimple` object to control the vehicle.
   - Initializes the driver.

5. **Visualization (Irrlicht):**
   - Creates an `ChIrrApp` for visualization.
   - Adds sky, logo, camera, and light to the scene.
   - Binds and updates assets.

6. **Simulation Loop:**
   - Sets the simulation time step.
   - Runs the simulation until the Irrlicht window is closed.
   - Renders the scene in each frame.
   - Gets driver inputs.
   - Updates the vehicle dynamics based on driver inputs and simulation time.
   - Advances the simulation by one time step.
   - Controls the display frame rate to 50 FPS.

**Key Features:**

- **ARTcar Vehicle:** Uses the `ARTcar_Simple` class for a simplified vehicle model.
- **Rigid Terrain:** Employs `RigidTerrain` to create a solid ground for the vehicle.
- **Interactive Driver:** Implements `ChDriverSimple` for user control of the vehicle.
- **Irrlicht Visualization:** Uses `ChIrrApp` to create a visually appealing and interactive simulation environment.
- **Real-time Simulation:** Aims for a smooth visual experience by targeting 50 frames per second.

This script provides a solid foundation for a PyChrono ARTcar simulation. You can further customize it by adding more features, such as obstacles, sensors, and advanced control algorithms.
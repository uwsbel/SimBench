```python
import pychrono as chrono
import pychrono.fea as fea
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#

mysystem = chrono.ChSystemNSC()

# Create a mesh, that is a container for groups
# of elements and their nodes.
my_mesh = fea.ChMesh()

# Create some nodes.
node_A = fea.ChNodeFEAxyz(chrono.ChVectorD(0, 0, 0))
node_B = fea.ChNodeFEAxyz(chrono.ChVectorD(1, 0, 0))
node_C = fea.ChNodeFEAxyz(chrono.ChVectorD(1, 1, 0))
node_D = fea.ChNodeFEAxyz(chrono.ChVectorD(0, 1, 0))

# Add nodes to the mesh
my_mesh.AddNode(node_A)
my_mesh.AddNode(node_B)
my_mesh.AddNode(node_C)
my_mesh.AddNode(node_D)

# Create beam section & material
msection = fea.ChBeamSectionEuler()
msection.SetDensity(2700)
msection.SetYoungModulus(70e9)
msection.SetGshearModulus(26e9)
msection.SetAsRectangularSection(0.01, 0.01)

# Create elements
element_AB = fea.ChElementBeamEuler()
element_AB.SetNodes(node_A, node_B)
element_AB.SetSection(msection)

element_BC = fea.ChElementBeamEuler()
element_BC.SetNodes(node_B, node_C)
element_BC.SetSection(msection)

element_CD = fea.ChElementBeamEuler()
element_CD.SetNodes(node_C, node_D)
element_CD.SetSection(msection)

element_DA = fea.ChElementBeamEuler()
element_DA.SetNodes(node_D, node_A)
element_DA.SetSection(msection)

# Add elements to the mesh
my_mesh.AddElement(element_AB)
my_mesh.AddElement(element_BC)
my_mesh.AddElement(element_CD)
my_mesh.AddElement(element_DA)

# Fix some nodes
node_A.SetFixed(True)
node_D.SetFixed(True)

# Remember to add the mesh to the system!
mysystem.Add(my_mesh)

# ---------------------------------------------------------------------
#
#  Create an Irrlicht application to visualize the system
#

myapplication = chronoirr.ChIrrlichtApplication(
    mysystem, "PyChrono example", chronoirr.dimension2du(1024, 768)
)

myapplication.AddTypicalSky()
myapplication.AddTypicalLogo(chrono.GetChronoDataFile("logo_pychrono_alpha.png"))
myapplication.AddTypicalCamera(chronoirr.vector3df(0.5, 0.5, 1))
myapplication.AddTypicalLights()

# ==IMPORTANT!== Use this function for adding a ChIrrlichtAsset that will
#              represent the FEA mesh.
# This will automatically update a triangle mesh (a ChTriangleMeshShape
# asset that is internally managed) every time the simulation advances.
mvisualizer = chronoirr.ChIrrlichtMeshFileShaded(
    myapplication, "fea_mesh", my_mesh
)
mvisualizer.SetWireframe(True)
mvisualizer.SetLogLevel(2)
myapplication.AssetBind(mvisualizer)
myapplication.AssetUpdate(mvisualizer)

# ---------------------------------------------------------------------
#
#  Run the simulation
#

myapplication.SetTimestep(0.001)
myapplication.SetTryRealtime(True)

while myapplication.GetDevice().run():
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.DoStep()
    myapplication.EndScene()
```

**Explanation:**

1. **Initialization:**
   - Import necessary modules: `pychrono`, `pychrono.fea`, and `pychrono.irrlicht`.
   - Create a Chrono system: `mysystem = chrono.ChSystemNSC()`
   - Create a FEA mesh: `my_mesh = fea.ChMesh()`

2. **Nodes and Elements:**
   - Define nodes with coordinates: `node_A`, `node_B`, `node_C`, `node_D`.
   - Add nodes to the mesh: `my_mesh.AddNode(...)`
   - Create a beam section and material: `msection = fea.ChBeamSectionEuler()` with properties like density, Young's modulus, etc.
   - Create beam elements connecting the nodes: `element_AB`, `element_BC`, `element_CD`, `element_DA`.
   - Set nodes and sections for each element: `element_AB.SetNodes(node_A, node_B)`, `element_AB.SetSection(msection)`, etc.
   - Add elements to the mesh: `my_mesh.AddElement(...)`

3. **Constraints and System Setup:**
   - Fix nodes A and D: `node_A.SetFixed(True)`, `node_D.SetFixed(True)`
   - Add the mesh to the Chrono system: `mysystem.Add(my_mesh)`

4. **Visualization with Irrlicht:**
   - Create an Irrlicht application: `myapplication = chronoirr.ChIrrlichtApplication(...)`
   - Add typical scene elements: sky, logo, camera, lights.
   - Create a visualizer for the FEA mesh: `mvisualizer = chronoirr.ChIrrlichtMeshFileShaded(...)`
   - Bind and update the visualizer: `myapplication.AssetBind(mvisualizer)`, `myapplication.AssetUpdate(mvisualizer)`

5. **Simulation Loop:**
   - Set the timestep and real-time simulation attempt: `myapplication.SetTimestep(0.001)`, `myapplication.SetTryRealtime(True)`
   - Run the simulation loop:
     - Begin scene, draw elements, perform a simulation step, and end scene in each iteration.

**Key Concepts:**

- **FEA (Finite Element Analysis):** A numerical method for solving problems in engineering and mathematical physics, dividing a complex structure into smaller, simpler elements.
- **Nodes:** Points in the FEA mesh where degrees of freedom are defined (e.g., displacements, rotations).
- **Elements:** Connections between nodes that define the geometry and behavior of the structure.
- **Beam Element:** A type of element used to model slender structures that primarily resist bending and shear.
- **Euler-Bernoulli Beam Theory:** A simplified beam theory used in this example.
- **Irrlicht:** A real-time 3D rendering engine used for visualization.

This script provides a basic example of beam finite element simulation in PyChrono. You can modify it to create more complex structures and experiment with different parameters. Remember to install the necessary PyChrono and Irrlicht libraries.

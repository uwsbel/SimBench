```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# --------------------------------------------------------------------
# Create the Chrono system and set default parameters
# --------------------------------------------------------------------

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Set default material properties for beams
material = chrono.ChMaterialBeamANCF()
material.SetDensity(7800)  # kg/m^3
material.SetYoungModulus(210e9)  # Pa
material.SetPoissonRatio(0.3)

# --------------------------------------------------------------------
# Create the beam mesh and add it to the system
# --------------------------------------------------------------------

# Define node positions
nodes = [
    chrono.ChVectorD(0, 0, 0),
    chrono.ChVectorD(1, 0, 0),
    chrono.ChVectorD(1, 1, 0),
    chrono.ChVectorD(0, 1, 0)
]

# Define beam elements connecting the nodes
elements = [
    [0, 1],
    [1, 2],
    [2, 3],
    [3, 0]
]

# Create a mesh of beam finite elements
mesh = chrono.ChMesh()
for i in range(len(nodes)):
    mesh.AddNode(nodes[i])

for element in elements:
    beam = chrono.ChBeamANCF()
    beam.SetNodes(mesh.GetNode(element[0]), mesh.GetNode(element[1]))
    beam.SetMaterial(material)
    beam.SetSectionProperties(0.01, 0.01**3/12)  # Area, Iyy
    mesh.AddElement(beam)

# Add the mesh to the system
system.Add(mesh)

# --------------------------------------------------------------------
# Apply boundary conditions and forces (example)
# --------------------------------------------------------------------

# Fix one node in space
mesh.GetNode(0).SetFixed(True)

# Apply a force to another node
force = chrono.ChForce()
force.SetMode(chrono.ChForce.FORCE)
force.SetF_x(chrono.ChFunction_Const(100))  # Constant force of 100 N in X direction
mesh.GetNode(2).AddForce(force)

# --------------------------------------------------------------------
# Create the visualization and simulation loop
# --------------------------------------------------------------------

application = chronoirr.ChIrrApp(system, "Beam FEM Example", chronoirr.dimension2du(1024, 768))
application.AddTypicalSky()
application.AddTypicalCamera(chronoirr.vector3df(0.5, 0.5, 2))
application.AssetBindAll()
application.AssetUpdateAll()

# Simulation loop
application.SetTimestep(0.001)
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()
```

**Explanation:**

1. **Initialization:** The script starts by importing the necessary PyChrono modules for core functionality and Irrlicht visualization. It then creates a `ChSystemNSC` object to represent the physical system and sets the gravity.

2. **Material Properties:** Default material properties for the beam elements are defined using `ChMaterialBeamANCF`, specifying density, Young's modulus, and Poisson's ratio.

3. **Mesh Creation:** The code defines the geometry of the beam structure as a list of node positions and a list of elements connecting these nodes. A `ChMesh` object is created, and nodes and beams are added to it iteratively. Each beam element is defined using `ChBeamANCF`, and its material and cross-section properties are set.

4. **Boundary Conditions and Forces:**  Examples of applying boundary conditions and forces are shown. One node is fixed in space using `SetFixed(True)`, and a constant force is applied to another node using `ChForce`.

5. **Visualization and Simulation Loop:** The `ChIrrApp` class from the `chronoirr` module is used to create the visualization window. A camera and skybox are added for rendering. The `DoStep()` method advances the simulation by one time step, and the rendering is performed within the main application loop.

This script demonstrates the basic setup for simulating a simple beam structure using PyChrono's finite element capabilities. You can modify the node positions, element connectivity, material properties, boundary conditions, and forces to create different beam structures and simulate their behavior. 

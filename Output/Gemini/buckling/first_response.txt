```python
import pychrono as chrono
import pychrono.fea as fea
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
# Create the simulation system and add items
# ---------------------------------------------------------------------

system = chrono.ChSystemNSC()

# Set gravitational acceleration
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create a mesh, that is a container for groups
# of elements and their referenced nodes.
mesh = fea.ChMesh()
system.Add(mesh)

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle('Beam Buckling Simulation')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0, 2, 4))
vis.AddTypicalLights()

# Create beam material
material = fea.ChMaterialBeamANCF(fea.ChElasticityANCF(young=2e7, poisson=0.3),
                                  fea.ChPlasticityANCF(),
                                  fea.ChBeamSectionEasyRect(0.02, 0.01))

# Create beam nodes
num_elements = 20
beam_length = 2.0
node_spacing = beam_length / num_elements
nodes = []
for i in range(num_elements + 1):
    node = fea.ChNodeFEAxyzrot(chrono.ChFrameD(chrono.ChVectorD(i * node_spacing, 0, 0)))
    nodes.append(node)
    mesh.AddNode(node)

# Create beam elements
elements = []
for i in range(num_elements):
    element = fea.ChElementBeamANCF()
    element.SetNodes(nodes[i], nodes[i + 1])
    element.SetMaterial(material)
    elements.append(element)
    mesh.AddElement(element)

# Fix the first node
nodes[0].SetFixed(True)

# Apply a compressive force to the last node
force = chrono.ChForce()
force.SetMode(chrono.ChForce.FORCE)
force.SetF_x(-1000)  # Adjust the force magnitude as needed
nodes[-1].AddForce(force)

# Create a custom motor function (example)
def my_motor_function(time):
    return 0.1 * chrono.CH_C_PI * chrono.ChSine(time)  # Example sinusoidal motion

# Apply the motor function to a node (example)
# nodes[5].SetMotion_x(my_motor_function)

# Add constraints between parts of the system (example)
# constraint = chrono.ChLinkLockRevolute()
# constraint.Initialize(nodes[5], nodes[6], chrono.ChCoordsysD())
# system.Add(constraint)

# ---------------------------------------------------------------------
# Solver and time stepper settings
# ---------------------------------------------------------------------

# Use HHT integrator
solver = chrono.ChSolverMINRES()
system.SetSolver(solver)
solver.SetMaxIterations(100)
solver.SetTolerance(1e-10)

# Use a timestepper
timestepper = chrono.ChTimestepperHHT(system)
system.SetTimestepper(timestepper)
timestepper.SetStep(0.001)

# ---------------------------------------------------------------------
# Simulation loop
# ---------------------------------------------------------------------

while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    system.DoStepDynamics(timestepper.GetStep())
```

**Explanation:**

1. **Initialization:** The script starts by importing necessary PyChrono modules, creating a `ChSystemNSC` object, and setting gravity. It also initializes the Irrlicht visualization system.
2. **FEA Setup:** A `ChMesh` object is created to hold the finite element model. A `ChMaterialBeamANCF` defines the beam's material properties (Young's modulus, Poisson's ratio, and cross-section). Nodes (`ChNodeFEAxyzrot`) are created along the beam's length and added to the mesh. Beam elements (`ChElementBeamANCF`) connect these nodes and are also added to the mesh.
3. **Boundary Conditions and Forces:** The first node is fixed using `SetFixed(True)`. A compressive force is applied to the last node using a `ChForce` object.
4. **Custom Motor Function (Example):** A placeholder function `my_motor_function` demonstrates how to define a custom motion profile, which can be applied to a node using `SetMotion_x`.
5. **Constraints (Example):** An example `ChLinkLockRevolute` constraint shows how to connect two nodes with a revolute joint.
6. **Solver and Timestepper:** The script uses the `ChSolverMINRES` solver and the `ChTimestepperHHT` timestepper for accurate dynamics simulation.
7. **Simulation Loop:** The `while` loop runs the simulation, rendering the scene in each iteration and advancing the simulation time using `DoStepDynamics`.

**Key Concepts:**

* **Finite Element Analysis (FEA):** PyChrono's FEA module is used to model the beam with nodes and elements, allowing for accurate deformation analysis.
* **Custom Motor Functions:**  The script demonstrates how to define and apply custom functions to control the motion of specific nodes.
* **Constraints:**  The example constraint shows how to restrict the relative motion between different parts of the system.
* **Visualization:** The Irrlicht visualization module provides a real-time visual representation of the simulation.
* **Solver and Timestepper:** Choosing appropriate solver and timestepper settings is crucial for the accuracy and stability of the simulation.

**Remember to adjust parameters like the number of elements, beam length, force magnitude, and motor function according to your specific needs.** This script provides a solid foundation for building more complex beam buckling simulations in PyChrono.
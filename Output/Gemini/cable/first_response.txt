```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#

# Create a Chrono physical system
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
myapplication = chronoirr.ChIrrApp(system, 'ANCF Cable Beam', chronoirr.dimension2du(1024, 768))

myapplication.AddTypicalSky()
myapplication.AddTypicalLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
myapplication.AddTypicalCamera(chronoirr.vector(0, 2, 6))
myapplication.AddTypicalLights()

# Create the ground body
ground = chrono.ChBody()
ground.SetBodyFixed(True)
system.Add(ground)

# Create an ANCF cable beam
beam = chrono.ChBeamANCF()

# Set beam properties
beam.SetBeamRaleyghDamping(0.01)
beam.SetBeamYoungModulus(2e7)
beam.SetBeamPoissonRatio(0.3)
beam.SetBeamDensity(7850)
beam.SetBeamSectionRadius(0.05)

# Define the number of elements
num_elements = 10

# Set element length
element_length = 1.0 / num_elements

# Create the nodes and elements
for i in range(num_elements + 1):
    node = chrono.ChNodeFEAxyzrot()
    node.SetPos(chrono.ChVectorD(i * element_length, 0, 0))
    beam.AddNode(node)

    if i > 0:
        element = chrono.ChElementBeamANCF()
        element.SetNodes(beam.GetNode(i - 1), beam.GetNode(i))
        element.SetG(2)
        beam.AddElement(element)

# Fix the first node to the ground
constraint = chrono.ChLinkLockLock()
constraint.Initialize(ground, beam.GetNode(0), chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0)))
system.Add(constraint)

# Add the beam to the system
system.Add(beam)

# Set gravity
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# ---------------------------------------------------------------------
#
#  Run the simulation
#

# Set the time step
system.SetTimestepperType(chrono.ChTimestepper.Type_HHT)
system.SetStep(0.001)

myapplication.SetTimestep(0.001)

# Simulation loop
while myapplication.GetDevice().run():
    myapplication.BeginScene()
    myapplication.DrawAll()

    # Advance the simulation
    system.DoStepDynamics(0.001)

    myapplication.EndScene()
```

**Explanation:**

1. **Initialization:** This section imports necessary libraries, creates the Chrono system (`system`), and initializes the Irrlicht visualization (`myapplication`).

2. **Environment Setup:** A ground body is created and fixed. The camera and lighting are set up for visualization.

3. **Beam Creation:** A `ChBeamANCF` object is created to represent the beam. Its material properties (Young's modulus, Poisson's ratio, density), damping, and cross-sectional radius are defined.

4. **Node and Element Generation:** The script iterates to create nodes and elements for the beam. Each node is positioned along the x-axis, and elements are connected between consecutive nodes. The `SetG(2)` function defines the number of Gauss quadrature points for numerical integration within each element.

5. **Boundary Condition:** The first node of the beam is fixed to the ground using a `ChLinkLockLock` constraint.

6. **Gravity:** Gravity is applied to the system.

7. **Simulation Loop:** The `while` loop runs the simulation. It visualizes the system using Irrlicht and advances the simulation by calling `system.DoStepDynamics(0.001)`.

**Key Concepts:**

* **ANCF (Absolute Nodal Coordinate Formulation):** A finite element method used for flexible multibody dynamics, particularly suitable for large deformations and rotations.
* **ChBeamANCF:** PyChrono's implementation of the ANCF beam element.
* **ChNodeFEAxyzrot:** A node type used in ANCF elements, representing position and rotation.
* **ChElementBeamANCF:** The ANCF beam element connecting two nodes.
* **Gauss Quadrature:** A numerical integration technique used within the ANCF element for accuracy.

This script provides a basic simulation of an ANCF cable beam. You can modify parameters like the number of elements, material properties, and boundary conditions to explore different scenarios. Remember to install the necessary PyChrono and Irrlicht libraries to run this code.
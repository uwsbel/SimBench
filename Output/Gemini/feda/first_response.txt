```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
# Create the Chrono system and set default parameters

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# ---------------------------------------------------------------------
# Create the FEDA vehicle

# Set the initial vehicle location and orientation
initLoc = chrono.ChVectorD(0, 1, 0)
initRot = chrono.ChQuaternionD(1, 0, 0, 0)

# Create the vehicle using the JSON specification file
vehicle = veh.FEDA(system, "feda/vehicle/FEDA.json")
vehicle.Initialize(chrono.ChCoordsysD(initLoc, initRot))

# Set visualization type for vehicle parts
vehicle.SetChassisVisualizationType(veh.VisualizationType_MESH)
vehicle.SetSuspensionVisualizationType(veh.VisualizationType_MESH)
vehicle.SetSteeringVisualizationType(veh.VisualizationType_MESH)
vehicle.SetWheelVisualizationType(veh.VisualizationType_MESH)
vehicle.SetTireVisualizationType(veh.VisualizationType_MESH)

# Set the tire model (e.g., PAC89)
tire_model = veh.Pac89Tire("feda/tire/Pac89.tir")
for axle in vehicle.GetAxles():
    for wheel in axle.GetWheels():
        tire = veh.ChPac89Tire(tire_model)
        wheel.SetTire(tire)

# Set contact method (e.g., SMC)
my_hmmwv_contact = veh.ChContactMethod_SMC()
vehicle.SetContactMethod(my_hmmwv_contact)

# ---------------------------------------------------------------------
# Create the terrain

# Create the rigid terrain using a mesh
terrain = veh.RigidTerrain(system)
patch = terrain.AddPatch(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT),
                         chrono.ChVectorD(100, 100, 1))
patch.SetContactFrictionCoefficient(0.9)
patch.SetContactRestitutionCoefficient(0.01)
patch.SetContactMaterialProperties(2e7, 0.3)
patch.SetTexture(veh.GetDataFile("terrain/textures/dirt.jpg"), 12, 12)
terrain.Initialize()

# ---------------------------------------------------------------------
# Create the interactive driver system

driver = veh.ChInteractiveDriverIRR(vehicle)
driver.Initialize()

# ---------------------------------------------------------------------
# Create the Irrlicht application

myapplication = chronoirr.ChIrrApp(
    system, "FEDA Vehicle Demo", chronoirr.dimension2du(1280, 720))
myapplication.AddTypicalSky()
myapplication.AddTypicalLights()
myapplication.AddTypicalCamera(
    chronoirr.vector3df(10, 10, 10), chronoirr.vector3df(0, 1, 0))
myapplication.SetChaseCamera(vehicle.GetChassisBody(), 6.0, 0.5)
myapplication.AssetBindAll()
myapplication.AssetUpdateAll()

# ---------------------------------------------------------------------
# Simulation loop

myapplication.SetTimestep(0.02)  # 50 frames per second
myapplication.SetTryRealtime(True)

while myapplication.GetDevice().run():
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.DoStep()
    myapplication.EndScene()
```

**Explanation:**

1. **Initialization:** Imports necessary libraries, creates the Chrono system (`system`), and sets gravity.
2. **FEDA Vehicle:**
   - Loads the FEDA vehicle model from a JSON file using `veh.FEDA()`.
   - Initializes the vehicle with specified location and orientation.
   - Sets the visualization type to `MESH` for all vehicle components.
   - Sets the tire model to PAC89 and assigns it to each wheel.
   - Defines the contact method as SMC.
3. **Terrain:**
   - Creates a `RigidTerrain` object.
   - Adds a terrain patch with specified dimensions, friction, restitution, material properties, and a custom texture.
4. **Interactive Driver:**
   - Implements `ChInteractiveDriverIRR` to allow user control of the vehicle.
5. **Irrlicht Visualization:**
   - Creates an Irrlicht application (`myapplication`) for rendering the simulation.
   - Adds sky, lights, and a chase camera that follows the vehicle.
6. **Simulation Loop:**
   - Sets the timestep to 0.02 (50 fps) and attempts to run in real-time.
   - Continuously updates the simulation and renders the scene until the application is closed.

**Key Features:**

- **Realistic Vehicle Model:** Uses the FEDA vehicle model with detailed specifications.
- **Customizable Terrain:** Allows defining terrain properties and applying custom textures.
- **Interactive Control:** Enables user interaction through an interactive driver system.
- **Real-time Visualization:** Renders the simulation using Irrlicht at 50 fps, providing a visually engaging experience.

This script provides a foundation for simulating a FEDA vehicle on a rigid terrain. You can further customize it by adjusting parameters, adding more complex scenarios, and integrating additional functionalities as needed. Remember to install the necessary PyChrono and Irrlicht libraries before running the script.
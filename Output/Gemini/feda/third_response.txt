```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle location and orientation
initLoc = chrono.ChVector3d(0, 0, 0.5)
initRot = chrono.ChQuaterniond(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_MESH

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
tire_model = veh.TireModelType_TMEASY

# Rigid terrain
terrainHeight = 0      # terrain height
terrainLength = 100.0  # size in X direction
terrainWidth = 100.0   # size in Y direction

# Point tracked by the camera
trackPoint = chrono.ChVector3d(-3.0, 0.0, 1.1)

# Contact method
contact_method = chrono.ChContactMethod_NSC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# Create the FEDA vehicle, set parameters, and initialize
vehicle = veh.FEDA()
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)

vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the terrain
patch_mat = chrono.ChContactMaterialNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
terrain = veh.RigidTerrain(vehicle.GetSystem())
patch = terrain.AddPatch(patch_mat, 
    chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), 
    terrainLength, terrainWidth)

# **1. Terrain Texture Change:**
patch.SetTexture(veh.GetDataFile("terrain/textures/grass.jpg"), 200, 200)  # Changed to grass texture
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('FEDA vehicle')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())

# **2. Sensor Manager and Light Additions:**
manager = chrono.ChSensorManager(vehicle.GetSystem())  # Create sensor manager

# Add point lights
light_1 = chrono.ChLight()
light_1.SetLightType(chrono.ChLight.Type_POINT)
light_1.SetIntensity(1000)
light_1.SetPosition(chrono.ChVector3d(0, 0, 5))
vis.AddLight(light_1)

light_2 = chrono.ChLight()
light_2.SetLightType(chrono.ChLight.Type_POINT)
light_2.SetIntensity(1000)
light_2.SetPosition(chrono.ChVector3d(0, -10, 5))
vis.AddLight(light_2)

# Create the driver system
driver = veh.ChInteractiveDriverIRR(vis)

# Set the time response for steering and throttle keyboard inputs.
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1
driver.SetSteeringDelta(render_step_size / steering_time)
driver.SetThrottleDelta(render_step_size / throttle_time)
driver.SetBrakingDelta(render_step_size / braking_time)

driver.Initialize()

# output vehicle mass
print( "VEHICLE MASS: ",  vehicle.GetVehicle().GetMass())

# **3. Camera Sensor Addition:**
# Camera parameters
camera_fov = 1.2  # Field of view
camera_resolution = (1280, 720)  # Resolution

# Create the camera sensor
camera = chrono.ChCameraSensor(
    vehicle.GetChassisBody(),  # Attach to chassis
    10,                       # Update rate
    chrono.ChFrameD(chrono.ChVector3d(0.2, 0, 1.4)),  # Position relative to chassis
    camera_fov,              # Field of view
    camera_resolution        # Resolution
)
camera.SetName("Camera Sensor")
manager.AddSensor(camera)

# Create a visualization filter
filter = manager.AddSensorVisualization(chrono.ChVisualizationType_SENSOR_CAMERA, camera)

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run() :
    time = vehicle.GetSystem().GetChTime()

    # Render scene
    if (step_number % render_steps == 0) :
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)
    
    # **4. Sensor Manager Update in Simulation Loop:**
    manager.Update()

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)
```

**Explanation of Changes:**

1. **Terrain Texture Change:**
   - The line `patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 200, 200)` was changed to `patch.SetTexture(veh.GetDataFile("terrain/textures/grass.jpg"), 200, 200)`. This replaces the default tile texture with a grass texture.

2. **Sensor Manager and Light Additions:**
   - `manager = chrono.ChSensorManager(vehicle.GetSystem())` creates a sensor manager, which is necessary for managing sensors like cameras.
   - Two point lights were added using `chrono.ChLight()`, positioned, and added to the visualization using `vis.AddLight()`. This provides better illumination of the scene.

3. **Camera Sensor Addition:**
   - A `chrono.ChCameraSensor` object is created and configured with parameters like position, field of view, and resolution.
   - `manager.AddSensor(camera)` adds the camera to the sensor manager.
   - `filter = manager.AddSensorVisualization(chrono.ChVisualizationType_SENSOR_CAMERA, camera)` creates a visualization filter that allows you to see the camera's output in the simulation.

4. **Sensor Manager Update in Simulation Loop:**
   - `manager.Update()` is called within the simulation loop to update the sensor data and ensure the camera captures the current scene.

These modifications address the instructions and enhance the simulation with a camera providing a first-person view from the vehicle and improved lighting. Remember that the path to the grass texture ("terrain/textures/grass.jpg") should be valid within your Chrono data directory.
```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# ---------------------
# Simulation parameters
# ---------------------

# Time step
time_step = 1e-3

# Simulation duration
t_end = 10

# ---------------------
# Chrono initialization
# ---------------------

# Create the Chrono system
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVector3(0, -9.81, 0))

# ---------------------
# Vehicle parameters
# ---------------------

# Initial location and orientation
initLoc = chrono.ChVectorD(0, 1, 0)
initRot = chrono.ChQuaternionD(1, 0, 0, 0)

# Contact method
contact_method = chrono.ChContactMethod_SMC

# Tire model
tire_model = veh.TireModelType_TMEASY

# Visualization type
visualization_type = veh.VisualizationType_MESH

# ---------------------
# Terrain parameters
# ---------------------

# Terrain dimensions
terrainWidth = 200
terrainLength = 200

# Terrain texture
terrainTexture = "textures/grass.jpg"

# ---------------------
# Create the vehicle
# ---------------------

# Create the vehicle system
vehicle = veh.Gator(system)

# Initialize the vehicle
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(initLoc, initRot))
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisVisualizationType(visualization_type)
vehicle.SetSuspensionVisualizationType(visualization_type)
vehicle.SetSteeringVisualizationType(visualization_type)
vehicle.SetWheelVisualizationType(visualization_type)
vehicle.SetTireType(tire_model)
vehicle.Initialize()

# ---------------------
# Create the terrain
# ---------------------

# Create the rigid terrain
terrain = veh.RigidTerrain(system)

# Add a patch with specified dimensions and texture
patch = terrain.AddPatch(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT),
                        chrono.ChVectorD(terrainWidth, terrainLength, 1))
patch.SetTexture(chrono.GetChronoDataFile(terrainTexture))
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

# ---------------------
# Create the driver system
# ---------------------

# Create the interactive driver system
driver = veh.ChInteractiveDriverIRR(vehicle)

# Set the time response for steering and throttle inputs
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1

driver.SetSteeringDelta(steering_time / 0.5)  # this is necessary to convert it from radians to steer angle
driver.SetThrottleDelta(throttle_time)
driver.SetBrakingDelta(braking_time)

driver.Initialize()

# ---------------------
# Create the Irrlicht application
# ---------------------

# Create the Irrlicht application
app = chronoirr.ChIrrApp(system, "Gator Vehicle Demo", chronoirr.dimension2du(1000, 800))
app.AddTypicalSky()
app.AddTypicalLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
app.AddTypicalCamera(chronoirr.vector3df(10, 10, 10), chronoirr.vector3df(0, 1, 0))
app.AddTypicalLights()

app.AssetBindAll()
app.AssetUpdateAll()

# ---------------------
# Simulation loop
# ---------------------

# Simulation loop
app.SetTimestep(time_step)
app.SetTryRealtime(True)

while app.GetDevice().run():
    # Update the driver inputs
    driver.Synchronize(time_step)

    # Advance the simulation
    system.DoStepDynamics(time_step)

    # Update the visualization
    app.BeginScene(True, True, chronoirr.SColor(255, 140, 161, 192))
    app.DrawAll()
    app.EndScene()

    # Ensure 50 FPS
    chrono.ChRealtimeStepTimer.AccumulateTime(time_step)
```

**Explanation:**

1. **Initialization:** The script starts by importing the necessary PyChrono modules and defining simulation parameters such as time step and duration. It then creates a Chrono system and sets the gravity.

2. **Vehicle Setup:**  The script defines parameters for the Gator vehicle, including initial position, orientation, contact method, tire model, and visualization type. It then creates the Gator vehicle object and initializes it with these parameters.

3. **Terrain Creation:** The script defines parameters for the terrain, including dimensions and texture. It creates a RigidTerrain object and adds a patch with the specified properties.

4. **Driver System:** The script creates an interactive driver system using `ChInteractiveDriverIRR`. This allows the user to control the vehicle using keyboard inputs. It sets the response times for steering, throttle, and braking.

5. **Irrlicht Visualization:** The script creates an Irrlicht application for visualizing the simulation. It sets up the scene with a sky, logo, camera, and lighting.

6. **Simulation Loop:** The script runs a loop that updates the driver inputs, advances the simulation, and renders the scene. It uses `ChRealtimeStepTimer` to maintain a frame rate of 50 FPS.

**Key Features:**

* **Gator Vehicle:** Uses the built-in Gator vehicle model from the PyChrono vehicle library.
* **Rigid Terrain:** Creates a flat rigid terrain with a custom texture.
* **Interactive Driver:** Allows the user to control the vehicle in real-time using keyboard inputs.
* **Mesh Visualization:** Uses mesh visualization for all vehicle components for realistic rendering.
* **Real-time Simulation:** Aims for real-time simulation with a target frame rate of 50 FPS.

**Running the Script:**

1. Make sure you have PyChrono and its dependencies installed.
2. Save the script as a Python file (e.g., `gator_simulation.py`).
3. Run the script from the command line: `python gator_simulation.py`.

This will start the simulation and open an Irrlicht window where you can see the Gator vehicle on the terrain. Use the arrow keys to control the vehicle:

* **Up Arrow:** Accelerate (Throttle)
* **Down Arrow:** Brake
* **Left Arrow:** Steer Left
* **Right Arrow:** Steer Right

Remember to adjust the parameters and code as needed to meet your specific simulation requirements.
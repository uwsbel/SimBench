```python
import pychrono as chrono
import pychrono.postprocess as postprocess
import pychrono.irrlicht as chronoirr
import pychrono.robot as chronorobot
import rospy 

# ROS message types
from std_msgs.msg import Int32

class CustomRosHandler(chronorobot.RosChSystem):
    def __init__(self, step_size):
        chronorobot.RosChSystem.__init__(self, step_size)

        # Create a ROS publisher
        self.pub = rospy.Publisher('my_topic', Int32, queue_size=10)

    def update(self):
        # Publish a message
        msg = Int32()
        msg.data = 123  # Example data
        self.pub.publish(msg)

# Create Chrono system
system = chrono.ChSystemNSC()
system.Set_G(chrono.ChVectorD(0, -9.81, 0))

# Set up physical material properties
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.5)
material.SetRestitution(0.2)

# Create a fixed floor
floor = chrono.ChBodyEasyBox(10, 1, 10, 1000)
floor.SetBodyFixed(True)
floor.SetPos(chrono.ChVectorD(0, -0.5, 0))
floor.GetCollisionModel().ClearModel()
floor.GetCollisionModel().AddBox(material, 5, 0.5, 5)
floor.GetCollisionModel().BuildModel()
system.Add(floor)

# Create a movable box
box = chrono.ChBodyEasyBox(1, 1, 1, 1000)
box.SetPos(chrono.ChVectorD(0, 1, 0))
box.GetCollisionModel().ClearModel()
box.GetCollisionModel().AddBox(material, 0.5, 0.5, 0.5)
box.GetCollisionModel().BuildModel()
system.Add(box)

# Initialize ROS node
rospy.init_node('chrono_sim')

# Create ROS manager and handlers
ros_manager = chronorobot.RosChSystemManager(system)
ros_manager.AddClockHandler()
ros_manager.AddBodyHandler(box, "box")
ros_manager.AddTfHandler(chrono.ChFrameD(), "world")

# Register the custom handler
custom_handler = CustomRosHandler(1e-3)  # Step size in seconds
ros_manager.AddHandler(custom_handler)

# Simulation loop
time_step = 1e-3
while not rospy.is_shutdown():
    # Advance the simulation
    system.DoStepDynamics(time_step)

    # Update ROS communication
    ros_manager.update()

    # Maintain real-time execution (adjust sleep duration as needed)
    rospy.sleep(time_step)
```

**Explanation:**

1. **Import Libraries:** The script begins by importing necessary libraries, including PyChrono modules for simulation, post-processing, visualization, and ROS integration, as well as the `rospy` library for ROS communication.
2. **Custom ROS Handler:** A custom class `CustomRosHandler` is defined, inheriting from `chronorobot.RosChSystem`. This class handles publishing an integer message to the 'my_topic' topic at each simulation step.
3. **Chrono System Setup:** A Chrono system is created using `chrono.ChSystemNSC()`. Gravitational acceleration is set, and a material with friction and restitution properties is defined.
4. **Adding Objects:** A fixed floor and a movable box are created using `chrono.ChBodyEasyBox` and added to the system. Their collision models are defined using boxes with the specified material properties.
5. **ROS Initialization:** A ROS node named 'chrono_sim' is initialized using `rospy.init_node()`.
6. **ROS Manager and Handlers:** A `chronorobot.RosChSystemManager` is created to manage communication between Chrono and ROS. Clock, body, and transform handlers are added to synchronize time, object states, and coordinate frames. The custom ROS handler is also registered using `ros_manager.AddHandler()`.
7. **Simulation Loop:** The main simulation loop runs as long as ROS is not shutdown. Inside the loop:
   - `system.DoStepDynamics(time_step)` advances the Chrono simulation by one time step.
   - `ros_manager.update()` updates ROS communication, publishing and receiving messages.
   - `rospy.sleep(time_step)` ensures real-time execution by pausing the loop for the duration of the simulation time step.

This script sets up a basic PyChrono simulation integrated with ROS. The simulation includes a floor and a box, and it publishes an integer message to a ROS topic at each time step. The ROS manager and handlers synchronize the simulation state with ROS, allowing you to monitor and control the simulation from other ROS nodes.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# ---------------------------------------------------------------------
# Create the Chrono system and set default parameters

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))

# ---------------------------------------------------------------------
# Create the terrain

terrain = veh.RigidTerrain(system)
patch_mat = chrono.ChMaterialSurfaceNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
patch_mat.SetContactMethod(chrono.ChContactMethod_NSC)
patch_mat.SetCompliance(0.00001)
patch = terrain.AddPatch(patch_mat, 
                         chrono.ChVectorD(-50, -50, 0), chrono.ChVectorD(50, -50, 0), 
                         chrono.ChVectorD(50, 50, 0), chrono.ChVectorD(-50, 50, 0))
patch.SetColor(chrono.ChColor(0.8, 0.8, 1.0))
patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 20, 20)
terrain.Initialize()

# ---------------------------------------------------------------------
# Create the Kraz vehicle

vehicle = veh.KrazTruck(system)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1.6)))
vehicle.SetInitFwdVel(0.0)
vehicle.Initialize()

# ---------------------------------------------------------------------
# Create the driver system

driver = veh.ChDriver(vehicle)
driver.Initialize()

# ---------------------------------------------------------------------
# Create the Irrlicht application

app = chronoirr.ChIrrApp(system, "Kraz Vehicle Demo", chronoirr.dimension2du(1024,768))
app.AddTypicalSky()
app.AddTypicalLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
app.AddTypicalCamera(chronoirr.vector3df(10,10,10), chronoirr.vector3df(0,0,1.6))
app.AddTypicalLights()

app.AssetBindAll()
app.AssetUpdateAll()

# ---------------------------------------------------------------------
# Simulation loop

app.SetTimestep(0.01)
app.SetTryRealtime(True)

while app.GetDevice().run():
    time = system.GetChTime()

    # Driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)

    # Advance simulation for one timestep for all modules
    driver.Advance(step=0.01)
    terrain.Advance(step=0.01)
    vehicle.Advance(step=0.01)

    app.BeginScene()
    app.DrawAll()
    app.EndScene()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `chrono`, `chronoirr`, and `veh`.
   - Create a Chrono system (`ChSystemNSC`).
   - Set gravitational acceleration.

2. **Terrain Creation:**
   - Create a rigid terrain object using `veh.RigidTerrain`.
   - Define material properties like friction, restitution, and contact method.
   - Add a terrain patch with specified dimensions and visual properties (color and texture).
   - Initialize the terrain.

3. **Vehicle Creation:**
   - Create a Kraz truck object using `veh.KrazTruck`.
   - Set initial position and forward velocity.
   - Initialize the vehicle.

4. **Driver System Creation:**
   - Create a driver object using `veh.ChDriver`.
   - Initialize the driver.

5. **Visualization with Irrlicht:**
   - Create an Irrlicht application (`ChIrrApp`).
   - Add sky, logo, camera, and lighting for visualization.
   - Bind and update assets.

6. **Simulation Loop:**
   - Set the simulation timestep and enable real-time execution.
   - Run the loop as long as the Irrlicht device is running.
   - Get driver inputs using `driver.GetInputs()`.
   - Synchronize the driver, terrain, and vehicle modules.
   - Advance the simulation for each module.
   - Render the scene using Irrlicht functions (`BeginScene`, `DrawAll`, `EndScene`).

**Key Features:**

- **Realistic Vehicle Model:** Uses the `veh.KrazTruck` class for a detailed Kraz vehicle model.
- **Rigid Terrain:** Implements a rigid terrain with configurable properties.
- **Driver System:** Includes a driver system for controlling the vehicle.
- **Real-time Visualization:** Utilizes Irrlicht for real-time visualization with camera controls and lighting.
- **Synchronized Simulation:** Ensures proper synchronization between vehicle, terrain, driver, and visualization.

This script provides a comprehensive foundation for simulating a Kraz vehicle in a PyChrono environment. You can further customize the script by adding more features, such as obstacles, sensors, and advanced control algorithms.
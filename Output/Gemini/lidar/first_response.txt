```python
import pychrono as chrono
import pychrono.sensor as sens
import numpy as np
import math

# ---------------------------------------------------------------------
#  Create a Chrono system and set simulation parameters
# ---------------------------------------------------------------------
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, 0, 0))

# Simulation time step
time_step = 1e-3
system.SetStep(time_step)

# ---------------------------------------------------------------------
#  Create the simulation environment (add ground and asset)
# ---------------------------------------------------------------------
chrono.SetChronoDataPath("./data/")

# Create a body using the Wavefront .obj mesh
mesh_asset = chrono.ChAsset()
mesh_asset.AppendAsset(chrono.ChObjShapeFile("./sensor_test_assets/house.obj"))
mesh_body = chrono.ChBodyEasyMesh(
    mesh_asset,  # Mesh asset
    1000,        # Density
    True,        # Compute mass inertia
    True,        # Use visualization asset
    False        # Use collision shape
)
system.Add(mesh_body)
mesh_body.SetPos(chrono.ChVectorD(0, 0, 0))
mesh_body.SetBodyFixed(True)  # Fix the mesh in space

# ---------------------------------------------------------------------
#  Create a sensor manager and add a lidar sensor
# ---------------------------------------------------------------------
manager = sens.ChSensorManager(system)

# Create a Lidar sensor
lidar = sens.ChLidarSensor(
    mesh_body,              # Body to attach the sensor to
    chrono.ChFrameD(chrono.ChVectorD(0, 0, 2)),  # Offset respect to body
    1.0,                   # Update rate in Hz
    chrono.ChVectorD(0, 1, 0), # Direction the sensor is pointing
    50,                   # Number of horizontal rays
    chrono.CH_C_DEG_TO_RAD * 20.0, # FOV,
    50.0                 # Maximum distance
)
lidar.SetName("Lidar Sensor")
# Set visualization parameters
lidar.SetShowRays(True)
lidar.SetRaysVisualizationLength(20)
lidar.SetPointSize(0.01)
# Set data filtering parameters
lidar.SetNoiseModel(sens.ChLidarSensor.NoiseModel.GAUSSIAN)
lidar.SetGaussianNoise(0.005)
# Set data saving parameters
lidar.SetSaveHorizontalRays(True)
lidar.SetSaveVerticalRays(False)
# Add the sensor to the manager
manager.AddSensor(lidar)

# ---------------------------------------------------------------------
#  Simulation loop
# ---------------------------------------------------------------------
# Time to simulate for
t_end = 10.0
time = 0

while time < t_end:
    # Update the position of the lidar in orbit
    orbit_radius = 5.0
    orbit_speed = 0.5
    angle = orbit_speed * time
    lidar.SetOffsetPos(chrono.ChVectorD(orbit_radius * math.cos(angle), 0, orbit_radius * math.sin(angle)))

    # Advance simulation by one step
    manager.Update()
    system.DoStepDynamics(time_step)

    # Print lidar buffer data
    print(f"Time: {time:.2f}")
    print(f"Lidar data buffer size: {lidar.GetPointCloud().size()}")

    time += time_step

# ---------------------------------------------------------------------
#  Save sensor data to file
# ---------------------------------------------------------------------
manager.ExportData("./sensor_output/test_output")
```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries (Chrono, sensor module, NumPy, math).
   - Creates a Chrono system (`ChSystemNSC`).
   - Sets gravity to zero and defines the simulation time step.

2. **Environment Setup:**
   - Loads the triangular mesh from a Wavefront `.obj` file using `ChBodyEasyMesh`.
   - Sets the mesh body as fixed in the simulation world.

3. **Sensor Setup:**
   - Creates a `ChSensorManager` to manage sensor operations.
   - Creates a `ChLidarSensor` object and configures its parameters:
     - Parent body, offset, update rate, direction.
     - Number of horizontal and vertical rays, field of view (FOV), maximum distance.
   - Configures visualization options for the lidar rays.
   - Sets noise model and parameters (Gaussian noise in this example).
   - Enables saving of horizontal ray data.
   - Adds the lidar sensor to the sensor manager.

4. **Simulation Loop:**
   - Iterates over the simulation time.
   - Updates the lidar sensor's position in an orbital trajectory around the mesh object.
   - Updates the sensor manager to process data.
   - Performs a simulation step using `system.DoStepDynamics()`.
   - Prints the current time and lidar point cloud buffer size for every step.

5. **Data Saving:**
   - After the simulation loop, the sensor data is exported to a specified directory using `manager.ExportData()`.

This script sets up a basic scene with a static mesh and a moving lidar sensor. The lidar simulates realistic data acquisition by incorporating noise and provides options for visualization and data storage. This example can be extended to include more complex environments, sensor types, and analysis of the generated data. 

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# ---------------------------------------------------------------------
#  Create the simulation system and set default parameters
# ---------------------------------------------------------------------
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))  # Set gravitational acceleration

# Set default simulation time step
time_step = 1e-3

# ---------------------------------------------------------------------
#  Create the M113 vehicle
# ---------------------------------------------------------------------
# Create the vehicle system
vehicle = veh.WheeledVehicle(system, veh.GetDataPath() + 'M113/vehicle/M113_Vehicle.json')
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1), chrono.ChQuaternionD(1, 0, 0, 0)))

# Set initial vehicle conditions
vehicle.SetVehicleSpeed(5.0)  # Initial speed in m/s
# (Add other desired initial conditions, e.g., suspension settings, tire pressure, etc.)

# ---------------------------------------------------------------------
#  Create the terrain
# ---------------------------------------------------------------------
terrain = veh.RigidTerrain(system)
patch = terrain.AddPatch(chrono.ChMaterialSurfaceNSC(), 
                         chrono.ChVectorD(-50, -50, 0), chrono.ChVectorD(50, 50, 0), 0.1)
patch.SetContactFrictionCoefficient(0.8)
patch.SetContactRestitutionCoefficient(0.01)
terrain.Initialize()

# ---------------------------------------------------------------------
#  Create the driver system
# ---------------------------------------------------------------------
# Replace with your chosen driver system (e.g., PID, MPC, keyboard input)
driver = veh.ChDriver(vehicle)
# (Set desired driver parameters, e.g., steering gains, throttle/brake mapping, etc.)

# ---------------------------------------------------------------------
#  Create the visualization application
# ---------------------------------------------------------------------
application = chronoirr.ChIrrApp(system, "M113 Simulation", chronoirr.dimension2du(1280, 720))
application.AddTypicalSky()
application.AddTypicalLights()

# Set camera settings
application.AssetBindAll();
application.AssetUpdateAll();
camera = application.GetDevice().getSceneManager().addCameraSceneNode(
    None, chronoirr.vector3df(5, -10, 5), chronoirr.vector3df(0, 0, 1)
)

# ---------------------------------------------------------------------
#  Simulation loop
# ---------------------------------------------------------------------
application.SetTimestep(time_step)
application.SetTryRealtime(True)

while application.GetDevice().run():
    time = system.GetChTime()

    # Get driver inputs
    driver_inputs = driver.GetInputs() 

    # Update vehicle and terrain
    vehicle.Synchronize(time, driver_inputs, terrain)
    terrain.Synchronize(time)

    # Advance the simulation system
    system.DoStepDynamics(time_step)

    # Update visualization
    application.BeginScene()
    application.DrawAll()
    application.EndScene()
```

**Explanation:**

1. **Initialization:**
   - Import necessary PyChrono modules (`chrono`, `chronoirr`, `veh`).
   - Create a ChSystemNSC object (`system`) to manage the simulation.
   - Set default gravity and simulation time step.

2. **Vehicle Creation:**
   - Load the M113 vehicle model from the provided JSON file.
   - Initialize the vehicle at a specific position and orientation.
   - Set initial conditions like speed and optionally configure suspension, tires, etc.

3. **Terrain Setup:**
   - Create a RigidTerrain object (`terrain`).
   - Add a flat ground patch using `AddPatch` with specified friction and restitution.
   - Initialize the terrain.

4. **Driver System:**
   - This script uses a placeholder `ChDriver` - **replace** this with your own driver logic! 
     - Implement a control system that interacts with the vehicle, e.g.,:
       - PID controller
       - Model Predictive Control (MPC)
       - Keyboard/joystick input

5. **Visualization (Irrlicht):**
   - Create a ChIrrApp for real-time rendering.
   - Add a skybox and default lighting.
   - Set up a camera with desired position and target.

6. **Simulation Loop:**
   - Set the simulation time step for the visualization.
   - Enable real-time simulation with `SetTryRealtime(True)`.
   - The `while` loop runs as long as the Irrlicht window is open:
     - Get the current simulation time.
     - **Retrieve driver inputs** from your driver system.
     - **Synchronize:** Update the vehicle and terrain based on the current time and inputs.
     - **Advance simulation:** Perform a simulation step using `DoStepDynamics`.
     - **Render:** Update the visualization by drawing the scene elements.

**Key Points & Customization:**

- **Driver Implementation:** The provided script is a starting point. The most crucial part is to replace the placeholder `ChDriver` with your own logic for controlling the vehicle's steering, throttle, and brakes.
- **Vehicle Parameters:** Further customize the M113's behavior by adjusting its parameters in the JSON file or programmatically after loading (e.g., tire properties, suspension settings).
- **Terrain Complexity:** You can create more complex terrains by adding multiple patches with different heights and materials, or even import mesh-based terrains.
- **Sensors and Data Collection:**  Consider adding sensors to the vehicle (e.g., GPS, IMU, lidar) to gather data during the simulation for analysis or control purposes.
- **Advanced Visualization:** Explore Irrlicht's features to enhance the visuals, such as adding more detailed objects to the environment, using custom shaders, or implementing post-processing effects. 

Certainly! I'll create a PyChrono simulation script based on your instructions for an M113 vehicle on a rigid terrain with visualization and driver control. Here's a comprehensive script that follows your requirements:

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import math

# Initialize the ChronoEngine and vehicle module
chrono.SetChronoDataPath('/path/to/chrono/data/')
veh.SetDataPath('/path/to/vehicle/data/')

# Create the simulation system
system = chrono.ChSystemNSC()

# Create the terrain
terrain = veh.RigidTerrain(system)
patch_mat = chrono.ChMaterialSurfaceNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
patch = terrain.AddPatch(patch_mat, 
                         chrono.ChVectorD(0, 0, 0), 
                         chrono.ChVectorD(0, 0, 1),
                         600, 600)
terrain.Initialize()

# Create the vehicle
vehicle = veh.M113_Vehicle(system, veh.GetDataFile('M113/vehicle/M113_Vehicle.json'))
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1.0), chrono.Q_from_AngAxis(0, chrono.ChVectorD(0, 1, 0))))

# Create and initialize the powertrain
powertrain = veh.SimplePowertrain(veh.GetDataFile('M113/powertrain/M113_SimplePowertrain.json'))
vehicle.InitializePowertrain(powertrain)

# Create the driver system
driver = veh.ChIrrGuiDriver(vehicle.GetVehicle())
driver.Initialize()

# Create the vehicle Irrlicht application
vis = veh.ChWheeledVehicleIrrApp(vehicle.GetVehicle(), 'M113 Simulation')

vis.SetHUDLocation(500, 20)
vis.SetSkyBox()
vis.AddTypicalLogo()
vis.AddTypicalLights(irr.vector3df(30, -30, 100), irr.vector3df(30, 50, 100), 250, 130)
vis.AddTypicalCamera(irr.vector3df(6, 3, 1), irr.vector3df(0, 0, 0))

vis.AssetBindAll()
vis.AssetUpdateAll()

# Simulation parameters
step_size = 1e-3
realtime_timer = chrono.ChRealtimeStepTimer()

# Simulation loop
while vis.GetDevice().run():
    time = vehicle.GetSystem().GetChTime()

    # Render scene
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(driver.GetInputModeAsString(), driver_inputs)

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Spin in place for real-time to catch up
    realtime_timer.Spin(step_size)

# Clean up
vis.GetDevice().drop()
```

This script does the following:

1. Initializes the PyChrono environment and core components.
2. Creates a rigid terrain with specified friction and restitution.
3. Sets up an M113 vehicle with initial position and orientation.
4. Initializes a driver system for vehicle control.
5. Creates a real-time visualization using Irrlicht with camera settings and lighting.
6. Implements a simulation loop that:
   - Renders the scene
   - Gets driver inputs
   - Synchronizes the vehicle, terrain, driver, and visual system
   - Advances the simulation for each module
   - Maintains real-time execution

Note: You'll need to replace '/path/to/chrono/data/' and '/path/to/vehicle/data/' with the actual paths to your Chrono data directories.

This script provides a comprehensive simulation of an M113 vehicle on a rigid terrain with real-time visualization and driver control. You can further customize the script by adjusting parameters such as terrain size, vehicle initial conditions, camera position, or adding more complex terrain features as needed.
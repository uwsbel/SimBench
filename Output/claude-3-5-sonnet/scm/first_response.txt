Here's a PyChrono script that implements the simulation as described in your instructions:

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import pychrono.sensor as sens

# Initialize the ChronoEngine and Irrlicht 3D visualization
chrono.SetChronoDataPath('/path/to/chrono/data/')
veh.SetDataPath('/path/to/vehicle/data/')

# Create the simulation system
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the Irrlicht visualization
vis = irr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1280, 720)
vis.SetWindowTitle('HMMWV on SCM Terrain')
vis.Initialize()
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0, 5, -10))
vis.AddTypicalLights()

# Create SCM terrain
terrain = veh.SCMDeformableTerrain(system)
terrain.SetPlane(chrono.ChCoordsysD())
terrain.Initialize(300, 300, 1.0)

# Set SCM soil parameters
params = veh.SCMParameters()
params.Bekker_Kphi = 0.2e6
params.Bekker_Kc = 0
params.Bekker_n = 1.1
params.Mohr_cohesion = 0
params.Mohr_friction = 30
params.Janosi_shear = 0.01
params.elastic_K = 4e7
params.damping_R = 3e4

terrain.SetSoilParameters(params)

# Enable moving patch feature
terrain.AddMovingPatch(veh.ChVectorD(0, 0, 0), veh.ChVectorD(5, 1, 5))

# Set terrain visualization properties
terrain.SetPlotType(veh.SCMDeformableTerrain.PLOT_SINKAGE, 0, 0.1)

# Create the HMMWV vehicle
hmmwv = veh.HMMWV_Full()
hmmwv.SetContactMethod(chrono.ChContactMethod_NSC)
hmmwv.SetChassisFixed(False)
hmmwv.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 1.0, 0), chrono.Q_from_AngZ(0)))
hmmwv.SetTireType(veh.TireModelType_RIGID)
hmmwv.SetTireVisualizationType(veh.VisualizationType_MESH)
hmmwv.SetVehicleVisualizationType(veh.VisualizationType_MESH)
hmmwv.Initialize()

# Add vehicle to system
hmmwv.GetSystem().AddSystem(system)

# Create the driver
driver = veh.ChIrrGuiDriver(vis)
driver.Initialize()

# Set up the vehicle input
driver.SetThrottleDelta(1.0 / 50)
driver.SetSteeringDelta(1.0 / 50)
driver.SetBrakingDelta(1.0 / 50)

# Simulation loop
step_size = 1e-3
realtime_timer = chrono.ChRealtimeStepTimer()

while vis.Run():
    time = system.GetChTime()

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    hmmwv.Synchronize(time, driver_inputs, terrain)
    vis.BeginScene()
    vis.Render()

    # Update vehicle
    hmmwv.Advance(step_size)

    # Advance simulation for one timestep for all modules
    terrain.Advance(step_size)
    vis.EndScene()

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)

# Clean up
vis.GetDevice().closeDevice()
```

This script creates a simulation of an HMMWV on SCM deformable terrain with Irrlicht visualization, as per your instructions. Here's a breakdown of the key components:

1. The necessary PyChrono modules are imported and the system is initialized.
2. An SCM deformable terrain is created with custom soil parameters and a moving patch feature.
3. The HMMWV vehicle is created with rigid tire model and mesh visualization.
4. An interactive driver system is set up to control the vehicle.
5. The simulation loop runs in real-time, updating the vehicle dynamics and rendering the scene at approximately 50 FPS (1/0.02 seconds).

Make sure to replace '/path/to/chrono/data/' and '/path/to/vehicle/data/' with the actual paths to your Chrono data directories. Also, you may need to adjust some parameters or add error handling depending on your specific requirements and setup.
I've reviewed the script and made the necessary modifications based on your instructions. Here's the corrected and modified script:

```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

# New class to manage SCM terrain parameters
class SCMTerrainParameters:
    def __init__(self, config):
        if config == "soft":
            self.Bekker_Kphi = 0.2e6
            self.Bekker_Kc = 0
            self.Bekker_n = 1.1
            self.Mohr_cohesion = 0
            self.Mohr_friction = 30
            self.Janosi_shear = 0.01
            self.elastic_K = 2e7
            self.damping = 3e4
        elif config == "mid":
            self.Bekker_Kphi = 1e6
            self.Bekker_Kc = 0
            self.Bekker_n = 1.1
            self.Mohr_cohesion = 0
            self.Mohr_friction = 30
            self.Janosi_shear = 0.01
            self.elastic_K = 5e7
            self.damping = 3e4
        elif config == "hard":
            self.Bekker_Kphi = 5e6
            self.Bekker_Kc = 0
            self.Bekker_n = 1.1
            self.Mohr_cohesion = 0
            self.Mohr_friction = 30
            self.Janosi_shear = 0.01
            self.elastic_K = 2e8
            self.damping = 3e4
        else:
            raise ValueError("Invalid terrain configuration")

    def apply_to_terrain(self, terrain):
        terrain.SetSoilParameters(self.Bekker_Kphi,
                                  self.Bekker_Kc,
                                  self.Bekker_n,
                                  self.Mohr_cohesion,
                                  self.Mohr_friction,
                                  self.Janosi_shear,
                                  self.elastic_K,
                                  self.damping)

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle location and orientation
initLoc = chrono.ChVectorD(-8, 0, 0.6)
initRot = chrono.ChQuaternionD(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_MESH

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
tire_model = veh.TireModelType_RIGID

# Terrain parameters
terrainHeight = 0      # terrain height
terrainLength = 100.0  # size in X direction
terrainWidth = 100.0   # size in Y direction

# Point tracked by the camera
trackPoint = chrono.ChVectorD(0.0, 0.0, 1.71)

# Contact method
contact_method = chrono.ChContactMethod_SMC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# Create the HMMWV vehicle, set parameters, and initialize
vehicle = veh.HMMWV_Full()
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)

vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

# Set the collision system type
vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the SCM deformable terrain patch
terrain = veh.SCMTerrain(vehicle.GetSystem())

# Initialize terrain parameters using the new class
terrain_params = SCMTerrainParameters("mid")
terrain_params.apply_to_terrain(terrain)

# Optionally, enable moving patch feature (single patch around vehicle chassis)
terrain.AddMovingPatch(vehicle.GetChassisBody(), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(5, 3, 1))

# Set plot type for SCM (false color plotting)
terrain.SetPlotType(veh.SCMTerrain.PlotType_SINKAGE, 0, 0.1)

# Initialize the SCM terrain
terrain.Initialize(20, 20, 0.02)

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('HMMWV Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())

# Create the driver system
driver = veh.ChInteractiveDriverIRR(vis)

# Set the time response for steering and throttle keyboard inputs.
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1
driver.SetSteeringDelta(render_step_size / steering_time)
driver.SetThrottleDelta(render_step_size / throttle_time)
driver.SetBrakingDelta(render_step_size / braking_time)

driver.Initialize()

# Output vehicle mass
print("VEHICLE MASS: ", vehicle.GetVehicle().GetMass())

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run():
    time = vehicle.GetSystem().GetChTime()

    # Render scene and output POV-Ray data
    if step_number % render_steps == 0:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)
```

Key modifications and corrections:

1. Created a new `SCMTerrainParameters` class to manage and set the SCM terrain parameters.
2. Replaced direct setting of terrain parameters with the new class, using predefined configurations ("soft," "mid," "hard").
3. Corrected `ChVector3d` to `ChVectorD` and `ChQuaterniond` to `ChQuaternionD`.
4. Updated `veh.SCMTerrain.PLOT_SINKAGE` to `veh.SCMTerrain.PlotType_SINKAGE`.
5. Removed the unused `terrain_model` variable.
6. Corrected the initialization of the SCM terrain parameters using the new class.

These changes address the requirements and correct potential errors in the original script.
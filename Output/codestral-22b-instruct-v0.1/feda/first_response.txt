```python
import pychrono as chrono
import pychrono.irrlicht as irr

# Initialize PyChrono environment
chrono.SetChronoDataPath('PYCHRONO_DATA_DIR')

# Create a system
my_system = chrono.ChSystemNSC()

# Create a vehicle
vehicle = chrono.vehicle.ChVehicle()
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1), chrono.Q_from_AngAxis(0, chrono.ChVectorD(0, 1, 0))))
vehicle.SetContactMethod(chrono.ChContactMethod_NSC)
vehicle.SetTireType(chrono.TireModelType_RIGID)

# Add vehicle to the system
my_system.Add(vehicle)

# Create a rigid terrain
terrain = chrono.vehicle.RigidTerrain(vehicle.GetSystem())
terrain.SetContactFrictionCoefficient(0.9)
terrain.SetContactRestitutionCoefficient(0.01)
terrain.SetContactMaterialProperties(1e7, 0.3)
terrain.SetTexture(chrono.GetChronoDataFile("terrain/textures/rock.jpg"))

# Add terrain to the system
my_system.Add(terrain)

# Create an interactive driver system
driver = chrono.vehicle.ChDriver(vehicle)
driver.Initialize()

# Set up visualization
application = irr.ChIrrApp(vehicle, 'FEDA Vehicle Simulation', irr.dimension2du(1024, 768))
application.AddTypicalLogo()
application.AddTypicalSky()
application.AddTypicalLights()
application.AddTypicalCamera(irr.vector3df(0, 3, -6))
application.SetTimestep(0.02)

# Set up visualization for vehicle parts
vehicle.SetChassisVisualizationType(chrono.VisualizationType_MESH)
vehicle.SetSuspensionVisualizationType(chrono.VisualizationType_PRIMITIVES)
vehicle.SetWheelVisualizationType(chrono.VisualizationType_MESH)

# Simulation loop
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()

    # Update vehicle dynamics
    driver.Synchronize(my_system.GetChTime())
    vehicle.Synchronize(my_system.GetChTime(), driver.GetInputs())
    my_system.DoStepDynamics(0.02)
```

This script initializes a PyChrono simulation of a FEDA vehicle on a rigid terrain using Irrlicht for visualization. It sets up the vehicle with specific parameters, adds a rigid terrain with a custom texture, and integrates an interactive driver system to control the vehicle. The simulation loop runs at 50 frames per second, updating the vehicle dynamics and rendering the scene in real time.
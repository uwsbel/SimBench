Sure, I'd be happy to help you with that. Here's a basic outline of how you might structure your PyChrono simulation script based on your instructions:

```python
# Import necessary PyChrono modules
import pychrono as chrono
import pychrono.irrlicht as irr

# Initialize the PyChrono environment
chrono.SetChronoDataPath('PYCHRONO_DATA_DIR')

# Create a system
my_system = chrono.ChSystemNSC()

# Create a rigid terrain
terrain = chrono.ChBodyEasyBox(10, 1, 10, 1000, True, True)
my_system.Add(terrain)

# Set terrain friction and restitution
terrain_material = chrono.ChMaterialSurfaceNSC()
terrain_material.SetFriction(0.9)
terrain_material.SetRestitution(0.01)
terrain.SetMaterialSurface(terrain_material)

# Create an M113 vehicle
m113 = chrono.ChBodyEasyBox(2, 1, 4, 1000, True, True)
m113.SetPos(chrono.ChVectorD(0, 1, 0))
my_system.Add(m113)

# Create a driver system for vehicle control
driver = chrono.ChDriver(m113)

# Create a real-time visualization using Irrlicht
app = irr.ChIrrApp(my_system, 'M113 Simulation', irr.dimension2du(1024, 768))
app.AddTypicalLogo()
app.AddTypicalSky()
app.AddTypicalLights()
app.AddTypicalCamera(irr.vector3df(0, 3, -6))

# Set up the simulation loop
while app.GetDevice().run():
    app.BeginScene()
    app.DrawAll()
    app.DoStep()
    app.EndScene()

    # Advance the vehicle, terrain, driver, and visual system
    my_system.DoStepDynamics(0.01)
```

This script initializes the PyChrono environment, creates a system, adds a rigid terrain and an M113 vehicle to the system, sets up a driver system for vehicle control, and creates a real-time visualization using Irrlicht. It also implements a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep.
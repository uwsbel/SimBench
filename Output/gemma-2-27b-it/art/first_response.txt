```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronovehicle

# ---------------------------------------------------------------------
#
#  Create the simulation system and add the terrain
#
# ---------------------------------------------------------------------

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Set the simulation time step
system.SetTimestepperType(chrono.ChTimestepperType.CHRONO_TS_FIXED_STEP)
system.SetStep(0.01)

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("ARTcar Simulation")
vis.Initialize()
vis.AddCamera(chrono.ChVectorD(0, 2, -5))
vis.AddLight(chrono.ChVectorD(0, 5, 0), chrono.ChColor(1, 1, 1))

# Create a rigid terrain
terrain = chrono.ChRigidTerrain(system, 200, 200)
terrain.SetTexture(chrono.GetChronoDataPath() + 'terrain/textures/grass.png')
terrain.Initialize()

# ---------------------------------------------------------------------
#
#  Create the ARTcar vehicle
#
# ---------------------------------------------------------------------

vehicle = chronovehicle.ChVehicle(system)

# Set vehicle initial position and orientation
vehicle.SetInitPosition(chrono.ChVectorD(0, 0.5, 0))
vehicle.SetInitRotation(chrono.Q_from_AngAxis(0, chrono.ChVectorD(0, 1, 0)))

# Set contact method
vehicle.SetChassisContactMethod(chronovehicle.ChContactMethod.NSC)

# Set visualization type
vehicle.SetChassisVisualizationType(chronovehicle.ChVisualizationType.PRIMITIVES)

# Add vehicle components (chassis, wheels, suspension, etc.)
# ... (Refer to Chrono documentation for detailed vehicle setup)

# ---------------------------------------------------------------------
#
#  Create the interactive driver system
#
# ---------------------------------------------------------------------

driver = chronovehicle.ChInteractiveDriver(vehicle)

# ---------------------------------------------------------------------
#
#  Simulation loop
#
# ---------------------------------------------------------------------

while vis.Run():
    # Update the driver input
    driver.Update(vis.GetDeltaTime())

    # Advance the simulation
    system.DoStepDynamics(vis.GetDeltaTime())

    # Update the visualization
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

    # Limit the simulation rate to 50 FPS
    chrono.ChTime.Wait(1.0 / 50.0)

```

**Explanation:**

1. **Initialization:**
   - Imports necessary Chrono modules.
   - Creates a Chrono system (`system`) and sets gravity.
   - Sets the timestepper type and step size for the simulation.
   - Initializes the Irrlicht visualization system (`vis`) and sets up the camera and lighting.
   - Creates a rigid terrain (`terrain`) with specified dimensions and texture.

2. **Vehicle Creation:**
   - Creates an ARTcar vehicle (`vehicle`) using ChronoVehicle.
   - Sets the initial position and orientation of the vehicle.
   - Configures the contact method and visualization type for the vehicle.
   - **Note:** You need to add the specific components of the ARTcar (chassis, wheels, suspension, etc.) according to the vehicle's design. Refer to the ChronoVehicle documentation for details on how to create and configure these components.

3. **Interactive Driver:**
   - Creates an `chronovehicle.ChInteractiveDriver` object (`driver`) to control the vehicle's steering, throttle, and braking using keyboard or joystick input.

4. **Simulation Loop:**
   - Enters a loop that continues until the Irrlicht window is closed.
   - Updates the driver input based on user interaction.
   - Advances the simulation by one time step using `system.DoStepDynamics()`.
   - Renders the scene using Irrlicht (`vis.Render()`).
   - Limits the simulation rate to 50 frames per second using `chrono.ChTime.Wait()`.

**Remember:**

- This script provides a basic framework. You need to fill in the details for creating the ARTcar vehicle components and configuring its properties.
- Refer to the Chrono documentation for detailed information on using ChronoVehicle and Irrlicht visualization.
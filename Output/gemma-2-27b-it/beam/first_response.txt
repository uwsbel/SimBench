```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#
# ---------------------------------------------------------------------

# Create a Chrono system
my_system = chrono.ChSystemNSC()

# Set gravitational acceleration
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create a material for the beam
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.3)
material.SetRestitution(0.2)

# Create a mesh of beams
beam_mesh = chrono.ChMesh()

# Define nodes (positions)
nodes = [
    chrono.ChNodeFEAxyz(chrono.ChVectorD(-1, 0, 0)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(1, 0, 0)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(1, 1, 0)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(-1, 1, 0)),
]

# Add nodes to the mesh
for node in nodes:
    beam_mesh.AddNode(node)

# Define beam elements (connectivity)
elements = [
    chrono.ChElementBeamEuler(nodes[0], nodes[1], material),
    chrono.ChElementBeamEuler(nodes[1], nodes[2], material),
    chrono.ChElementBeamEuler(nodes[2], nodes[3], material),
    chrono.ChElementBeamEuler(nodes[3], nodes[0], material),
]

# Add elements to the mesh
for element in elements:
    beam_mesh.AddElement(element)

# Add the mesh to the system
my_system.Add(beam_mesh)

# ---------------------------------------------------------------------
#
#  Create the Irrlicht visualization system
#
# ---------------------------------------------------------------------

# Create the Irrlicht application
myapplication = chronoirr.ChIrrApp(my_system, "Beam FEA Simulation", chronoirr.dimension2du(800, 600))

# Set the camera position
myapplication.AddTypicalCamera(chrono.ChVectorD(0, 2, -3), chrono.ChVectorD(0, 0, 0))

# Set the visualization mode
myapplication.SetSymbolscale(0.05)
myapplication.SetShowInfos(True)
myapplication.SetShowContacts(True)

# ---------------------------------------------------------------------
#
#  Run the simulation
#
# ---------------------------------------------------------------------

# Simulation loop
while myapplication.GetDevice().run():
    myapplication.BeginScene()
    myapplication.Draw3D()
    myapplication.DoStep()
    myapplication.EndScene()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary Chrono and Irrlicht modules.
   - Creates a Chrono system (`my_system`) and sets gravitational acceleration.
   - Defines a material (`material`) with friction and restitution properties.

2. **Beam Mesh Creation:**
   - Creates a Chrono mesh (`beam_mesh`).
   - Defines nodes (`nodes`) as `ChNodeFEAxyz` objects with specific positions.
   - Adds nodes to the mesh.
   - Defines beam elements (`elements`) as `ChElementBeamEuler` objects, connecting nodes and using the defined material.
   - Adds elements to the mesh.
   - Adds the complete mesh to the Chrono system.

3. **Visualization Setup:**
   - Creates an Irrlicht application (`myapplication`) linked to the Chrono system.
   - Sets the window title and dimensions.
   - Adds a typical camera view.
   - Configures visualization settings like symbol scale, information display, and contact visualization.

4. **Simulation Loop:**
   - Enters the main simulation loop, which continues until the Irrlicht window is closed.
   - Inside the loop:
     - Begins the Irrlicht scene rendering.
     - Draws the 3D scene.
     - Performs a single simulation step using `myapplication.DoStep()`.
     - Ends the Irrlicht scene rendering.

**To run this script:**

- Make sure you have PyChrono and Irrlicht installed.
- Save the script as a `.py` file (e.g., `beam_simulation.py`).
- Run the script from your terminal using `python beam_simulation.py`.

This will open a window displaying the beam mesh and simulate its behavior under gravity. You can interact with the camera and view the simulation in real-time.
```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#
# ---------------------------------------------------------------------

# Create a physical system
system = chrono.ChSystemNSC()

# Set gravitational acceleration
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create a material for the beam
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.3)
material.SetRestitution(0.2)

# Create a mesh of beams
beam_length = 1.0
beam_width = 0.1
beam_height = 0.1

# Define nodes
nodes = [
    chrono.ChNodeFEAxyz(chrono.ChVectorD(0, 0, 0)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(beam_length, 0, 0)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(beam_length, 0, beam_height)),
    chrono.ChNodeFEAxyz(chrono.ChVectorD(0, 0, beam_height)),
]

# Define elements
elements = [
    chrono.ChElementBeamEuler(nodes[0], nodes[1], material),
    chrono.ChElementBeamEuler(nodes[1], nodes[2], material),
    chrono.ChElementBeamEuler(nodes[2], nodes[3], material),
    chrono.ChElementBeamEuler(nodes[3], nodes[0], material),
]

# Create a beam mesh
beam_mesh = chrono.ChMesh()
beam_mesh.AddNodes(nodes)
beam_mesh.AddElements(elements)

# Add the mesh to the system
system.Add(beam_mesh)

# ---------------------------------------------------------------------
#
#  Create the Irrlicht visualization system
#
# ---------------------------------------------------------------------

# Create the Irrlicht application
myapplication = chronoirr.ChIrrApp(system, "Beam FEA Simulation", chronoirr.dimension2du(800, 600))

# Set the camera position
myapplication.SetCameraPosition(chrono.ChVectorD(2, 2, 2))
myapplication.SetCameraLookAt(chrono.ChVectorD(0, 0, 0))

# Add the visualization of the mesh
myapplication.AddTypicalSky()
myapplication.AddLight(chrono.ChVectorD(1, 1, 1), chrono.ChColor(1, 1, 1))
myapplication.AddMesh(beam_mesh, chrono.ChColor(1, 0, 0))

# ---------------------------------------------------------------------
#
#  Run the simulation
#
# ---------------------------------------------------------------------

# Set the simulation time step
myapplication.SetTimestep(0.01)

# Run the simulation loop
myapplication.Run()
```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono and Irrlicht modules.
   - Creates a `ChSystemNSC` object to represent the physical system.
   - Sets gravitational acceleration.

2. **Beam Mesh Creation:**
   - Defines beam dimensions and creates nodes using `ChNodeFEAxyz`.
   - Creates beam elements using `ChElementBeamEuler`, specifying the nodes and material.
   - Assembles nodes and elements into a `ChMesh` object.
   - Adds the mesh to the physical system.

3. **Visualization Setup:**
   - Creates a `ChIrrApp` object for Irrlicht visualization.
   - Sets camera position and look-at point.
   - Adds a sky, light source, and the beam mesh to the visualization.

4. **Simulation Loop:**
   - Sets the simulation time step.
   - Runs the Irrlicht application, which handles the simulation loop, rendering, and user interaction.

**Key Points:**

- This script demonstrates the basic use of beam finite elements in PyChrono.
- You can modify beam properties (length, width, height, material) to explore different scenarios.
- The Irrlicht engine provides real-time visualization of the simulation.
- You can add more complex geometries, forces, and constraints to create more elaborate simulations.
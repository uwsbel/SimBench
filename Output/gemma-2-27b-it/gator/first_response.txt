```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronovehicle

# ---------------------------------------------------------------------
#
#  Create the simulation system and add the terrain
#
# ---------------------------------------------------------------------

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Set the simulation time step
system.SetTimestepperType(chrono.ChTimestepperType.CHRONO_TS_FIXED_STEP)
system.SetStep(1.0 / 50.0)

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('Gator Vehicle Simulation')
vis.Initialize()

# Create a rigid terrain
terrain = chrono.ChRigidTerrain(system)
patch = chrono.ChRigidTerrain::Patch(terrain)
patch.SetSize(200, 200)
patch.SetTexture(chrono.GetChronoDataPath() + 'terrain/textures/grass.png')
patch.Initialize()

# ---------------------------------------------------------------------
#
#  Create the Gator vehicle
#
# ---------------------------------------------------------------------

vehicle = chronovehicle.ChVehicle(system)

# Set vehicle location and orientation
vehicle.SetChassisPosition(chrono.ChVectorD(0, 1, 0))
vehicle.SetChassisBodyFixed(False)

# Add the chassis
chassis = chronovehicle.ChChassis(vehicle)
chassis.SetMass(1500)
chassis.SetInertia(chrono.ChVectorD(100, 100, 100))

# Load chassis mesh
chassis.SetMesh(chrono.ChBodyEasyMesh(chrono.GetChronoDataPath() + 'vehicle/gator/chassis.obj'))

# Add wheels
wheel_radius = 0.3
wheel_width = 0.15

for i in range(4):
    wheel = chronovehicle.ChWheel(vehicle)
    wheel.SetRadius(wheel_radius)
    wheel.SetWidth(wheel_width)
    wheel.SetFrictionCoefficient(1.0)

    # Set tire model (TMEASY)
    tire = chronovehicle.ChTMeasyTire(wheel)

    # Set contact method
    wheel.SetContactMethod(chrono.ChContactMethod.ChContactMethod_NSC)

    # Load wheel mesh
    wheel.SetMesh(chrono.ChBodyEasyMesh(chrono.GetChronoDataPath() + 'vehicle/gator/wheel.obj'))

# Connect wheels to chassis
vehicle.AddWheel(wheel)

# ---------------------------------------------------------------------
#
#  Set up the interactive driver system
#
# ---------------------------------------------------------------------

driver = chronovehicle.ChDriver(vehicle)

# ---------------------------------------------------------------------
#
#  Simulation loop
#
# ---------------------------------------------------------------------

while vis.Run():
    # Get input from the user
    steering = vis.GetSteering()
    throttle = vis.GetThrottle()
    braking = vis.GetBraking()

    # Apply driver inputs
    driver.SetSteering(steering)
    driver.SetThrottle(throttle)
    driver.SetBraking(braking)

    # Advance the simulation
    system.DoStepDynamics(1.0 / 50.0)

    # Render the scene
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono modules.
   - Creates a `ChSystemNSC` for the simulation.
   - Sets gravity and timestepper.
   - Initializes Irrlicht visualization (`chronoirr`).

2. **Terrain:**
   - Creates a `ChRigidTerrain` with a `Patch` for the ground.
   - Sets the patch size and applies a custom texture.

3. **Vehicle:**
   - Creates a `ChVehicle` object.
   - Sets initial position and orientation.
   - Adds a `ChChassis` with mass, inertia, and mesh.
   - Creates four `ChWheel` objects with radius, width, friction, and TMEASY tire model.
   - Sets contact method to NSC.
   - Loads wheel mesh.
   - Connects wheels to the chassis.

4. **Driver:**
   - Creates a `ChDriver` object to handle user input.

5. **Simulation Loop:**
   - Runs the Irrlicht visualization loop.
   - Reads steering, throttle, and braking input from the user.
   - Applies driver inputs to the vehicle.
   - Advances the simulation using `DoStepDynamics`.
   - Renders the scene using Irrlicht.

**Key Points:**

- This script uses the TMEASY tire model, which is a simplified tire model suitable for basic simulations.
- The contact method is set to NSC (Non-Smooth Contact), which is a common choice for vehicle simulations.
- The simulation runs at 50 frames per second, providing real-time visualization.
- The `chronoirr` module handles user input for steering, throttle, and braking.

**To Run:**

1. Make sure you have PyChrono installed.
2. Save the script as a `.py` file (e.g., `gator_simulation.py`).
3. Run the script from the command line: `python gator_simulation.py`.
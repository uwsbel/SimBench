```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronovehicle

# ---------------------------------------------------------------------
#
#  Create the simulation system and add the terrain
#
# ---------------------------------------------------------------------

system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Set the simulation time step
system.SetTimestepperType(chrono.ChTimestepperType.CHRONO_TS_FIXED_STEP)
system.SetStep(1.0 / 50.0)

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("HMMWV Simulation")
vis.Initialize()
vis.AddCamera(chrono.ChVectorD(0, 2, -5))
vis.AddLight(chrono.ChVectorD(5, 5, 5), chrono.ChColor(1, 1, 1))

# Create a rigid terrain
ground = chrono.ChRigidBody()
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
ground.SetCollide(True)
system.Add(ground)

# Create a material for the terrain
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.8)
material.SetRestitution(0.2)

# Create a terrain mesh
terrain = chrono.ChTerrainModel()
terrain.SetTexture(chrono.GetChronoDataPath() + 'terrain/textures/grass.png')
terrain.SetSize(chrono.ChVectorD(100, 100, 1))
terrain.SetHeightMap(chrono.GetChronoDataPath() + 'terrain/heightmaps/heightmap.png')
terrain.SetMaterial(material)

# Add the terrain to the system
ground.AddVisualShape(terrain)

# ---------------------------------------------------------------------
#
#  Create the HMMWV vehicle
#
# ---------------------------------------------------------------------

vehicle = chronovehicle.ChVehicle("HMMWV")
vehicle.SetSystem(system)

# Set the vehicle initial position and orientation
vehicle.SetChassisPosition(chrono.ChVectorD(0, 1, 0))
vehicle.SetChassisRotation(chrono.Q_from_AngAxis(chrono.CH_C_PI / 4, chrono.ChVectorD(0, 1, 0)))

# Set the contact method and tire model
vehicle.SetChassisBody(chrono.ChBodyEasyBox(2.5, 1.5, 0.8, 1000))
vehicle.SetSuspension(chronovehicle.ChSuspensionType.DOUBLE_WISHBONE)
vehicle.SetTireModel(chronovehicle.ChTireModelType.TMEASY)

# Add the vehicle to the system
system.Add(vehicle)

# ---------------------------------------------------------------------
#
#  Create the driver system
#
# ---------------------------------------------------------------------

driver = chronovehicle.ChDriver(vehicle)
driver.SetSteering(0)
driver.SetThrottle(0)
driver.SetBraking(0)

# ---------------------------------------------------------------------
#
#  Simulation loop
#
# ---------------------------------------------------------------------

while vis.Run():
    # Get the input from the keyboard
    keys = vis.GetKeys()

    # Update the driver inputs
    if keys[chrono.irrlicht.KEY_LEFT]:
        driver.SetSteering(-1)
    elif keys[chrono.irrlicht.KEY_RIGHT]:
        driver.SetSteering(1)
    else:
        driver.SetSteering(0)

    if keys[chrono.irrlicht.KEY_UP]:
        driver.SetThrottle(1)
    elif keys[chrono.irrlicht.KEY_DOWN]:
        driver.SetBraking(1)
    else:
        driver.SetThrottle(0)
        driver.SetBraking(0)

    # Update the simulation
    system.DoStepDynamics(1.0 / 50.0)

    # Render the scene
    vis.Render()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono modules.
   - Creates a `ChSystemNSC` object for the simulation.
   - Sets gravity and timestepper for real-time simulation at 50 FPS.
   - Initializes Irrlicht visualization system (`chronoirr`) and sets up camera and light.

2. **Terrain:**
   - Creates a rigid body (`ground`) for the terrain and sets it as fixed.
   - Defines a material with friction and restitution for the terrain.
   - Creates a `ChTerrainModel` with texture and heightmap.
   - Adds the terrain to the `ground` body and to the simulation system.

3. **HMMWV Vehicle:**
   - Creates a `ChVehicle` object named "HMMWV" and adds it to the system.
   - Sets initial position and orientation of the vehicle.
   - Configures suspension type (double wishbone) and tire model (TMEASY).
   - Adds the vehicle to the simulation system.

4. **Driver System:**
   - Creates a `ChDriver` object to control the vehicle.
   - Initializes steering, throttle, and braking to 0.

5. **Simulation Loop:**
   - Enters a loop that runs until the Irrlicht window is closed.
   - Reads keyboard input for steering, throttle, and braking.
   - Updates the driver inputs based on the keyboard input.
   - Performs a single simulation step using `system.DoStepDynamics()`.
   - Renders the scene using `vis.Render()`.

**Notes:**

- This script provides a basic framework. You can further customize the vehicle parameters, add more complex terrain, and implement additional features like sensors and control systems.
- The `chronovehicle` module provides various vehicle components and functionalities. Refer to the PyChrono documentation for more details: [https://pychrono.org/](https://pychrono.org/)
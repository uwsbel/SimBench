```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and set the time step
#

my_system = chrono.ChSystemNSC()
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
my_system.SetTimestepperType(chrono.ChTimestepper.Type_EULER_IMPLICIT_LINEARIZED)
my_system.SetSolverType(chrono.ChSolver.Type_PSOR)
my_system.SetSolverMaxIterations(100)
my_system.SetStep(0.01)

# ---------------------------------------------------------------------
#
# Create the Irrlicht visualization system
#

vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('Mass-Spring-Damper System')
vis.Initialize()
vis.AddCameraLight()
vis.SetCameraPosition(chrono.ChVectorD(2, 2, 2))
vis.SetCameraLookAt(chrono.ChVectorD(0, 0, 0))

# ---------------------------------------------------------------------
#
# Create the ground body
#

ground = chrono.ChBodyEasyBox(10, 0.2, 10, 1000, True, True)
ground.SetPos(chrono.ChVectorD(0, -0.1, 0))
my_system.Add(ground)

# ---------------------------------------------------------------------
#
# Create the mass body
#

mass = chrono.ChBodyEasySphere(0.2, 10)
mass.SetPos(chrono.ChVectorD(0, 1, 0))
my_system.Add(mass)

# ---------------------------------------------------------------------
#
# Create the spring-damper connection
#

spring = chrono.ChLinkTSDA()
spring.Initialize(ground, mass, chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0)))
my_system.Add(spring)

# ---------------------------------------------------------------------
#
# Add visualization shapes
#

ground_shape = chrono.ChVisualShapeBox(10, 0.2, 10)
ground_shape.SetTexture(chronoirr.GetVisualMaterial("concrete.jpg"))
ground.AddVisualShape(ground_shape)

mass_shape = chrono.ChVisualShapeSphere(0.2)
mass_shape.SetTexture(chronoirr.GetVisualMaterial("blue.jpg"))
mass.AddVisualShape(mass_shape)

spring_shape = chrono.ChVisualShapeSpring(0.1, 10, 100, 10)
spring.AddVisualShape(spring_shape)

# ---------------------------------------------------------------------
#
# Simulation loop
#

while vis.Run():
    my_system.DoStepDynamics(0.01)
    vis.Render()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono and Irrlicht modules.
   - Creates a `ChSystemNSC` object for the simulation.
   - Sets gravity, timestepper, solver, and time step.

2. **Visualization:**
   - Creates a `ChVisualSystemIrrlicht` object for visualization.
   - Attaches the simulation system, sets window size and title, and initializes the Irrlicht engine.
   - Adds a camera light and sets initial camera position and look-at point.

3. **Ground Body:**
   - Creates a `ChBodyEasyBox` object for the ground.
   - Sets its position and adds it to the simulation system.

4. **Mass Body:**
   - Creates a `ChBodyEasySphere` object for the mass.
   - Sets its position and adds it to the simulation system.

5. **Spring-Damper Connection:**
   - Creates a `ChLinkTSDA` object for the spring-damper connection.
   - Initializes it with the ground and mass bodies, and a coordinate system defining the connection point.
   - Adds the connection to the simulation system.

6. **Visualization Shapes:**
   - Creates visual shapes for the ground, mass, and spring using `ChVisualShapeBox`, `ChVisualShapeSphere`, and `ChVisualShapeSpring`, respectively.
   - Sets textures for the ground and mass shapes.
   - Adds the visual shapes to their corresponding bodies.

7. **Simulation Loop:**
   - Enters a loop that runs until the Irrlicht window is closed.
   - Performs a simulation step using `DoStepDynamics`.
   - Renders the scene using `vis.Render`.
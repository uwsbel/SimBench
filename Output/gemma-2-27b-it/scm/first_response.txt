```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronovehicle

# 1. Initialize PyChrono environment and core components
chrono.SetChronoDataPath("data/")
my_system = chrono.ChSystemNSC()
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
my_system.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)

# 2. Add physical systems and objects

# a. Vehicle
vehicle = chronovehicle.ChVehicle("HMMWV")
vehicle.SetSystem(my_system)

# Load HMMWV chassis and components (replace with your HMMWV model files)
chassis = chronovehicle.ChBodyEasyBox(
    "chassis", 4.0, 2.0, 1.5, 1000
)  # Placeholder dimensions and mass
vehicle.AddChassis(chassis)

# Add wheels with rigid tire model (replace with your tire model)
wheel_radius = 0.5
wheel_width = 0.2
for i in range(4):
    wheel = chronovehicle.ChWheel(
        "wheel_" + str(i),
        chrono.ChVectorD(0, 0, 0),  # Initial position
        chrono.ChQuaternionD(1, 0, 0, 0),  # Initial orientation
        wheel_radius,
        wheel_width,
        chrono.ChVectorD(0, -1, 0),  # Wheel direction
    )
    vehicle.AddWheel(wheel)

# b. SCM Terrain
terrain = chrono.ChTerrainSCM()
terrain.SetSystem(my_system)
terrain.SetSize(100, 100)  # Terrain dimensions

# Configure soil parameters (adjust as needed)
terrain.SetSoilParameters(
    density=1500,
    friction=0.5,
    cohesion=1000,
    adhesion=0.8,
    restitution=0.2,
)

# Enable moving patch feature
terrain.SetMovingPatch(True)
terrain.SetPatchSize(5, 5)  # Patch dimensions

# 3. Set default parameters

# Vehicle initial position and orientation
vehicle.SetPos(chrono.ChVectorD(0, 1, 0))
vehicle.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))

# Visualization
vis = chronoirr.ChIrrApp(my_system, "HMMWV Simulation", chronoirr.dimension2du(1280, 720))
vis.AddTypicalSky()
vis.AddTypicalLights()
vis.AddCamera(chrono.ChVectorD(0, 5, -10))

# Enable mesh visualization for vehicle components
vis.SetShowMesh(True)
vis.SetShowContacts(True)

# Terrain visualization with sinkage visualization
terrain.SetVisualizationType(chrono.ChTerrainSCM.VisualizationType_HEIGHTMAP)
terrain.SetSinkageVisualization(True)

# 4. Interactive driver system
driver = chronovehicle.ChDriver(vehicle)
vis.SetDriver(driver)

# 5. Simulation loop
while vis.GetDevice().run():
    vis.BeginScene()
    vis.Render()
    my_system.DoStepDynamics(0.02)  # Time step for real-time simulation
    vis.EndScene()

```

**Explanation:**

1. **Initialization:**
   - Sets up the Chrono environment, system, and gravity.
   - Uses the Barzilai-Borwein solver for better performance.

2. **Adding Objects:**
   - Creates a `ChVehicle` object representing the HMMWV.
   - Uses placeholder dimensions and mass for the chassis. Replace with your actual HMMWV model.
   - Adds four wheels with a rigid tire model (replace with your desired tire model).
   - Creates an `ChTerrainSCM` object for the deformable terrain.
   - Sets terrain size and configures soil parameters (adjust these based on your desired terrain properties).
   - Enables the moving patch feature to dynamically follow the vehicle.

3. **Default Parameters:**
   - Sets the initial position and orientation of the vehicle.

4. **Visualization:**
   - Creates an Irrlicht visualization window.
   - Adds sky, lights, and a camera.
   - Enables mesh visualization for vehicle components and contact points.
   - Configures terrain visualization with heightmap and sinkage visualization.

5. **Interactive Driver:**
   - Creates a `ChDriver` object to control the vehicle's steering, throttle, and braking.
   - Links the driver to the Irrlicht visualization for user input.

6. **Simulation Loop:**
   - Runs the simulation in a loop until the user closes the window.
   - Renders the scene using Irrlicht.
   - Performs a dynamics step with a time step of 0.02 seconds for real-time simulation (adjust as needed).



**Important Notes:**

- Replace the placeholder values for chassis dimensions, mass, wheel parameters, and soil properties with your actual values.
- You'll need to provide your own HMMWV 3D model files for visualization.
- Consider using a more advanced tire model for more realistic vehicle behavior.
- Adjust the simulation parameters (time step, solver settings) to achieve the desired performance and accuracy.
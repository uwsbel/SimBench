```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# 1. Initialize PyChrono environment and core components
chrono.SetChronoDataPath("data/")
my_system = chrono.ChSystemNSC()
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# 2. Create the tablecloth mesh
# Define tablecloth dimensions
length = 2.0
width = 1.5

# Create a grid of nodes
num_nodes_x = 20
num_nodes_y = 15
nodes = np.zeros((num_nodes_x * num_nodes_y, 3))
for i in range(num_nodes_x):
    for j in range(num_nodes_y):
        nodes[i * num_nodes_y + j, :] = [i * length / (num_nodes_x - 1), j * width / (num_nodes_y - 1), 0]

# Define elements (quadrilaterals)
elements = []
for i in range(num_nodes_x - 1):
    for j in range(num_nodes_y - 1):
        elements.append([i * num_nodes_y + j, (i + 1) * num_nodes_y + j, (i + 1) * num_nodes_y + j + 1, i * num_nodes_y + j + 1])

# 3. Create the shell object and material
tablecloth = chrono.ChShellMesh()
tablecloth.SetNodes(nodes)
tablecloth.SetElements(elements)

# Isotropic Kirchhoff material properties
material = chrono.ChMaterialShellKirchhoff()
material.SetYoungModulus(1000)  # Adjust as needed
material.SetPoissonRatio(0.3)
material.SetDensity(1000)  # Adjust as needed
tablecloth.SetMaterial(material)

# 4. Add the tablecloth to the system
my_system.Add(tablecloth)

# 5. Set up Irrlicht visualization
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("Tablecloth Folding Simulation")
vis.Initialize()

# 6. Set up PardisoMKL solver
solver = chrono.ChSolverPardisoMKL()
my_system.SetSolver(solver)

# 7. Simulation loop
while vis.Run():
    my_system.DoStepDynamics(0.01)
    vis.Render()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono modules.
   - Sets the data path for Chrono.
   - Creates a `ChSystemNSC` object to manage the simulation.
   - Sets the gravitational acceleration.

2. **Tablecloth Mesh:**
   - Defines tablecloth dimensions (`length`, `width`).
   - Creates a grid of nodes using NumPy arrays.
   - Defines quadrilateral elements connecting the nodes.

3. **Shell Object and Material:**
   - Creates a `ChShellMesh` object to represent the tablecloth.
   - Sets the nodes and elements of the mesh.
   - Defines an `ChMaterialShellKirchhoff` object with isotropic properties (Young's modulus, Poisson ratio, density).
   - Assigns the material to the tablecloth.

4. **Adding to System:**
   - Adds the tablecloth object to the simulation system.

5. **Irrlicht Visualization:**
   - Creates a `ChVisualSystemIrrlicht` object for visualization.
   - Attaches it to the simulation system.
   - Sets window size and title.
   - Initializes the Irrlicht engine.

6. **PardisoMKL Solver:**
   - Creates a `ChSolverPardisoMKL` object, a high-performance solver.
   - Sets it as the solver for the simulation system.

7. **Simulation Loop:**
   - Enters the main simulation loop.
   - Performs a time step using `DoStepDynamics(0.01)`.
   - Renders the scene using `vis.Render()`.

**Remember:**

- Adjust material properties (Young's modulus, density) to achieve desired cloth behavior.
- You can add external forces or constraints to the tablecloth as needed.
- Explore PyChrono documentation for more advanced features and customization options.
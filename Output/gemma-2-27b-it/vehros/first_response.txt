```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import chrono.ros as ros

# 1. Initialize PyChrono environment and core components
chrono.SetChronoDataPath("data/")
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# 2. Add terrain
terrain = chrono.ChBodyEasyBox(100, 100, 1, 1000, True, True)
terrain.SetPos(chrono.ChVectorD(0, -1, 0))
terrain.SetBodyFixed(True)
system.Add(terrain)
terrain.GetMaterialSurfaceNSC().SetFriction(0.8)
terrain.GetMaterialSurfaceNSC().SetRestitution(0.2)

# 3. Add HMMWV vehicle
vehicle = veh.ChVehicle("HMMWV")
vehicle.SetSystem(system)

# Vehicle parameters (adjust as needed)
vehicle.SetContactMethod(veh.ChContactMethod.NSC)
vehicle.SetEngineType(veh.ChEngineType.SIMPLE)
vehicle.SetTireModel(veh.ChTireModel.RIGID)

# Load vehicle chassis and components
vehicle.Initialize(chrono.GetChronoDataPath() + "vehicle/hmmwv/hmmwv.json")

# 4. Initialize driver system
driver = veh.ChDriver(vehicle)

# 5. Integrate ROS
ros_manager = ros.ChROSManager(system)

# Register ROS handlers
ros_manager.RegisterClockSyncHandler()
ros_manager.RegisterDriverInputHandler(driver)
ros_manager.RegisterVehicleStatePublisher(vehicle)

# 6. Simulation loop
time_step = 0.01
simulation_time = 10

while system.GetChTime() < simulation_time:
    # Synchronize with ROS
    ros_manager.Update()

    # Advance simulation
    system.DoStepDynamics(time_step)

    # Update driver system
    driver.Update(time_step)

    # Publish vehicle state to ROS
    ros_manager.PublishVehicleState()

# 7. Cleanup
ros_manager.Shutdown()
system.Clear()
```

**Explanation:**

1. **Initialization:**
   - Sets up the PyChrono environment and creates a physical system.
   - Defines gravity and initializes a terrain with specified friction and restitution.

2. **Vehicle Setup:**
   - Creates an HMMWV vehicle object and sets its parameters (contact method, engine type, tire model).
   - Loads the vehicle chassis and components from a JSON file.

3. **Driver System:**
   - Initializes a driver system for controlling the vehicle.

4. **ROS Integration:**
   - Creates a ROS manager to handle communication.
   - Registers handlers for clock synchronization, driver inputs, and vehicle state publishing.

5. **Simulation Loop:**
   - Runs the simulation for a specified duration.
   - Synchronizes with ROS at each timestep.
   - Advances the simulation, updates the driver system, and publishes vehicle state to ROS.

6. **Cleanup:**
   - Shuts down the ROS manager and clears the simulation system.

**Notes:**

- This script provides a basic framework. You'll need to adjust parameters, add sensors, and implement more complex control logic based on your specific requirements.
- Make sure you have the necessary ROS packages installed and configured.
- The JSON file for the HMMWV vehicle should be located in the specified path.
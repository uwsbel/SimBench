```python
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.irrlicht.irrlicht as irr

# Initialize PyChrono
chrono.init()

# Create Irrlicht engine
engine = irr.IrrlichtEngine()

# Create a RigidTerrain
terrain = chrono.RigidTerrain(
    chrono.Vector3(0, 0, 0),
    chrono.Vector3(10, 10, 10),
    chrono.Vector3(1, 1, 1),
    "terrain.png",
)

# Create ARTcar vehicle
car = chrono.ARTcar(
    chrono.Vector3(5, 5, 0),
    chrono.Quaternion(0, 0, 0, 1),
    chrono.ContactMethod.CONTACT_METHOD_NONE,
    chrono.VisualizationType.VISUALIZATION_TYPE_SIMPLE,
)

# Set default parameters
car.set_mass(1000)
car.set_friction(0.1)
car.set_rolling_resistance(0.01)

# Add the vehicle to the scene
engine.add_object(car)
engine.add_object(terrain)

# Create a driver system
driver = chrono.Driver(car)

# Set up the simulation loop
engine.set_frame_rate(50)

# Simulation loop
while True:
    # Update the driver system
    driver.update()

    # Update the vehicle dynamics
    car.update()

    # Render the scene
    engine.render()

# Clean up
engine.shutdown()
chrono.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, and `pychrono.irrlicht.irrlicht`.
   - Initialize PyChrono using `chrono.init()`.
   - Create an Irrlicht engine using `irr.IrrlichtEngine()`.

2. **Terrain and Vehicle:**
   - Create a `RigidTerrain` object with dimensions, texture, and position.
   - Create an `ARTcar` object with initial position, orientation, contact method, and visualization type.
   - Set default parameters like mass, friction, and rolling resistance.

3. **Driver System:**
   - Create a `Driver` object to control the vehicle's steering, throttle, and braking.

4. **Simulation Loop:**
   - Set the frame rate to 50 frames per second using `engine.set_frame_rate(50)`.
   - Inside the loop:
     - Update the driver system using `driver.update()`.
     - Update the vehicle dynamics using `car.update()`.
     - Render the scene using `engine.render()`.

5. **Cleanup:**
   - Shutdown the Irrlicht engine and PyChrono.

**Notes:**

- You'll need to install the required libraries: `pychrono`, `pychrono.irrlicht`, and `irrlicht`.
- You can customize the vehicle parameters, terrain properties, and driver behavior according to your needs.
- The Irrlicht engine provides various visualization options for rendering the simulation.


This script provides a basic framework for simulating an ARTcar on a rigid terrain using PyChrono and Irrlicht. You can expand upon this by adding more complex physics, interactions, and visualization features.
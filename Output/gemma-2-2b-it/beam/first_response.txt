```python
import pychrono as chrono
import pychrono.irrlicht as irrlicht
import pychrono.irrlicht.irrlicht_utils as irrutils

# Initialize PyChrono
chrono.init()

# Create the Irrlicht engine
engine = irrlicht.IrrlichtEngine()

# Create a new scene
scene = engine.createScene()

# Create a new world
world = chrono.World()
world.set_gravity(chrono.Vector3(0, -9.81, 0))

# Define the beam mesh
beam_mesh = chrono.Mesh()
beam_mesh.set_type(chrono.Mesh.MESH_BEAM)

# Define the beam properties
beam_material = chrono.Material()
beam_material.set_color(chrono.Color(1, 0, 0))
beam_material.set_roughness(0.5)

# Define the beam nodes
beam_nodes = []
for i in range(5):
    node = chrono.Node()
    node.set_position(chrono.Vector3(i * 10, 0, 0))
    beam_nodes.append(node)

# Add the beam mesh and nodes to the world
world.add_mesh(beam_mesh)
world.add_nodes(beam_nodes)

# Set the beam material
beam_mesh.set_material(beam_material)

# Create a beam finite element
beam_fe = chrono.BeamFiniteElement(beam_mesh, beam_nodes)

# Set the beam finite element properties
beam_fe.set_length(10)
beam_fe.set_cross_section(chrono.CrossSection.RECTANGLE)
beam_fe.set_material(beam_material)

# Add the beam finite element to the world
world.add_finite_element(beam_fe)

# Create a visualization
visualizer = irrlicht.IrrlichtVisualizer()
visualizer.add_mesh(beam_mesh)

# Run the simulation loop
while True:
    # Update the simulation
    world.update()

    # Render the scene
    visualizer.render()

    # Wait for a frame
    engine.run()

# Clean up
engine.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono.
   - Create an Irrlicht engine for real-time rendering.

2. **World and Mesh:**
   - Create a world with gravity.
   - Define a beam mesh with a specific type and properties.
   - Create beam nodes with positions.

3. **Beam Finite Element:**
   - Create a beam finite element using the defined mesh and nodes.
   - Set properties like length, cross-section, and material.

4. **Visualization:**
   - Create an Irrlicht visualizer to render the scene.
   - Add the beam mesh to the visualizer.

5. **Simulation Loop:**
   - Update the world and its components.
   - Render the scene using the visualizer.
   - Wait for a frame to update the simulation.

6. **Cleanup:**
   - Shutdown the Irrlicht engine.

**Note:**

- This script provides a basic framework for a beam finite element simulation.
- You can customize the beam properties, mesh, and interactions to suit your specific needs.
- You can explore more advanced features of PyChrono and Irrlicht for more complex simulations.
- Refer to the PyChrono and Irrlicht documentation for detailed information on their functionalities.
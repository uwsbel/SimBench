```python
import pychrono as chrono
import pychrono.visualization as vis
import pychrono.sensor as sensor
import pychrono.sensor.noise as noise
import pychrono.sensor.visualization as vis_sensor

# Initialize PyChrono
chrono.init()

# Create the world
world = chrono.World()

# Load the triangular mesh
mesh_path = "your_mesh.obj"  # Replace with your mesh file path
mesh = chrono.Mesh.load(mesh_path)

# Create a fixed body
body = chrono.Body(mesh)
body.set_mass(1.0)  # Set mass of the body
body.set_inertia(chrono.Inertia(chrono.Vector3(0, 0, 0), 1.0))  # Set inertia
body.set_position(chrono.Vector3(0, 0, 0))  # Set initial position

# Create a camera sensor
camera = sensor.CameraSensor(body)
camera.set_position(chrono.Vector3(0, 0, 10))  # Set initial camera position
camera.set_focal_length(100)  # Set focal length
camera.set_noise_filter(noise.GaussianFilter(0.1))  # Apply noise filter

# Create a sensor manager
sensor_manager = sensor.SensorManager()
sensor_manager.add_sensor(camera)

# Add visualization
vis.add_visualization(vis.Camera(camera))

# Simulate the system
world.add_body(body)
world.add_sensor_manager(sensor_manager)
world.run(1000)  # Run simulation for 1000 steps

# Print camera buffer data
for i in range(1000):
    print(camera.get_buffer())
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono using `chrono.init()`.

2. **World and Mesh:**
   - Create a `World` object to hold the simulation.
   - Load the triangular mesh using `chrono.Mesh.load()`.
   - Create a `Body` object from the loaded mesh.
   - Set the body's mass, inertia, and initial position.

3. **Camera Sensor:**
   - Create a `CameraSensor` object attached to the body.
   - Set the camera's initial position, focal length, and noise filter.

4. **Sensor Manager:**
   - Create a `SensorManager` to manage the camera sensor.
   - Add the camera sensor to the manager.

5. **Visualization:**
   - Add a visualization of the camera using `vis.add_visualization()`.

6. **Simulation:**
   - Add the body and sensor manager to the world.
   - Run the simulation for 1000 steps using `world.run()`.

7. **Output:**
   - Print the camera buffer data at each step of the simulation.

**Notes:**

- Replace `"your_mesh.obj"` with the actual path to your mesh file.
- Adjust the camera position, focal length, and noise filter parameters as needed.
- You can customize the visualization and sensor manager settings to suit your requirements.
- The simulation will print the camera buffer data at each step, which can be used to analyze the camera's image data.
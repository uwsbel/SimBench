```python
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.irrlicht.irrlicht as irr

# Initialize PyChrono
chrono.init()

# Create Irrlicht engine
engine = irr.IrrlichtEngine()

# Create a RigidTerrain
terrain = chrono.RigidTerrain(
    chrono.Vector3(0, 0, 0),  # Position
    chrono.Vector3(10, 10, 10),  # Size
    chrono.Vector3(1, 1, 1),  # Normal
    chrono.Vector3(0, 0, 0),  # Rotation
    chrono.Texture("terrain.png")  # Texture
)

# Create a CityBus vehicle
bus = chrono.Vehicle(
    chrono.Vector3(0, 0, 0),  # Position
    chrono.Vector3(10, 10, 10),  # Size
    chrono.Vector3(1, 1, 1),  # Normal
    chrono.Vector3(0, 0, 0),  # Rotation
    chrono.TireModel("tire.png")  # Tire model
)

# Set default parameters
bus.set_position(chrono.Vector3(0, 0, 0))
bus.set_orientation(chrono.Vector3(0, 0, 0))
bus.set_tire_model("tire.png")

# Set camera position
camera = irr.IrrCamera(engine)
camera.setPosition(chrono.Vector3(0, 0, 10))

# Set simulation parameters
engine.set_frame_rate(50)

# Simulation loop
while True:
    # Update vehicle dynamics
    bus.update()

    # Render the scene
    engine.render()

    # Update the camera position
    camera.update()

    # Wait for the next frame
    engine.wait()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, and `pychrono.irrlicht.irrlicht`.
   - Initialize PyChrono using `chrono.init()`.
   - Create an Irrlicht engine using `irr.IrrlichtEngine()`.

2. **Terrain Creation:**
   - Create a `RigidTerrain` object with a custom texture.
   - Set the terrain's position, size, normal, and rotation.

3. **Vehicle Creation:**
   - Create a `Vehicle` object with its position, size, normal, and rotation.
   - Set the vehicle's tire model.

4. **Default Parameters:**
   - Set the initial position, orientation, and tire model for the vehicle.

5. **Camera Setup:**
   - Create an `IrrCamera` object and set its position.

6. **Simulation Loop:**
   - The `while True` loop runs the simulation.
   - Inside the loop:
     - Update the vehicle's dynamics using `bus.update()`.
     - Render the scene using `engine.render()`.
     - Update the camera position using `camera.update()`.
     - Wait for the next frame using `engine.wait()`.

**Note:**

- You need to replace `"terrain.png"`, `"tire.png"`, and other file paths with the actual paths to your textures.
- You can customize the vehicle's parameters (position, orientation, tire model) as needed.
- The `irrlicht` module provides various functions for rendering and controlling the Irrlicht engine. Refer to the Irrlicht documentation for more details.



This script provides a basic framework for simulating a CityBus vehicle on a rigid terrain using PyChrono and Irrlicht. You can expand upon this by adding more complex physics, interactions, and visualization elements.
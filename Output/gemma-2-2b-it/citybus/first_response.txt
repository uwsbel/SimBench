```python
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.irrlicht.irrlicht as irr

# Initialize PyChrono
chrono.init()

# Create Irrlicht engine
engine = irr.IrrlichtEngine()

# Create a RigidTerrain
terrain = chrono.RigidTerrain(
    chrono.Vector3(0, 0, 0),  # Position
    chrono.Vector3(1, 1, 1),  # Size
    chrono.Vector3(1, 1, 1),  # Scale
    chrono.Texture("terrain.png"),  # Texture
    chrono.Material("terrain_material"),  # Material
)

# Create a CityBus vehicle
bus = chrono.Vehicle(
    chrono.Vector3(0, 0, 0),  # Position
    chrono.Vector3(1, 1, 1),  # Size
    chrono.Vector3(1, 1, 1),  # Scale
    chrono.TireModel("tire_model"),  # Tire model
    chrono.WheelModel("wheel_model"),  # Wheel model
)

# Set initial parameters
bus.set_position(chrono.Vector3(0, 0, 0))
bus.set_orientation(chrono.Quaternion(0, 0, 0, 1))
bus.set_velocity(chrono.Vector3(0, 0, 0))

# Set camera position
camera = irr.IrrCamera(engine)
camera.setPosition(chrono.Vector3(0, 0, 10))

# Set simulation parameters
dt = 0.01  # Time step
fps = 50  # Frames per second

# Simulation loop
while True:
    # Update vehicle dynamics
    bus.update(dt)

    # Render the scene
    engine.run()

    # Update camera position
    camera.setPosition(chrono.Vector3(0, 0, 10))

    # Update Irrlicht engine
    engine.update()

    # Wait for the next frame
    chrono.sleep(1 / fps)
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, and `pychrono.irrlicht.irrlicht`.
   - Initialize PyChrono using `chrono.init()`.
   - Create an Irrlicht engine using `irr.IrrlichtEngine()`.

2. **Creating Objects:**
   - Create a `RigidTerrain` with a custom texture and material.
   - Create a `CityBus` vehicle with a tire model and wheel model.
   - Set initial positions, orientations, velocities, and other parameters for the vehicle and terrain.

3. **Simulation Parameters:**
   - Set the time step (`dt`) and frames per second (`fps`).

4. **Simulation Loop:**
   - Inside the loop, update the vehicle dynamics using `bus.update(dt)`.
   - Render the scene using the Irrlicht engine.
   - Update the camera position.
   - Update the Irrlicht engine.
   - Wait for the next frame using `chrono.sleep(1 / fps)`.

**Note:**

- This script provides a basic framework. You'll need to:
    - Replace placeholders like "terrain.png" with actual file paths.
    - Implement the interactive driver system with controls for steering, throttle, and braking.
    - Add more detailed vehicle dynamics and physics.
    - Customize the Irrlicht engine settings for better visualization.


This script provides a starting point for simulating a CityBus on a rigid terrain using PyChrono and Irrlicht. You can expand on this foundation to create a more complex and realistic simulation.
```python
import pychrono as chrono
import pychrono.irrlicht as irrlicht
import numpy as np

# Initialize PyChrono
chrono.init()

# Create Irrlicht engine
engine = irrlicht.IrrlichtEngine()

# Create a new world
world = chrono.World()

# Create a HMMWV vehicle
vehicle = chrono.Vehicle(world)
vehicle.set_mass(1500)  # kg
vehicle.set_length(4.5)  # m
vehicle.set_width(2.0)  # m
vehicle.set_height(1.8)  # m

# Add wheels
vehicle.add_wheel(chrono.Wheel(vehicle, 0.5, 0.5))
vehicle.add_wheel(chrono.Wheel(vehicle, 0.5, 0.5))
vehicle.add_wheel(chrono.Wheel(vehicle, 0.5, 0.5))
vehicle.add_wheel(chrono.Wheel(vehicle, 0.5, 0.5))

# Add terrain
terrain = chrono.Terrain(world)
terrain.set_height(0.5)  # m
terrain.set_width(10)  # m
terrain.set_length(10)  # m

# Add driver
driver = chrono.Driver(vehicle)

# Add IMU and GPS sensors
imu = chrono.IMU(vehicle)
gps = chrono.GPS(vehicle)

# Set default parameters
vehicle.set_position(chrono.Vector3(0, 0, 0))
vehicle.set_velocity(chrono.Vector3(0, 0, 0))
vehicle.set_orientation(chrono.Quaternion(1, 0, 0, 0))

# Set sensor data
imu.set_acceleration(chrono.Vector3(0, 0, 0))
imu.set_gyro(chrono.Vector3(0, 0, 0))
gps.set_position(chrono.Vector3(0, 0, 0))

# Set simulation parameters
dt = 0.01  # seconds
iterations = 1000

# Simulation loop
for i in range(iterations):
    # Update sensor data
    imu.update(dt)
    gps.update(dt)

    # Update vehicle position and velocity
    vehicle.update(dt)

    # Render the scene
    engine.render()

    # Output vehicle mass
    print("Vehicle mass:", vehicle.get_mass())

# Clean up
engine.shutdown()
chrono.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, and `numpy`.
   - Initialize PyChrono with `chrono.init()`.
   - Create an Irrlicht engine using `irrlicht.IrrlichtEngine()`.

2. **World and Vehicle:**
   - Create a PyChrono world using `chrono.World()`.
   - Create a HMMWV vehicle using `chrono.Vehicle()`.
   - Set vehicle properties like mass, length, width, and height.
   - Add wheels to the vehicle using `vehicle.add_wheel()`.

3. **Terrain:**
   - Create a terrain object using `chrono.Terrain()`.
   - Set terrain properties like height, width, and length.

4. **Sensors:**
   - Create an IMU and GPS sensor objects using `chrono.IMU()` and `chrono.GPS()`.
   - Set initial sensor data.

5. **Driver:**
   - Create a driver object using `chrono.Driver()`.

6. **Simulation Loop:**
   - Set simulation parameters like time step (`dt`) and number of iterations (`iterations`).
   - Inside the loop:
     - Update sensor data using `imu.update()` and `gps.update()`.
     - Update vehicle position and velocity using `vehicle.update()`.
     - Render the scene using `engine.render()`.
     - Print the vehicle's mass.

7. **Cleanup:**
   - Shutdown PyChrono and Irrlicht engine.

**Note:**

- This script provides a basic framework. You can customize it further by adding more complex physics, interactions, and visual elements.
- You'll need to install the necessary libraries (`pychrono`, `irrlicht`) and configure Irrlicht for your system.
- The `imu.update()` and `gps.update()` methods are placeholders for actual sensor data processing. You'll need to implement the logic for reading sensor data and updating the vehicle's state based on that data.
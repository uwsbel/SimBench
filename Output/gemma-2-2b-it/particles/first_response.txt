```python
import pychrono as chrono
import pychrono.irrlicht as irr
import random

# Initialize PyChrono
chrono.init()

# Create the Irrlicht engine
engine = irr.IrrlichtEngine()

# Create a world
world = chrono.World()

# Create a particle emitter
emitter = chrono.ParticleEmitter(world)

# Define particle properties
particle_count = 1000
particle_size = 0.1
particle_color = (1, 0, 0)  # Red

# Generate random shapes, positions, velocities, and orientations
for i in range(particle_count):
    # Randomly generate shape (sphere, cube, etc.)
    shape = random.choice(["sphere", "cube"])

    # Randomly generate position
    position = chrono.Vector3(random.uniform(-10, 10), random.uniform(-10, 10), random.uniform(-10, 10))

    # Randomly generate velocity
    velocity = chrono.Vector3(random.uniform(-10, 10), random.uniform(-10, 10), random.uniform(-10, 10))

    # Randomly generate orientation
    orientation = chrono.Quaternion(random.uniform(0, 2 * chrono.PI), random.uniform(0, 2 * chrono.PI), random.uniform(0, 2 * chrono.PI))

    # Create a particle
    particle = chrono.Particle(world, shape, position, velocity, orientation, particle_size, particle_color)

    # Add the particle to the emitter
    emitter.addParticle(particle)

# Set up gravitational force
gravitational_constant = 6.67430e-11  # Gravitational constant
mass_of_particle = 1.0e-27  # Mass of a particle (in kg)

# Define gravitational force function
def gravitational_force(particle1, particle2):
    distance = chrono.Vector3.distance(particle1.position, particle2.position)
    force = gravitational_constant * mass_of_particle * (particle1.mass / distance ** 2) * (particle2.mass / distance ** 2)
    return force

# Apply gravitational force to particles
for particle1 in emitter.particles:
    for particle2 in emitter.particles:
        if particle1 != particle2:
            force = gravitational_force(particle1, particle2)
            particle1.applyForce(force)
            particle2.applyForce(force)

# Run the simulation
engine.run()

# Render the simulation
engine.render()

# Clean up
engine.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries: `pychrono`, `pychrono.irrlicht`, and `random`.
   - Initializes PyChrono using `chrono.init()`.
   - Creates an Irrlicht engine using `irr.IrrlichtEngine()`.
   - Creates a world using `chrono.World()`.

2. **Particle Emitter:**
   - Creates a particle emitter using `chrono.ParticleEmitter(world)`.
   - Sets the particle count, size, and color.

3. **Particle Generation:**
   - Loops through the desired number of particles.
   - Generates random shapes, positions, velocities, and orientations for each particle.

4. **Gravitational Force:**
   - Defines the gravitational constant and particle mass.
   - Creates a function `gravitational_force` to calculate the force between two particles.

5. **Applying Force:**
   - Iterates through all particles in the emitter.
   - For each pair of particles, calculates the gravitational force using the `gravitational_force` function.
   - Applies the force to each particle using `particle.applyForce()`.

6. **Simulation and Rendering:**
   - Runs the Irrlicht engine using `engine.run()`.
   - Renders the simulation using `engine.render()`.

7. **Cleanup:**
   - Shuts down the Irrlicht engine using `engine.shutdown()`.

**Note:**

- This script provides a basic framework for a gravitational attraction simulation.
- You can customize the particle properties, shapes, and gravitational force calculations to suit your specific needs.
- You can also add more complex features, such as collision detection, particle interactions, and visual effects.
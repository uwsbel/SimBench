```python
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.tmeasy as tmeasy

# Initialize PyChrono
chrono.init()

# Create Irrlicht engine
engine = irr.IrrlichtEngine()

# Create a world
world = chrono.World()

# Create a terrain mesh
terrain_mesh = chrono.Mesh()
terrain_mesh.load("Highway_col.obj")
terrain_mesh.load("Highway_vis.obj")

# Create a vehicle
vehicle = chrono.Vehicle()
vehicle.set_mesh(terrain_mesh)

# Set vehicle parameters
vehicle.set_position(chrono.Vector3(0, 0, 0))
vehicle.set_orientation(chrono.Quaternion(0, 0, 0, 1))
vehicle.set_contact_method(chrono.ContactMethod.STATIC)
vehicle.set_tire_model(tmeasy.TireModel.TMEASY)

# Set vehicle parameters
vehicle.set_mass(1000)
vehicle.set_rolling_resistance(0.01)
vehicle.set_friction(0.1)

# Create a driver system
driver = chrono.Driver()
driver.set_steering_sensitivity(0.1)
driver.set_throttle_sensitivity(0.2)
driver.set_braking_sensitivity(0.1)

# Add the driver system to the vehicle
vehicle.add_system(driver)

# Set the simulation parameters
world.set_time_step(0.01)
world.set_frame_rate(50)

# Run the simulation loop
while True:
    # Update the vehicle dynamics
    vehicle.update()

    # Render the scene
    engine.render()

    # Wait for the next frame
    chrono.sleep(1/50)
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, `pychrono.tmeasy`.
   - Initialize PyChrono: `chrono.init()`.
   - Create an Irrlicht engine: `engine = irr.IrrlichtEngine()`.
   - Create a world: `world = chrono.World()`.

2. **Terrain Creation:**
   - Load the collision and visual meshes for the terrain: `terrain_mesh.load("Highway_col.obj")` and `terrain_mesh.load("Highway_vis.obj")`.

3. **Vehicle Creation:**
   - Create a vehicle object: `vehicle = chrono.Vehicle()`.
   - Set the vehicle's mesh: `vehicle.set_mesh(terrain_mesh)`.
   - Set vehicle parameters:
     - `set_position`: Initial position (0, 0, 0).
     - `set_orientation`: Initial orientation (0, 0, 0, 1).
     - `set_contact_method`: Set to `STATIC` for static contact.
     - `set_tire_model`: Use the `TMEASY` tire model.

4. **Driver System:**
   - Create a driver system: `driver = chrono.Driver()`.
   - Set driver parameters:
     - `set_steering_sensitivity`: Adjust steering sensitivity.
     - `set_throttle_sensitivity`: Adjust throttle sensitivity.
     - `set_braking_sensitivity`: Adjust braking sensitivity.

5. **Simulation Loop:**
   - Set simulation parameters:
     - `set_time_step`: Controls the time step for simulation.
     - `set_frame_rate`: Sets the desired frame rate.
   - Run the simulation loop:
     - `while True`: Continuously update and render the scene.
     - `vehicle.update()`: Update vehicle dynamics based on driver inputs and physics.
     - `engine.render()`: Render the scene using Irrlicht.
     - `chrono.sleep(1/50)`: Pause for 1/50 of a second to ensure real-time rendering.

**Note:**

- This script provides a basic framework. You'll need to customize it further by:
    - Adding more vehicle components (e.g., suspension, engine, etc.).
    - Implementing more complex driver control logic.
    - Adding additional physics interactions (e.g., wind resistance, road friction).
    - Integrating Irrlicht's rendering capabilities for a more visually appealing simulation.
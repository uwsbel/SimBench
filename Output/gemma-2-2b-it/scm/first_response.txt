```python
# Import necessary libraries
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.irrlicht.irrlicht_utils as irr_utils

# Initialize PyChrono
chrono.init()

# Create the Irrlicht engine
engine = irr.IrrlichtEngine()

# Create the scene
scene = engine.createScene()

# Create the SCM terrain
terrain = chrono.SCMTerrain(
    engine,
    "terrain.png",  # Replace with your terrain image
    soil_parameters=[
        {"name": "soil", "density": 1000, "friction": 0.5},
        {"name": "rock", "density": 2000, "friction": 0.2},
    ],
    moving_patch_enabled=True,
)

# Create the HMMWV
vehicle = chrono.Vehicle(
    engine,
    "hmwv.obj",  # Replace with your HMMWV model
    position=[0, 0, 0],  # Initial position
    orientation=[0, 0, 0],  # Initial orientation
    rigid_tire_model=chrono.RigidTireModel(
        engine,
        "tire.obj",  # Replace with your tire model
        tire_radius=0.1,  # Replace with your tire radius
    ),
)

# Add mesh visualization to the vehicle components
vehicle.addMeshVisualization()

# Set up the driver system
driver = chrono.Driver(
    engine,
    vehicle,
    steering_control=chrono.SteeringControl(
        sensitivity=1.0,
        max_steering_angle=1.0,
    ),
    throttle_control=chrono.ThrottleControl(
        max_throttle=1.0,
    ),
    brake_control=chrono.BrakeControl(
        max_brake=1.0,
    ),
)

# Configure the simulation parameters
dt = 0.01  # Time step
max_frames_per_second = 50

# Start the simulation
engine.run()

# Update the scene and render at 50 frames per second
while engine.isRunning():
    # Update vehicle dynamics
    vehicle.update(dt)

    # Update driver system
    driver.update(dt)

    # Render the scene
    scene.render()

    # Update the frame rate
    engine.updateFrameRate(max_frames_per_second)

# Clean up
engine.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono.
   - Create the Irrlicht engine.
   - Create the SCM terrain with custom soil parameters and moving patch feature.
   - Create the HMMWV with a rigid tire model.
   - Add mesh visualization to the vehicle components.

2. **Vehicle and Terrain Setup:**
   - Define the HMMWV's initial position, orientation, and tire model.
   - Set up the SCM terrain with soil parameters and moving patch functionality.

3. **Driver System:**
   - Create a driver system with steering, throttle, and brake controls.

4. **Simulation Parameters:**
   - Set the time step and maximum frame rate.

5. **Simulation Loop:**
   - Update vehicle dynamics and driver system.
   - Render the scene.
   - Update the frame rate.

6. **Cleanup:**
   - Shutdown the Irrlicht engine.

**Notes:**

- Replace placeholders like "terrain.png", "hmwv.obj", "tire.obj" with your actual file paths.
- Adjust the soil parameters and tire model to match your specific HMMWV and terrain.
- You can customize the driver system and add more complex interactions.
- This script provides a basic framework for a HMMWV simulation. You can expand it by adding more physics, sensors, and visual effects.
```python
import pychrono as chrono
import pychrono.irrlicht as irrlicht
import pychrono.irrlicht.irrlicht_camera as camera
import pychrono.irrlicht.irrlicht_light as light
import pychrono.irrlicht.irrlicht_scene as scene

# Initialize PyChrono
chrono.init()

# Create Chrono system
chrono.create_system("chrono_system")

# Create ground body
ground = chrono.create_body("ground", chrono.BodyType.RIGID)
ground.set_mass(1000)
ground.set_inertia(chrono.Vector3(0, 0, 0))
ground.set_position(chrono.Vector3(0, 0, 0))
ground.set_orientation(chrono.Quaternion(0, 0, 0, 1))

# Create Turtlebot body
turtlebot = chrono.create_body("turtlebot", chrono.BodyType.RIGID)
turtlebot.set_mass(10)
turtlebot.set_inertia(chrono.Vector3(0, 0, 0))
turtlebot.set_position(chrono.Vector3(1, 0, 0))
turtlebot.set_orientation(chrono.Quaternion(0, 0, 0, 1))

# Set gravity
chrono.set_gravity(chrono.Vector3(0, -9.81, 0))

# Create Irrlicht environment
irrlicht_env = irrlicht.IrrlichtEngine()
irrlicht_env.create_scene()

# Create camera
camera_obj = camera.IrrlichtCamera()
camera_obj.set_position(chrono.Vector3(0, 0, 5))
camera_obj.set_rotation(chrono.Quaternion(0, 0, 0, 1))

# Create light
light_obj = light.IrrlichtLight()
light_obj.set_position(chrono.Vector3(0, 0, 5))
light_obj.set_color(chrono.Vector3(1, 1, 1))

# Add objects to the scene
scene.add_object(ground)
scene.add_object(turtlebot)
scene.add_object(camera_obj)
scene.add_object(light_obj)

# Simulation loop
while True:
    # Update simulation
    chrono.update()

    # Render scene
    irrlicht_env.render()

    # Control Turtlebot's motors
    # Example: Turn left at time 1 second
    if chrono.time() == 1:
        turtlebot.set_motor_speed(chrono.Vector3(0, 1, 0))
    
    # Update Turtlebot's position and orientation
    # ...

    # Update Irrlicht environment
    # ...

```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono.
   - Create a Chrono system.
   - Create a ground body with a specific mass and position.
   - Create a Turtlebot body with a specific mass and position.
   - Set gravity.

2. **Irrlicht Environment:**
   - Create an Irrlicht environment.
   - Create a camera and set its position and rotation.
   - Create a light and set its position and color.

3. **Simulation Loop:**
   - The loop runs continuously.
   - **Update Simulation:** Call `chrono.update()` to update the simulation.
   - **Render Scene:** Call `irrlicht_env.render()` to render the scene.
   - **Control Turtlebot:** Implement logic to control the Turtlebot's motors (e.g., turning left at a specific time).
   - **Update Turtlebot:** Update the Turtlebot's position and orientation based on the control logic.
   - **Update Irrlicht:** Update the Irrlicht environment based on the simulation changes.

**Key Points:**

- **Time Management:** The simulation loop uses `chrono.time()` to control the simulation's time steps.
- **Motor Control:** The `set_motor_speed()` method is used to control the Turtlebot's motors.
- **Irrlicht Integration:** The Irrlicht environment provides real-time visualization of the simulation.
- **Camera and Lighting:** The Irrlicht camera and light objects are used to control the view and lighting of the simulation.

**Next Steps:**

- Implement the logic for Turtlebot's motor control.
- Update Turtlebot's position and orientation based on the motor control.
- Add more complex interactions and physics to the simulation.
- Customize the Irrlicht environment to create a more visually appealing simulation.
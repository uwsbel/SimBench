{
    "round_name": "first",
    "prediction": "import pychrono as chrono\nimport pychrono.physics as physics\nimport pychrono.ros as ros\nimport pychrono.vehicle as vehicle\nimport pychrono.terrain as terrain\nimport pychrono.driver as driver\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the simulation environment\nworld = chrono.World()\n\n# Define the HMMWV vehicle\nvehicle_model = vehicle.HMMWV(\n    # Contact method: \n    contact_method=chrono.ContactMethod.CONTACT_POINT,\n    # Engine type:\n    engine_type=chrono.EngineType.GASOLINE,\n    # Tire model:\n    tire_model=chrono.TireModel.TIRE_MODEL_HYBRID\n)\n\n# Define the terrain\nterrain_model = terrain.Terrain(\n    # Friction coefficient:\n    friction=0.5,\n    # Restitution coefficient:\n    restitution=0.8\n)\n\n# Create the driver system\ndriver_system = driver.DriverSystem(\n    # Driver control:\n    control_method=driver.ControlMethod.JOYSTICK\n)\n\n# Initialize ROS manager\nros_manager = ros.ROSManager(\n    # ROS node name:\n    node_name=\"HMMWV_Simulation\"\n)\n\n# Register ROS handlers\nros_manager.register_handler(\n    chrono.ClockSynchronizationHandler(\n        # Clock synchronization frequency:\n        frequency=100\n    )\n)\nros_manager.register_handler(\n    chrono.DriverInputHandler(\n        # Driver input source:\n        source=driver_system\n    )\n)\nros_manager.register_handler(\n    chrono.VehicleStateHandler(\n        # Vehicle state data:\n        data=vehicle_model.get_state()\n    )\n)\n\n# Create a simulation loop\ndef simulation_loop():\n    # Initialize simulation time\n    time = 0\n\n    # Main simulation loop\n    while True:\n        # Update vehicle state\n        vehicle_model.update_state(time)\n\n        # Update terrain state\n        terrain_model.update_state(time)\n\n        # Update driver system\n        driver_system.update_state(time)\n\n        # Synchronize and advance systems\n        world.update(time)\n\n        # Publish vehicle state data to ROS\n        ros_manager.publish_data()\n\n        # Increment simulation time\n        time += 1 / 100\n\n# Start the simulation\nsimulation_loop()\n\n# Clean up PyChrono\nchrono.finalize()",
    "reference_code": "import pychrono as ch\nimport pychrono.vehicle as veh\nimport pychrono.ros as chros\n\ndef main():\n    # Create the HMMWV vehicle and set its parameters.\n    hmmwv = veh.HMMWV_Full()\n    hmmwv.SetContactMethod(ch.ChContactMethod_NSC)  # Set the contact method for physics.\n    hmmwv.SetChassisCollisionType(veh.CollisionType_NONE)  # Disable collision for the chassis.\n    hmmwv.SetChassisFixed(False)  # Make the chassis movable.\n    hmmwv.SetInitPosition(ch.ChCoordsysd(ch.ChVector3d(0, 0, 1.6), ch.ChQuaterniond(1, 0, 0, 0)))  # Initialize vehicle position and orientation.\n    hmmwv.SetEngineType(veh.EngineModelType_SHAFTS)  # Use shaft-based engine model.\n    hmmwv.SetTransmissionType(veh.TransmissionModelType_AUTOMATIC_SHAFTS)  # Use automatic transmission with shafts.\n    hmmwv.SetDriveType(veh.DrivelineTypeWV_AWD)  # Set all-wheel drive.\n    hmmwv.SetSteeringType(veh.SteeringTypeWV_PITMAN_ARM)  # Use pitman arm steering.\n    hmmwv.SetTireType(veh.TireModelType_TMEASY)  # Set tire model.\n    hmmwv.SetTireStepSize(1e-3)  # Set the tire simulation step size.\n    hmmwv.Initialize()  # Initialize the vehicle.\n\n    # Create the terrain for the vehicle to interact with.\n    terrain = veh.RigidTerrain(hmmwv.GetSystem())\n    patch_mat = ch.ChContactMaterialNSC()  # Create a contact material for the terrain.\n    patch_mat.SetFriction(0.9)  # Set friction for the terrain.\n    patch_mat.SetRestitution(0.01)  # Set restitution (bounciness) for the terrain.\n    terrain.AddPatch(patch_mat, ch.CSYSNORM, 100.0, 100.0)  # Add a patch to the terrain.\n    terrain.Initialize()  # Initialize the terrain.\n\n    # Create and initialize the driver system.\n    driver = veh.ChDriver(hmmwv.GetVehicle())\n    driver.Initialize()  # Initialize the driver system.\n\n    # Create the ROS manager and register handlers for communication.\n    ros_manager = chros.ChROSPythonManager()\n    ros_manager.RegisterHandler(chros.ChROSClockHandler())  # Register the clock handler to synchronize ROS with the simulation.\n    # Register the driver inputs handler for ROS topic '~/input/driver_inputs'.\n    ros_manager.RegisterHandler(chros.ChROSDriverInputsHandler(25, driver, \"~/input/driver_inputs\"))\n    # Register the vehicle state handler to publish vehicle state to ROS topic '~/output/hmmwv/state'.\n    ros_manager.RegisterHandler(chros.ChROSBodyHandler(25, hmmwv.GetChassisBody(), \"~/output/hmmwv/state\"))\n    ros_manager.Initialize()  # Initialize the ROS manager.\n\n    # Start the simulation loop.\n    time = 0\n    time_step = 1e-3  # Define the simulation time step.\n    time_end = 30  # Set the total duration of the simulation.\n\n    hmmwv.GetVehicle().EnableRealtime(True)  # Enable real-time simulation for the vehicle.\n    while time < time_end:\n        time = hmmwv.GetSystem().GetChTime()  # Update simulation time.\n\n        # Get driver inputs and synchronize the vehicle, terrain, and driver systems.\n        driver_inputs = driver.GetInputs()\n        driver.Synchronize(time)  # Synchronize the driver system.\n        terrain.Synchronize(time)  # Synchronize the terrain.\n        hmmwv.Synchronize(time, driver_inputs, terrain)  # Synchronize the vehicle with inputs and terrain.\n\n        # Advance the simulation for all modules by one timestep.\n        driver.Advance(time_step)\n        terrain.Advance(time_step)\n        hmmwv.Advance(time_step)\n\n        # Update the ROS manager to handle data publishing.\n        if not ros_manager.Update(time, time_step):\n            break  # Exit loop if ROS manager update fails.\n\nif __name__ == \"__main__\":\n    main()\n",
    "api_path": "# PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.",
    "output_system_path": "D:\\SimBench\\output\\gemma-2-2b-it\\vehros",
    "scores": {
        "score_document": "### Evaluation of the PyChrono Simulation Script\n\n1. **Completeness (40 points total)**\n   - **Missing Essential Components**: \n     - The script lacks visualization setup, which is crucial for observing the simulation results. The PyChrono API documentation emphasizes the importance of visualizing simulations using the Irrlicht engine. **(Deduct 15 points)**\n   - **Incorrect Configuration**: \n     - The vehicle model and terrain are created, but there is no indication of how they are added to the world or linked together. This is essential for a functioning simulation. **(Deduct 10 points)**\n   - **Minor Omissions**: \n     - The script does not include any initialization for the visualization system, which is typically expected in a simulation setup. **(Deduct 5 points)**\n\n   **Total Deductions for Completeness: 30 points**\n\n2. **Correctness (30 points total)**\n   - **Incorrect Use of API**: \n     - The `chrono.World()` is not a valid class in the PyChrono API; the correct initialization should be `chrono.ChSystemNSC()` or `chrono.ChSystemSMC()`. This is a significant error that affects the simulation behavior. **(Deduct 15 points)**\n   - **Logical Errors**: \n     - The vehicle model and terrain are not properly integrated into the simulation environment. The script does not show how the vehicle interacts with the terrain, which is critical for a vehicle simulation. **(Deduct 10 points)**\n   - **Minor Inaccuracies**: \n     - The `ros_manager.publish_data()` is called without ensuring that the data is updated or valid, which could lead to unnecessary API calls. **(Deduct 5 points)**\n\n   **Total Deductions for Correctness: 30 points**\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure**: \n     - The code is generally well-structured, but it lacks sufficient comments explaining the purpose of each section and function. This makes it harder for others to understand the code quickly. **(Deduct 5 points)**\n   - **Insufficient Comments**: \n     - While there are some comments, they are not detailed enough to provide clarity on the purpose of each component. **(Deduct 5 points)**\n\n   **Total Deductions for Code Quality: 10 points**\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations**: \n     - The simulation loop increments time by a fixed value but does not account for the actual time step used in the simulation, which could lead to inefficiencies. **(Deduct 5 points)**\n   - **Missing Optimization Opportunities**: \n     - The script does not utilize any optimization techniques for the simulation loop, such as breaking out of the loop when the simulation is complete. **(Deduct 3 points)**\n\n   **Total Deductions for Efficiency: 8 points**\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Lack of Basic Error Handling**: \n     - The script does not include any error handling mechanisms, such as try-except blocks, which are essential for robust simulations. **(Deduct 5 points)**\n\n   **Total Deductions for Error Handling: 5 points**\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Inadequate Visualization Setup**: \n     - The script does not set up any visualization tools, which are essential for observing the simulation. **(Deduct 5 points)**\n\n   **Total Deductions for Visualization: 5 points**\n\n### Final Score Calculation\n- **Initial Score**: 100 points\n- **Total Deductions**: 30 (Completeness) + 30 (Correctness) + 10 (Code Quality) + 8 (Efficiency) + 5 (Error Handling) + 5 (Visualization) = 88 points\n\n### Final Score\n**Score**: [[12]] \n\n### Explanation of Deductions\nThe script has significant issues with completeness and correctness, primarily due to missing visualization setup and incorrect initialization of the simulation environment. Additionally, the code lacks sufficient comments and error handling, which detracts from its quality and robustness. Overall, the script needs substantial improvements to align with best practices in PyChrono simulations.",
        "score_reference": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - **Missing Essential Components (15 points each)**: \n     - The provided code lacks the initialization of the vehicle model with specific parameters such as chassis collision type, engine type, and transmission type. The reference script includes these critical initializations.\n     - The terrain setup in the provided code is overly simplified and does not include the creation of a contact material or proper initialization of the terrain patch, which is present in the reference script.\n     - The driver system is not fully initialized as per the reference script, which includes specific driver configurations.\n     - **Total Deductions**: 15 + 15 + 15 = **45 points** (3 missing components).\n\n   - **Incorrect Configuration (10 points)**: \n     - The contact method and tire model are set incorrectly compared to the reference script, which uses specific types that are more appropriate for the simulation.\n     - **Total Deductions**: 10 points.\n\n   - **Minor Omissions (5 points)**: \n     - The provided code does not include a clear structure for the simulation loop, such as defining the time step and end time.\n     - **Total Deductions**: 5 points.\n\n   **Subtotal for Completeness**: 45 + 10 + 5 = **60 points** (over the limit, capped at 40).\n\n2. **Correctness (30 points total)**\n   - **Incorrect Use of API (15 points)**: \n     - The use of `chrono.ContactMethod.CONTACT_POINT` is incorrect compared to `ch.ChContactMethod_NSC` in the reference script, which could lead to significant differences in simulation behavior.\n     - **Total Deductions**: 15 points.\n\n   - **Logical Errors (10 points)**: \n     - The vehicle state update method is not correctly synchronized with the driver and terrain systems as done in the reference script.\n     - **Total Deductions**: 10 points.\n\n   - **Minor Inaccuracies (5 points)**: \n     - The simulation time increment is not handled properly, leading to potential inaccuracies in the simulation timing.\n     - **Total Deductions**: 5 points.\n\n   **Subtotal for Correctness**: 15 + 10 + 5 = **30 points** (over the limit, capped at 30).\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure (5 to 10 points)**: \n     - The code lacks clear structure and meaningful variable names compared to the reference script, which is well-organized and easy to follow.\n     - **Total Deductions**: 5 points.\n\n   - **Insufficient Comments (5 points)**: \n     - The provided code has minimal comments explaining the purpose of various sections, while the reference script is well-documented.\n     - **Total Deductions**: 5 points.\n\n   **Subtotal for Code Quality**: 5 + 5 = **10 points** (over the limit, capped at 10).\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations (5 points)**: \n     - The simulation loop increments time in a way that may lead to unnecessary calculations, as the reference script uses a more efficient time management approach.\n     - **Total Deductions**: 5 points.\n\n   - **Missing Optimization Opportunities (3 points)**: \n     - The provided code does not utilize real-time simulation settings, which could enhance performance.\n     - **Total Deductions**: 3 points.\n\n   **Subtotal for Efficiency**: 5 + 3 = **8 points** (over the limit, capped at 10).\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Lack of Basic Error Handling (5 points)**: \n     - The provided code does not include any error handling mechanisms, which are present in the reference script.\n     - **Total Deductions**: 5 points.\n\n   **Subtotal for Error Handling and Robustness**: **5 points**.\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Inadequate Visualization Setup (3 to 5 points)**: \n     - The provided code does not implement any visualization tools, while the reference script includes proper visualization setup.\n     - **Total Deductions**: 5 points.\n\n   **Subtotal for Visualization Tools**: **5 points**.\n\n### Final Score Calculation\n- Completeness: 40 points\n- Correctness: 30 points\n- Code Quality: 10 points\n- Efficiency: 10 points\n- Error Handling and Robustness: 5 points\n- Visualization Tools: 5 points\n\n**Total Deductions**: \n- Completeness: 40 points\n- Correctness: 30 points\n- Code Quality: 10 points\n- Efficiency: 8 points\n- Error Handling and Robustness: 5 points\n- Visualization Tools: 5 points\n\n**Total Points Deducted**: 40 + 30 + 10 + 8 + 5 + 5 = **98 points**.\n\n**Final Score**: 100 - 98 = **2 points**.\n\n**Final Score Output**: [[2]]",
        "score_reference_document": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - **Missing Components**: The provided code lacks several essential components present in the reference script:\n     - The vehicle initialization does not include setting the chassis collision type, fixed state, initial position, or other vehicle-specific parameters like engine and transmission types. **(15 points deduction)**\n     - The terrain setup is incomplete as it does not utilize a contact material or initialize the terrain properly. **(15 points deduction)**\n     - The driver system lacks initialization and specific configurations. **(15 points deduction)**\n   - **Total Deductions**: 45 points (15 for vehicle, 15 for terrain, 15 for driver).\n\n2. **Correctness (30 points total)**\n   - **Incorrect API Usage**: The use of `chrono.ContactMethod.CONTACT_POINT` is not appropriate for vehicle simulations, which typically require a more complex contact method like `chrono.ChContactMethod_NSC`. **(15 points deduction)**\n   - **Logical Errors**: The simulation loop does not properly synchronize the vehicle, terrain, and driver systems as seen in the reference script. The update calls are not structured correctly. **(10 points deduction)**\n   - **Total Deductions**: 25 points (15 for incorrect API usage, 10 for logical errors).\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure**: The code lacks meaningful variable names and proper structure, making it less readable compared to the reference script. **(5 points deduction)**\n   - **Comments**: While there are some comments, they do not adequately explain the purpose of each section or the parameters being set. **(5 points deduction)**\n   - **Total Deductions**: 10 points (5 for readability, 5 for insufficient comments).\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations**: The simulation loop increments time in a way that could lead to inefficiencies. The reference script uses a fixed time step and updates based on the system's time. **(5 points deduction)**\n   - **Missing Optimizations**: The provided code does not utilize the `DoStepDynamics` method, which is essential for advancing the simulation efficiently. **(3 points deduction)**\n   - **Total Deductions**: 8 points (5 for unnecessary calculations, 3 for missing optimizations).\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Lack of Error Handling**: The provided code does not include any error handling or checks for the success of operations, which is present in the reference script. **(5 points deduction)**\n   - **Total Deductions**: 5 points.\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Visualization Setup**: The provided code does not include any visualization setup, which is crucial for understanding the simulation results. The reference script includes a complete visualization setup. **(5 points deduction)**\n   - **Total Deductions**: 5 points.\n\n### Summary of Deductions\n- Completeness: 45 points\n- Correctness: 25 points\n- Code Quality: 10 points\n- Efficiency: 8 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 5 points\n\n### Final Score Calculation\nStarting from a perfect score of 100 points:\n- Total Deductions: 98 points\n- Final Score: 100 - 98 = 2\n\n### Final Score Output\n[[2]]"
    },
    "prompts": {
        "prompt_document": "\n        You are a PyChrono expert tasked with evaluating a simulation script by comparing it against the PyChrono API documentation. While the API documentation provides guidelines, it may not cover all aspects due to length constraints. Therefore, your evaluation should also be based on your knowledge of best practices in Python coding and general simulation principles.\n\n        Here is the PyChrono code you need to evaluate:\n        [The Start of Assistant’s Answer]\n        import pychrono as chrono\nimport pychrono.physics as physics\nimport pychrono.ros as ros\nimport pychrono.vehicle as vehicle\nimport pychrono.terrain as terrain\nimport pychrono.driver as driver\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the simulation environment\nworld = chrono.World()\n\n# Define the HMMWV vehicle\nvehicle_model = vehicle.HMMWV(\n    # Contact method: \n    contact_method=chrono.ContactMethod.CONTACT_POINT,\n    # Engine type:\n    engine_type=chrono.EngineType.GASOLINE,\n    # Tire model:\n    tire_model=chrono.TireModel.TIRE_MODEL_HYBRID\n)\n\n# Define the terrain\nterrain_model = terrain.Terrain(\n    # Friction coefficient:\n    friction=0.5,\n    # Restitution coefficient:\n    restitution=0.8\n)\n\n# Create the driver system\ndriver_system = driver.DriverSystem(\n    # Driver control:\n    control_method=driver.ControlMethod.JOYSTICK\n)\n\n# Initialize ROS manager\nros_manager = ros.ROSManager(\n    # ROS node name:\n    node_name=\"HMMWV_Simulation\"\n)\n\n# Register ROS handlers\nros_manager.register_handler(\n    chrono.ClockSynchronizationHandler(\n        # Clock synchronization frequency:\n        frequency=100\n    )\n)\nros_manager.register_handler(\n    chrono.DriverInputHandler(\n        # Driver input source:\n        source=driver_system\n    )\n)\nros_manager.register_handler(\n    chrono.VehicleStateHandler(\n        # Vehicle state data:\n        data=vehicle_model.get_state()\n    )\n)\n\n# Create a simulation loop\ndef simulation_loop():\n    # Initialize simulation time\n    time = 0\n\n    # Main simulation loop\n    while True:\n        # Update vehicle state\n        vehicle_model.update_state(time)\n\n        # Update terrain state\n        terrain_model.update_state(time)\n\n        # Update driver system\n        driver_system.update_state(time)\n\n        # Synchronize and advance systems\n        world.update(time)\n\n        # Publish vehicle state data to ROS\n        ros_manager.publish_data()\n\n        # Increment simulation time\n        time += 1 / 100\n\n# Start the simulation\nsimulation_loop()\n\n# Clean up PyChrono\nchrono.finalize()\n        [The End of Assistant’s Answer]\n\n        Use the following evaluation criteria and point deduction guidelines:\n\n        1. **Completeness (40 points total)**\n           - Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) as outlined in the PyChrono API documentation or generally expected in a simulation setup.\n           - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured according to the API documentation or general simulation best practices.\n           - Deduct **5 points** for minor omissions or slight deviations from best practices mentioned in the API documentation or common Python coding practices.\n\n        2. **Correctness (30 points total)**\n           - Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior, as indicated by the documentation or your expert knowledge.\n           - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, based on the API documentation or standard simulation principles.\n           - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the API guidelines or standard coding practices.\n\n        3. **Code Quality (10 points total)**\n           - Evaluate the readability, structure, and documentation of the code. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting, based on your Python expertise.\n           - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, whether outlined in the API documentation or based on general coding standards.\n\n        4. **Efficiency (10 points total)**\n           - Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that could be optimized according to the API documentation or your understanding of efficient coding practices.\n           - Deduct **3 points** for missing obvious optimization opportunities as suggested by the API documentation or standard programming practices.\n\n        5. **Error Handling and Robustness (5 points total)**\n           - Deduct **5 points** for lack of basic error handling or failure to account for common issues, as recommended by the API documentation or best practices in Python coding.\n           - Deduct **3 points** for inadequate handling of edge cases, considering both the API documentation and typical robustness requirements in coding.\n\n        6. **Use of Visualization Tools (5 points total)**\n           - Deduct **3 to 5 points** for incorrect or inadequate visualization setup according to the API documentation or general expectations for visualizing simulations.\n           - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, based on both the API documentation and your understanding of effective simulation visualization.\n\n        Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n        Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n        After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n        Provide the evaluated score and a brief explanation of the deductions below:\n        ",
        "prompt_reference": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    import pychrono as chrono\nimport pychrono.physics as physics\nimport pychrono.ros as ros\nimport pychrono.vehicle as vehicle\nimport pychrono.terrain as terrain\nimport pychrono.driver as driver\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the simulation environment\nworld = chrono.World()\n\n# Define the HMMWV vehicle\nvehicle_model = vehicle.HMMWV(\n    # Contact method: \n    contact_method=chrono.ContactMethod.CONTACT_POINT,\n    # Engine type:\n    engine_type=chrono.EngineType.GASOLINE,\n    # Tire model:\n    tire_model=chrono.TireModel.TIRE_MODEL_HYBRID\n)\n\n# Define the terrain\nterrain_model = terrain.Terrain(\n    # Friction coefficient:\n    friction=0.5,\n    # Restitution coefficient:\n    restitution=0.8\n)\n\n# Create the driver system\ndriver_system = driver.DriverSystem(\n    # Driver control:\n    control_method=driver.ControlMethod.JOYSTICK\n)\n\n# Initialize ROS manager\nros_manager = ros.ROSManager(\n    # ROS node name:\n    node_name=\"HMMWV_Simulation\"\n)\n\n# Register ROS handlers\nros_manager.register_handler(\n    chrono.ClockSynchronizationHandler(\n        # Clock synchronization frequency:\n        frequency=100\n    )\n)\nros_manager.register_handler(\n    chrono.DriverInputHandler(\n        # Driver input source:\n        source=driver_system\n    )\n)\nros_manager.register_handler(\n    chrono.VehicleStateHandler(\n        # Vehicle state data:\n        data=vehicle_model.get_state()\n    )\n)\n\n# Create a simulation loop\ndef simulation_loop():\n    # Initialize simulation time\n    time = 0\n\n    # Main simulation loop\n    while True:\n        # Update vehicle state\n        vehicle_model.update_state(time)\n\n        # Update terrain state\n        terrain_model.update_state(time)\n\n        # Update driver system\n        driver_system.update_state(time)\n\n        # Synchronize and advance systems\n        world.update(time)\n\n        # Publish vehicle state data to ROS\n        ros_manager.publish_data()\n\n        # Increment simulation time\n        time += 1 / 100\n\n# Start the simulation\nsimulation_loop()\n\n# Clean up PyChrono\nchrono.finalize()\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    import pychrono as ch\nimport pychrono.vehicle as veh\nimport pychrono.ros as chros\n\ndef main():\n    # Create the HMMWV vehicle and set its parameters.\n    hmmwv = veh.HMMWV_Full()\n    hmmwv.SetContactMethod(ch.ChContactMethod_NSC)  # Set the contact method for physics.\n    hmmwv.SetChassisCollisionType(veh.CollisionType_NONE)  # Disable collision for the chassis.\n    hmmwv.SetChassisFixed(False)  # Make the chassis movable.\n    hmmwv.SetInitPosition(ch.ChCoordsysd(ch.ChVector3d(0, 0, 1.6), ch.ChQuaterniond(1, 0, 0, 0)))  # Initialize vehicle position and orientation.\n    hmmwv.SetEngineType(veh.EngineModelType_SHAFTS)  # Use shaft-based engine model.\n    hmmwv.SetTransmissionType(veh.TransmissionModelType_AUTOMATIC_SHAFTS)  # Use automatic transmission with shafts.\n    hmmwv.SetDriveType(veh.DrivelineTypeWV_AWD)  # Set all-wheel drive.\n    hmmwv.SetSteeringType(veh.SteeringTypeWV_PITMAN_ARM)  # Use pitman arm steering.\n    hmmwv.SetTireType(veh.TireModelType_TMEASY)  # Set tire model.\n    hmmwv.SetTireStepSize(1e-3)  # Set the tire simulation step size.\n    hmmwv.Initialize()  # Initialize the vehicle.\n\n    # Create the terrain for the vehicle to interact with.\n    terrain = veh.RigidTerrain(hmmwv.GetSystem())\n    patch_mat = ch.ChContactMaterialNSC()  # Create a contact material for the terrain.\n    patch_mat.SetFriction(0.9)  # Set friction for the terrain.\n    patch_mat.SetRestitution(0.01)  # Set restitution (bounciness) for the terrain.\n    terrain.AddPatch(patch_mat, ch.CSYSNORM, 100.0, 100.0)  # Add a patch to the terrain.\n    terrain.Initialize()  # Initialize the terrain.\n\n    # Create and initialize the driver system.\n    driver = veh.ChDriver(hmmwv.GetVehicle())\n    driver.Initialize()  # Initialize the driver system.\n\n    # Create the ROS manager and register handlers for communication.\n    ros_manager = chros.ChROSPythonManager()\n    ros_manager.RegisterHandler(chros.ChROSClockHandler())  # Register the clock handler to synchronize ROS with the simulation.\n    # Register the driver inputs handler for ROS topic '~/input/driver_inputs'.\n    ros_manager.RegisterHandler(chros.ChROSDriverInputsHandler(25, driver, \"~/input/driver_inputs\"))\n    # Register the vehicle state handler to publish vehicle state to ROS topic '~/output/hmmwv/state'.\n    ros_manager.RegisterHandler(chros.ChROSBodyHandler(25, hmmwv.GetChassisBody(), \"~/output/hmmwv/state\"))\n    ros_manager.Initialize()  # Initialize the ROS manager.\n\n    # Start the simulation loop.\n    time = 0\n    time_step = 1e-3  # Define the simulation time step.\n    time_end = 30  # Set the total duration of the simulation.\n\n    hmmwv.GetVehicle().EnableRealtime(True)  # Enable real-time simulation for the vehicle.\n    while time < time_end:\n        time = hmmwv.GetSystem().GetChTime()  # Update simulation time.\n\n        # Get driver inputs and synchronize the vehicle, terrain, and driver systems.\n        driver_inputs = driver.GetInputs()\n        driver.Synchronize(time)  # Synchronize the driver system.\n        terrain.Synchronize(time)  # Synchronize the terrain.\n        hmmwv.Synchronize(time, driver_inputs, terrain)  # Synchronize the vehicle with inputs and terrain.\n\n        # Advance the simulation for all modules by one timestep.\n        driver.Advance(time_step)\n        terrain.Advance(time_step)\n        hmmwv.Advance(time_step)\n\n        # Update the ROS manager to handle data publishing.\n        if not ros_manager.Update(time, time_step):\n            break  # Exit loop if ROS manager update fails.\n\nif __name__ == \"__main__\":\n    main()\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    ",
        "prompt_reference_document": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts. Your evaluation should consider both the accuracy of the script compared to the reference and adherence to best practices as outlined in the PyChrono API documentation.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    import pychrono as chrono\nimport pychrono.physics as physics\nimport pychrono.ros as ros\nimport pychrono.vehicle as vehicle\nimport pychrono.terrain as terrain\nimport pychrono.driver as driver\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the simulation environment\nworld = chrono.World()\n\n# Define the HMMWV vehicle\nvehicle_model = vehicle.HMMWV(\n    # Contact method: \n    contact_method=chrono.ContactMethod.CONTACT_POINT,\n    # Engine type:\n    engine_type=chrono.EngineType.GASOLINE,\n    # Tire model:\n    tire_model=chrono.TireModel.TIRE_MODEL_HYBRID\n)\n\n# Define the terrain\nterrain_model = terrain.Terrain(\n    # Friction coefficient:\n    friction=0.5,\n    # Restitution coefficient:\n    restitution=0.8\n)\n\n# Create the driver system\ndriver_system = driver.DriverSystem(\n    # Driver control:\n    control_method=driver.ControlMethod.JOYSTICK\n)\n\n# Initialize ROS manager\nros_manager = ros.ROSManager(\n    # ROS node name:\n    node_name=\"HMMWV_Simulation\"\n)\n\n# Register ROS handlers\nros_manager.register_handler(\n    chrono.ClockSynchronizationHandler(\n        # Clock synchronization frequency:\n        frequency=100\n    )\n)\nros_manager.register_handler(\n    chrono.DriverInputHandler(\n        # Driver input source:\n        source=driver_system\n    )\n)\nros_manager.register_handler(\n    chrono.VehicleStateHandler(\n        # Vehicle state data:\n        data=vehicle_model.get_state()\n    )\n)\n\n# Create a simulation loop\ndef simulation_loop():\n    # Initialize simulation time\n    time = 0\n\n    # Main simulation loop\n    while True:\n        # Update vehicle state\n        vehicle_model.update_state(time)\n\n        # Update terrain state\n        terrain_model.update_state(time)\n\n        # Update driver system\n        driver_system.update_state(time)\n\n        # Synchronize and advance systems\n        world.update(time)\n\n        # Publish vehicle state data to ROS\n        ros_manager.publish_data()\n\n        # Increment simulation time\n        time += 1 / 100\n\n# Start the simulation\nsimulation_loop()\n\n# Clean up PyChrono\nchrono.finalize()\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    import pychrono as ch\nimport pychrono.vehicle as veh\nimport pychrono.ros as chros\n\ndef main():\n    # Create the HMMWV vehicle and set its parameters.\n    hmmwv = veh.HMMWV_Full()\n    hmmwv.SetContactMethod(ch.ChContactMethod_NSC)  # Set the contact method for physics.\n    hmmwv.SetChassisCollisionType(veh.CollisionType_NONE)  # Disable collision for the chassis.\n    hmmwv.SetChassisFixed(False)  # Make the chassis movable.\n    hmmwv.SetInitPosition(ch.ChCoordsysd(ch.ChVector3d(0, 0, 1.6), ch.ChQuaterniond(1, 0, 0, 0)))  # Initialize vehicle position and orientation.\n    hmmwv.SetEngineType(veh.EngineModelType_SHAFTS)  # Use shaft-based engine model.\n    hmmwv.SetTransmissionType(veh.TransmissionModelType_AUTOMATIC_SHAFTS)  # Use automatic transmission with shafts.\n    hmmwv.SetDriveType(veh.DrivelineTypeWV_AWD)  # Set all-wheel drive.\n    hmmwv.SetSteeringType(veh.SteeringTypeWV_PITMAN_ARM)  # Use pitman arm steering.\n    hmmwv.SetTireType(veh.TireModelType_TMEASY)  # Set tire model.\n    hmmwv.SetTireStepSize(1e-3)  # Set the tire simulation step size.\n    hmmwv.Initialize()  # Initialize the vehicle.\n\n    # Create the terrain for the vehicle to interact with.\n    terrain = veh.RigidTerrain(hmmwv.GetSystem())\n    patch_mat = ch.ChContactMaterialNSC()  # Create a contact material for the terrain.\n    patch_mat.SetFriction(0.9)  # Set friction for the terrain.\n    patch_mat.SetRestitution(0.01)  # Set restitution (bounciness) for the terrain.\n    terrain.AddPatch(patch_mat, ch.CSYSNORM, 100.0, 100.0)  # Add a patch to the terrain.\n    terrain.Initialize()  # Initialize the terrain.\n\n    # Create and initialize the driver system.\n    driver = veh.ChDriver(hmmwv.GetVehicle())\n    driver.Initialize()  # Initialize the driver system.\n\n    # Create the ROS manager and register handlers for communication.\n    ros_manager = chros.ChROSPythonManager()\n    ros_manager.RegisterHandler(chros.ChROSClockHandler())  # Register the clock handler to synchronize ROS with the simulation.\n    # Register the driver inputs handler for ROS topic '~/input/driver_inputs'.\n    ros_manager.RegisterHandler(chros.ChROSDriverInputsHandler(25, driver, \"~/input/driver_inputs\"))\n    # Register the vehicle state handler to publish vehicle state to ROS topic '~/output/hmmwv/state'.\n    ros_manager.RegisterHandler(chros.ChROSBodyHandler(25, hmmwv.GetChassisBody(), \"~/output/hmmwv/state\"))\n    ros_manager.Initialize()  # Initialize the ROS manager.\n\n    # Start the simulation loop.\n    time = 0\n    time_step = 1e-3  # Define the simulation time step.\n    time_end = 30  # Set the total duration of the simulation.\n\n    hmmwv.GetVehicle().EnableRealtime(True)  # Enable real-time simulation for the vehicle.\n    while time < time_end:\n        time = hmmwv.GetSystem().GetChTime()  # Update simulation time.\n\n        # Get driver inputs and synchronize the vehicle, terrain, and driver systems.\n        driver_inputs = driver.GetInputs()\n        driver.Synchronize(time)  # Synchronize the driver system.\n        terrain.Synchronize(time)  # Synchronize the terrain.\n        hmmwv.Synchronize(time, driver_inputs, terrain)  # Synchronize the vehicle with inputs and terrain.\n\n        # Advance the simulation for all modules by one timestep.\n        driver.Advance(time_step)\n        terrain.Advance(time_step)\n        hmmwv.Advance(time_step)\n\n        # Update the ROS manager to handle data publishing.\n        if not ros_manager.Update(time, time_step):\n            break  # Exit loop if ROS manager update fails.\n\nif __name__ == \"__main__\":\n    main()\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    "
    }
}
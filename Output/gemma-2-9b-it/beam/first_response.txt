```python
import pychrono as chrono
import pychrono.irrlicht as vis

# Initialize Chrono
chrono.SetChronoDataPath("path/to/chrono/data")  # Replace with your Chrono data path
system = chrono.ChSystemNSC()

# Create a ground plane
ground = chrono.ChBodyEasyBox(10, 10, 0.1)
ground.SetPos(chrono.ChVectorD(0, 0, -0.1))
ground.SetBodyFixed(True)
system.Add(ground)

# Define beam properties
beam_material = chrono.ChMaterialSurfaceNSC()
beam_material.SetFriction(0.5, 0.5)
beam_material.SetRestitution(0.0)
beam_material.SetYoungModulus(2e11)
beam_material.SetDensity(7850)

# Create nodes
node1 = chrono.ChNodeBodyEasyPos(system)
node1.SetName("Node1")
node1.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(node1)

node2 = chrono.ChNodeBodyEasyPos(system)
node2.SetName("Node2")
node2.SetPos(chrono.ChVectorD(1, 0, 0))
system.Add(node2)

# Create beam element
beam = chrono.ChBeamElement(beam_material, 0.1, 0.01)  # Length, cross-section
beam.SetNodes(node1, node2)
system.Add(beam)

# Visualization setup
vis.Init()
vis.Add(ground)
vis.Add(node1)
vis.Add(node2)
vis.Add(beam)
vis.Run()

# Simulation loop
while True:
    system.DoStepDynamics(0.01)
    vis.Render()



```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries: `pychrono` for physics and `pychrono.irrlicht` for visualization.
   - Sets the Chrono data path (replace with your actual path).
   - Creates a `ChSystemNSC` object, which represents the simulation environment.

2. **Ground Plane:**
   - Creates a rectangular ground plane using `ChBodyEasyBox`.
   - Sets its position and makes it fixed (not movable).
   - Adds the ground to the simulation system.

3. **Beam Properties:**
   - Defines a `ChMaterialSurfaceNSC` object to specify the material properties of the beam:
     - Friction coefficient
     - Restitution coefficient (bounciness)
     - Young's modulus (stiffness)
     - Density

4. **Nodes:**
   - Creates two `ChNodeBodyEasyPos` objects, representing the nodes where the beam will be connected.
   - Sets their names and positions.
   - Adds the nodes to the simulation system.

5. **Beam Element:**
   - Creates a `ChBeamElement` object, specifying the material, length, and cross-section of the beam.
   - Connects the beam to the two nodes created earlier.
   - Adds the beam to the simulation system.

6. **Visualization:**
   - Initializes the Irrlicht visualization engine using `vis.Init()`.
   - Adds the ground, nodes, and beam to the visualization scene.
   - Starts the rendering loop with `vis.Run()`.

7. **Simulation Loop:**
   - Enters a `while True` loop to continuously simulate the system.
   - Calls `system.DoStepDynamics(0.01)` to advance the simulation by 0.01 seconds.
   - Renders the visualization using `vis.Render()`.



**To run this script:**

- Make sure you have PyChrono and Irrlicht installed.
- Replace `"path/to/chrono/data"` with the actual path to your Chrono data directory.
- Save the script as a `.py` file (e.g., `beam_simulation.py`).
- Run the script from your terminal: `python beam_simulation.py`
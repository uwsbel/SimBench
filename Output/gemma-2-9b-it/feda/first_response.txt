```python
import pychrono as chrono
import pychrono.irrlicht as vis
import numpy as np

# Initialize Chrono environment
chrono.SetChronoDataPath("path/to/chrono/data")  # Replace with your Chrono data path
system = chrono.ChSystemNSC()

# Create RigidTerrain with custom texture
terrain = chrono.ChBodyEasyBox(10, 10, 0.5)
terrain.SetPos(chrono.ChVectorD(0, 0, 0))
terrain.SetBodyFixed(True)
terrain.SetMaterialSurface(chrono.ChMaterialSurface(chrono.ChMaterialSurface.Type.GLOSSY))
terrain.SetTexture("path/to/terrain/texture.png")  # Replace with your texture path
system.Add(terrain)

# Create FEDA vehicle
vehicle = chrono.ChBodyEasyBox(1, 1, 0.5)
vehicle.SetPos(chrono.ChVectorD(0, 0, 0.5))
vehicle.SetRot(chrono.Q_from_Euler(0, 0, 0))
vehicle.SetBodyFixed(False)
system.Add(vehicle)

# Add wheels to the vehicle
wheel_radius = 0.1
wheel_width = 0.1
for i in range(4):
    wheel = chrono.ChWheelEasy(wheel_radius, wheel_width)
    wheel.SetPos(chrono.ChVectorD(0, 0, 0))
    wheel.SetBody(vehicle)
    system.Add(wheel)

# Set contact method and tire model
vehicle.SetCollide(True)
vehicle.SetContactMethod(chrono.ChBody.ContactMethod.CONTACT_METHOD_SPHERICAL)
vehicle.SetTireModel(chrono.ChTireModel.Type.TIRE_MODEL_PASTERNAK)

# Camera setup
vis_app = vis.ChIrrApp(system, 'FEDA Vehicle Simulation', windowSize=(800, 600))
camera = vis_app.GetActiveCamera()
camera.SetPos(chrono.ChVectorD(5, 5, 2))
camera.SetTarget(chrono.ChVectorD(0, 0, 0))

# Interactive driver system
driver = vis.ChIrrControlCamera(vis_app.GetDevice(), camera, True)
driver.SetTarget(vehicle)

# Simulation loop
dt = 1.0 / 50.0
while vis_app.Run():
    system.DoStepDynamics(dt)
    vis_app.Render()


```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries: `pychrono` for physics simulation, `pychrono.irrlicht` for visualization, and `numpy` for numerical operations.
   - Initializes the Chrono environment using `chrono.ChSystemNSC()`.
   - Sets the Chrono data path to your local directory containing Chrono data files.

2. **RigidTerrain:**
   - Creates a `chrono.ChBodyEasyBox` object representing the terrain.
   - Sets its position, size, and makes it fixed in place.
   - Applies a glossy material surface and sets a custom texture using `SetTexture()`.

3. **FEDA Vehicle:**
   - Creates a `chrono.ChBodyEasyBox` object for the vehicle body.
   - Sets its initial position and orientation.
   - Makes it a movable body.

4. **Wheels:**
   - Iterates four times to create four wheels using `chrono.ChWheelEasy()`.
   - Sets wheel parameters like radius and width.
   - Attaches each wheel to the vehicle body.

5. **Contact and Tire Model:**
   - Enables collision detection for the vehicle using `SetCollide(True)`.
   - Sets the contact method to spherical for simplified wheel-ground interaction.
   - Applies the Pasternak tire model for realistic tire behavior.

6. **Camera Setup:**
   - Initializes the Irrlicht visualization application using `vis.ChIrrApp()`.
   - Gets the active camera and sets its position and target to follow the vehicle.

7. **Interactive Driver:**
   - Creates an interactive driver system using `vis.ChIrrControlCamera()`.
   - Sets the camera target to the vehicle, allowing user control.

8. **Simulation Loop:**
   - Sets the time step for the simulation to 1/50 seconds.
   - Enters a loop that runs until the user closes the visualization window.
   - Updates the physics simulation using `system.DoStepDynamics(dt)`.
   - Renders the scene using `vis_app.Render()`.



**Remember:**

- Replace `"path/to/chrono/data"` and `"path/to/terrain/texture.png"` with the actual paths to your Chrono data and texture files.
- You might need to adjust the vehicle parameters, camera position, and other settings to achieve the desired simulation behavior.
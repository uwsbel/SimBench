```python
import pychrono as chrono
import pychrono.irrlicht as vis
import numpy as np

# Initialize Chrono environment
chrono.SetChronoDataPath("path/to/chrono/data")  # Replace with your Chrono data path
system = chrono.ChSystemNSC()

# Create Irrlicht visualization
vis_app = vis.ChIrrApp(system, 'HMMWV Simulation')
vis_app.AddTypicalSky()
vis_app.AddTypicalLogo(chrono.ChColor(1,0.8,0.6))
vis_app.SetWindowSize(1280, 720)
vis_app.SetCamera(vis.IrrlichtCamera(vis_app.GetSceneManager(), chrono.ChVectorD(10, 10, 10), chrono.ChVectorD(0, 0, 0)))
vis_app.SetCameraDistance(20)

# Create RigidTerrain
terrain = chrono.ChBodyEasyBox(100, 100, 1, chrono.ChMaterialSurface(0.5, 0.5, 0.5))
terrain.SetPos(chrono.ChVectorD(0, 0, 0))
terrain.SetBodyFixed(True)
system.Add(terrain)

# Create HMMWV
# (This part requires more detailed specifications about the HMMWV's geometry and mass distribution)
# You'll need to define individual bodies for the chassis, wheels, axles, etc.
# Use chrono.ChBodyEasyBox, chrono.ChBodyEasySphere, or other appropriate shapes.
# Assign masses, inertia, and collision shapes to each body.

# Example: Chassis
chassis = chrono.ChBodyEasyBox(5, 3, 2, chrono.ChMaterialSurface(0.5, 0.5, 0.5))
chassis.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(chassis)

# Example: Wheel
wheel = chrono.ChBodyEasySphere(0.5, chrono.ChMaterialSurface(0.5, 0.5, 0.5))
wheel.SetPos(chrono.ChVectorD(1, 0, 0))
system.Add(wheel)

# Configure TMEASY tire model
# (Refer to PyChrono documentation for details on tire model setup)

# Set up interactive driver system
# (Implement logic for steering, throttle, and braking based on user input)

# Simulation loop
vis_app.SetTimestep(1/50)  # 50 frames per second
while vis_app.Run():
    system.DoStepDynamics(vis_app.GetTimestep())
    vis_app.Render()

# Cleanup
vis_app.Close()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize the Chrono environment and create a new system.
   - Set up Irrlicht visualization with a camera and basic scene elements.

2. **Terrain:**
   - Create a `RigidTerrain` object representing the flat ground.
   - Define its dimensions and apply a texture.
   - Set it as fixed to prevent movement.

3. **HMMWV:**
   - This section requires more specific information about the HMMWV's geometry and mass distribution.
   - You'll need to create individual bodies for each component (chassis, wheels, axles, etc.) using appropriate shapes from Chrono.
   - Assign masses, inertia, and collision shapes to each body.

4. **Tire Model:**
   - Configure the TMEASY tire model for the wheels.
   - Refer to the PyChrono documentation for details on tire model parameters and setup.

5. **Driver System:**
   - Implement logic for steering, throttle, and braking based on user input.
   - This will likely involve creating input handlers and updating the vehicle's forces and torques accordingly.

6. **Simulation Loop:**
   - Set the simulation timestep to 1/50 seconds for 50 frames per second.
   - In the loop:
     - Update the vehicle dynamics using `system.DoStepDynamics()`.
     - Render the scene using `vis_app.Render()`.

7. **Cleanup:**
   - Close the Irrlicht application when the simulation ends.



Remember to replace `"path/to/chrono/data"` with the actual path to your Chrono data directory. You'll also need to provide detailed specifications for the HMMWV's geometry and mass distribution to complete the script.
```python
import pychrono as chrono
import pychrono.irrlicht as vis

# Initialize Chrono environment
chrono.SetChronoDataPath("..")  # Set the path to your Chrono data files
system = chrono.ChSystemNSC()

# Create the ground
ground = chrono.ChBodyEasyBox(10, 10, 1, 1000)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(ground)

# Create the mass
mass = chrono.ChBodyEasySphere(0.5, 1)
mass.SetPos(chrono.ChVectorD(0, 1, 0))
system.Add(mass)

# Create the spring-damper connection
link = chrono.ChLinkTSDA(mass, ground)
link.SetSpringStiffness(1000)  # Default spring stiffness
link.SetDampingCoefficient(100)  # Default damping coefficient

# Add the link to the system
system.Add(link)

# Create the Irrlicht visualization
vis.Add(system)
vis.SetCamera(chrono.ChVectorD(5, 5, 5), chrono.ChVectorD(0, 0, 0))
vis.SetAmbientLight(chrono.ChColor(0.5, 0.5, 0.5))
vis.SetDirectionalLight(chrono.ChColor(1, 1, 1), chrono.ChVectorD(1, 1, 1))

# Visualize the mass and spring
mass.GetVisualShape().SetMaterial(chrono.ChMaterialSurface(chrono.ChColor(1, 0, 0)))  # Red mass
link.GetVisualShape().SetMaterial(chrono.ChMaterialSurface(chrono.ChColor(0, 1, 0)))  # Green spring

# Run the simulation
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
vis.Run()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono` for physics and `pychrono.irrlicht` for visualization.
   - Initialize the Chrono environment using `chrono.ChSystemNSC()`.
   - Set the path to Chrono data files using `chrono.SetChronoDataPath()`.

2. **Physical Systems:**
   - Create a ground plane using `chrono.ChBodyEasyBox()`.
   - Create a sphere mass using `chrono.ChBodyEasySphere()`.
   - Define a `ChLinkTSDA` object to connect the mass to the ground, acting as a spring-damper system.

3. **Parameters:**
   - Set the spring stiffness and damping coefficient for the `ChLinkTSDA` using `SetSpringStiffness()` and `SetDampingCoefficient()`. These values determine the spring's resistance to stretching and the damper's resistance to motion.

4. **Visualization:**
   - Create an Irrlicht visualization using `vis.Add(system)`.
   - Set the camera position and orientation using `vis.SetCamera()`.
   - Define ambient and directional lighting using `vis.SetAmbientLight()` and `vis.SetDirectionalLight()`.
   - Assign visual shapes and materials to the mass and spring using `GetVisualShape().SetMaterial()`.

5. **Simulation:**
   - Set the gravitational acceleration using `system.Set_G_acc()`.
   - Start the simulation loop using `vis.Run()`.



This script will create a simple simulation where a mass attached to a spring-damper system oscillates vertically under the influence of gravity. The Irrlicht visualization will display the mass, spring, and ground, allowing you to observe the system's motion.
```python
import pychrono as chrono
import pychrono.irrlicht as vis

# Initialize Chrono environment
chrono.SetChronoDataPath("path/to/chrono/data")  # Replace with your Chrono data path
system = chrono.ChSystemNSC()

# Create ground body
ground = chrono.ChBodyEasyBox(10, 10, 1, 1000)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(ground)

# Create pendulum body
pendulum_mass = 1.0
pendulum_length = 1.0
pendulum_inertia = chrono.ChVectorD(0.1, 0.1, 0.1)  # Approximate inertia
pendulum = chrono.ChBodyEasySphere(pendulum_mass, pendulum_inertia)
pendulum.SetPos(chrono.ChVectorD(0, pendulum_length, 0))
system.Add(pendulum)

# Create revolute joint
joint = chrono.ChLinkLockRevolute(ground, pendulum,
                                  chrono.ChVectorD(0, 0, 0),
                                  chrono.ChVectorD(0, 0, 1))
system.Add(joint)

# Visualization setup
vis.Initialize(chrono.ChVectorD(800, 600, 0))
vis.Add(ground)
vis.Add(pendulum)
vis.SetCamera(chrono.ChVectorD(0, 0, 5), chrono.ChVectorD(0, 0, 0))

# Simulation loop
dt = 0.01
while True:
    system.DoStepDynamics(dt)

    # Log pendulum position and velocity
    pendulum_pos = pendulum.GetPos()
    pendulum_vel = pendulum.GetRotSpeed()
    print(f"Position: {pendulum_pos}, Velocity: {pendulum_vel}")

    vis.Render()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono` for physics simulation and `pychrono.irrlicht` for visualization.
   - Set the Chrono data path (replace with your actual path).
   - Create a `ChSystemNSC` object to represent the simulation environment.

2. **Ground Body:**
   - Create a rectangular ground body using `ChBodyEasyBox`.
   - Set its position to the origin (0, 0, 0).
   - Add the ground body to the simulation system.

3. **Pendulum Body:**
   - Create a spherical pendulum body using `ChBodyEasySphere`.
   - Set its mass, inertia, and initial position (hanging from the origin).
   - Add the pendulum body to the simulation system.

4. **Revolute Joint:**
   - Create a revolute joint using `ChLinkLockRevolute` to connect the ground and pendulum.
   - Specify the anchor point on the ground and the axis of rotation.
   - Add the joint to the simulation system.

5. **Visualization Setup:**
   - Initialize Irrlicht visualization using `vis.Initialize`.
   - Add the ground and pendulum bodies to the visualization system.
   - Set the camera position and orientation.

6. **Simulation Loop:**
   - Set the time step (`dt`).
   - Enter a loop that continuously:
     - Updates the simulation using `system.DoStepDynamics(dt)`.
     - Logs the pendulum's position and velocity.
     - Renders the visualization using `vis.Render()`.



**Remember:**

- Replace `"path/to/chrono/data"` with the actual path to your Chrono data directory.
- Adjust the pendulum's mass, length, and inertia as desired.
- You can modify the visualization settings (camera, lighting, etc.) to your preference.
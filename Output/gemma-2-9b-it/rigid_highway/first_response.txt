```python
import pychrono as chrono
import pychrono.irrlicht as vis
import os

# Initialize Chrono environment
chrono.SetChronoDataPath(os.path.join(os.path.dirname(__file__), "data"))
system = chrono.ChSystemNSC()

# Set simulation parameters
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))  # Gravity
system.Set_Speed_limit(100)  # Speed limit
vis.SetChronoDataPath(os.path.join(os.path.dirname(__file__), "data"))
vis.SetRealTime(True)
vis.SetFrameRate(50)

# Create Irrlicht visualization
app = vis.ChIrrApp(system, 'HMMWV Simulation', 
                   vis.Vec3df(0, 0, 0), 
                   vis.Vec3df(0, 0, 0), 
                   vis.Vec3df(1, 1, 1))

# Load terrain meshes
terrain_col = chrono.ChMeshTerrain(os.path.join(os.path.dirname(__file__), "Highway_col.obj"))
terrain_vis = chrono.ChMeshTerrain(os.path.join(os.path.dirname(__file__), "Highway_vis.obj"))

# Create terrain body
terrain_body = chrono.ChBodyEasy(terrain_col, terrain_vis)
terrain_body.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(terrain_body)

# Load HMMWV model and components
# (Replace with actual HMMWV model loading code)
# ...

# Set HMMWV parameters
# (Set initial position, orientation, contact method, etc.)
# ...

# Configure TMEASY tire model
# (Replace with actual tire model configuration code)
# ...

# Implement interactive driver system
# (Define functions for steering, throttle, and braking control)
# ...

# Simulation loop
while not app.GetDevice().isQuitting():
    app.BeginScene()
    system.DoStepDynamics(1.0/50.0)  # Update simulation at 50 FPS
    app.DrawAll()
    app.EndScene()

app.GetDevice().run()
```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries (pychrono, pychrono.irrlicht, os).
   - Initializes the Chrono environment and sets the data path.
   - Creates a Chrono system and sets gravity and speed limit.
   - Initializes Irrlicht visualization with a window title, camera position, and frame rate.

2. **Terrain Loading:**
   - Loads collision and visual meshes for the terrain from specified files.
   - Creates a terrain body using the loaded meshes and sets its initial position.
   - Adds the terrain body to the Chrono system.

3. **HMMWV Loading and Configuration:**
   - Placeholder comments indicate where you need to load the HMMWV model and its components.
   - Placeholder comments also indicate where to set the HMMWV's initial position, orientation, contact method, and other parameters.

4. **Tire Model Configuration:**
   - Placeholder comments indicate where to configure the TMEASY tire model for the HMMWV.

5. **Interactive Driver System:**
   - Placeholder comments indicate where to define functions for steering, throttle, and braking control.

6. **Simulation Loop:**
   - Enters a loop that runs until the user quits the application.
   - Begins a new scene in Irrlicht.
   - Updates the simulation dynamics for one step (1/50th of a second) using `system.DoStepDynamics()`.
   - Draws all objects in the scene using `app.DrawAll()`.
   - Ends the scene and updates the Irrlicht display.

**Remember:**

- Replace the placeholder comments with your actual code for loading the HMMWV model, configuring its parameters, setting up the tire model, and implementing the interactive driver system.
- Ensure that the HMMWV model and terrain meshes are correctly placed in the specified data paths.
- Adjust the simulation parameters (gravity, speed limit, frame rate) as needed.
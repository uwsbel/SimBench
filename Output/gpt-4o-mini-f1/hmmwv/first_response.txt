```python
import pychrono as chrono
import pychrono.irrlicht as irr
import math

# Create the Chrono simulation system
sys = chrono.ChSystemNSC()
sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
sys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  # Set gravity in negative Z direction

# Create the HMMWV vehicle model
vehicle = chrono.HMMWV_Full(sys)  # Initialize the HMMWV vehicle model
vehicle.SetContactMethod(chrono.ChContactMethod_NSC)  # Set contact method to NSC
vehicle.SetChassisFixed(False)  # Allow the chassis to move
vehicle.SetInitPosition(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0.5), chrono.ChQuaterniond(1, 0, 0, 0)))  # Set initial position and orientation of the vehicle
vehicle.SetTireType(chrono.TireModelType_TMEASY)  # Set tire model type to TMEASY
vehicle.SetTireStepSize(0.005)  # Set time step size for tire model
vehicle.Initialize()  # Initialize the vehicle model

# Set visualization type for vehicle components
vis_type = chrono.VisualizationType_PRIMITIVES
vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

# Create the terrain object
patch_mat = chrono.ChContactMaterialNSC()
patch_mat.SetFriction(0.9)  # Set friction for the terrain
patch_mat.SetRestitution(0.01)  # Set restitution for the terrain
terrain = chrono.RigidTerrain(sys)  # Create a rigid terrain object
patch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), 100, 100)  # Add a patch to the terrain
patch.SetTexture(chrono.GetChronoDataFile("terrain/textures/tile4.jpg"), 20, 20)  # Set texture for the patch
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))  # Set color for the patch
terrain.Initialize()  # Initialize the terrain

# Create the vehicle Irrlicht interface
vis = chrono.ChVisualSystemIrrlicht()
vis.AttachSystem(sys)  # Attach the Chrono system to the Irrlicht visual system
vis.SetWindowSize(chrono.ChVector2i(1280, 720))  # Set the window size
vis.SetWindowTitle('HMMWV Demo')  # Set the window title
vis.Initialize()  # Initialize the visual system
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))  # Add a logo to the window
vis.AddSkyBox()  # Add a skybox for better visuals
vis.AddCamera(chrono.ChVector3d(0, 0.5, 1.75), chrono.ChVector3d(0, 0, 0))  # Add a camera to the scene
vis.AddTypicalLights()  # Add typical lights to the scene

# Create the driver system
driver = chrono.ChInteractiveDriverIRR(vis)  # Create an interactive driver system
driver.SetSteeringDelta(0.02)  # Set steering delta
driver.SetThrottleDelta(0.02)  # Set throttle delta
driver.SetBrakingDelta(0.1)  # Set braking delta
driver.Initialize()  # Initialize the driver system

# Set the time response for steering and throttle inputs
vehicle.GetSteeringController().SetTimeConstant(0.5)
vehicle.GetThrottleController().SetTimeConstant(0.5)

# Simulation loop
time = 0  # Initialize simulation time
time_step = 1e-3  # Set time step for the simulation
step_number = 0  # Initialize step number

# Run the simulation in real time
while vis.Run():
    # Render the scene
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update vehicle based on driver inputs
    vehicle.Synchronize(driver_inputs, time)
    terrain.Synchronize(time)
    sys.Synchronize(time)

    # Advance the simulation by one time step
    vehicle.Advance(time_step)
    terrain.Advance(time_step)
    sys.Advance(time_step)

    # Increment time and step number
    time += time_step
    step_number += 1
```
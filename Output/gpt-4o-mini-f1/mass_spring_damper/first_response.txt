```python
import pychrono as chrono
import pychrono.irrlicht as irr
import math

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
chrono.SetChronoResourcePath(chrono.GetChronoDataPath())

# Create the system
sys = chrono.ChSystemNSC()
sys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))

# Create the ground body
ground = chrono.ChBody()
sys.AddBody(ground)

# Create the mass body
mass = chrono.ChBody()
mass.SetPos(chrono.ChVector3d(0, 0, 0))
mass.SetMass(1)
mass.SetInertiaXX(chrono.ChVector3d(1, 1, 1))
mass.GetVisualShape(0).SetTexture(chrono.GetChronoDataPath() + "textures/blue.png")
sys.AddBody(mass)

# Create the spring-damper connection
spring = chrono.ChLinkTSDA()
spring.Initialize(mass, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(0, -1, 0))
spring.SetRestLength(1)
spring.SetSpringCoefficient(100)
spring.SetDampingCoefficient(0.1)
sys.AddLink(spring)

# Create Irrlicht visualization
vis = irr.ChVisualSystemIrrlicht()
vis.AttachSystem(sys)
vis.SetCameraVertical(irr.V3D_Z)
vis.SetWindowSize(chrono.ChVector2i(1280, 720))
vis.SetWindowTitle('Single mass-spring-damper system')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddSkyBox()
vis.AddCamera(chrono.ChVector3d(0, 2, -6), chrono.ChVector3d(0, 1, 0))
vis.AddTypicalLights()

# Simulation loop
while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    sys.DoStepDynamics(1e-3)
```
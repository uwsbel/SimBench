```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import math
import random

# Function to create a particle emitter
def create_particle_emitter(system, num_particles, emitter_position, emitter_velocity, emitter_orientation):
    for i in range(num_particles):
        # Generate random shape for the particle
        shape_type = random.choice([chrono.ChBodyShape.SPHERE, chrono.ChBodyShape.CYLINDER, chrono.ChBodyShape.BOX])
        particle = chrono.ChBodyEasy()
        
        # Set properties of the particle
        particle.SetMass(1)
        particle.SetPos(emitter_position)
        particle.SetPosDt(emitter_velocity)
        particle.SetRot(emitter_orientation)
        
        # Create a shape for the particle
        if shape_type == chrono.ChBodyShape.SPHERE:
            particle.AddShape(chrono.ChSphere(0.5))
        elif shape_type == chrono.ChBodyShape.CYLINDER:
            particle.AddShape(chrono.ChCylinder(0.5, 1))
        elif shape_type == chrono.ChBodyShape.BOX:
            particle.AddShape(chrono.ChBox(1, 1, 1))
        
        # Set collision properties
        particle.SetCollide(True)
        particle.GetMaterialSurface().SetFriction(0.1)
        particle.GetMaterialSurface().SetRestitution(0.1)
        
        # Add the particle to the system
        system.Add(particle)

# Function to apply custom gravitational force
def apply_gravitational_force(system, particle, force):
    particle.SetForce(force)

# Main function to run the simulation
def run_simulation():
    # Create the physical system
    system = chrono.ChSystemNSC()
    
    # Create the particle emitter
    emitter_position = chrono.ChVector3d(0, 10, 0)
    emitter_velocity = chrono.ChVector3d(0, -1, 0)
    emitter_orientation = chrono.ChQuaterniond(1, 0, 0, 0)
    create_particle_emitter(system, 10, emitter_position, emitter_velocity, emitter_orientation)
    
    # Create the Irrlicht visualization
    vis = chronoirr.ChVisualSystemIrrlicht()
    vis.AttachSystem(system)
    vis.SetWindowSize(chrono.ChVector2i(1280, 720))
    vis.SetWindowTitle('Particle Emitter with Gravitational Attraction')
    vis.Initialize()
    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
    vis.AddSkyBox()
    vis.AddCamera(chrono.ChVector3d(0, 5, -10))
    vis.AddTypicalLights()
    
    # Simulation loop
    while vis.Run():
        # Apply custom gravitational force to particles
        for particle in system.Get_bodylist():
            force = chrono.ChVector3d(0, -9.81, 0)  # Custom gravitational force
            apply_gravitational_force(system, particle, force)
        
        # Render the scene
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        
        # Advance the simulation
        system.DoStepDynamics(0.01)

# Entry point of the script
if __name__ == "__main__":
    run_simulation()
```
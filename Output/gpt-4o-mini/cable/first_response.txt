To create a simulation of a beam composed of ANCF (Absolute Nodal Coordinate Formulation) cable elements using PyChrono, we will follow the instructions provided. Below is a Python script that initializes the PyChrono environment, sets up the physical systems, and visualizes the beam's deformation and nodal positions using the Irrlicht engine.

Make sure you have PyChrono installed in your Python environment. You can install it via pip if you haven't done so already.

Here's the simulation script:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.ChSystemNSC.SetNumThreads(1)
system = chrono.ChSystemNSC()

# Create a ground body
ground = chrono.ChBody()
ground.SetBodyFixed(True)
system.Add(ground)

# Define beam parameters
beam_length = 5.0  # Length of the beam
num_elements = 10   # Number of ANCF elements
element_length = beam_length / num_elements
beam_radius = 0.1   # Radius of the beam

# Create ANCF cable elements
ancf_cable = chrono.ChCable()
ancf_cable.SetDensity(1000)  # Density of the cable material

# Add nodes to the ANCF cable
for i in range(num_elements + 1):
    node = chrono.ChNodeFEAxyz(chrono.ChVectorD(i * element_length, 0, 0))
    node.SetMass(0.1)  # Mass of each node
    ancf_cable.AddNode(node)

# Connect nodes with elements
for i in range(num_elements):
    element = chrono.ChElementCableANCF()
    element.SetNodes(ancf_cable.GetNode(i), ancf_cable.GetNode(i + 1))
    element.SetDiameter(beam_radius)
    element.SetYoungModulus(2e11)  # Young's modulus of the material
    element.SetDensity(1000)  # Density of the material
    system.Add(element)

# Add gravity
gravity = chrono.ChForce()
gravity.SetMode(chrono.ChForce.FORCE)
gravity.SetV(chrono.ChVectorD(0, -9.81, 0))
system.Add(gravity)

# Create Irrlicht visualization
application = chronoirr.ChIrrApp(system, "ANCF Beam Simulation", chronoirr.dimension2d(800, 600))
application.AddLogo(chrono.GetChronoDataPath() + "logo_pychrono.png")
application.AddSkyBox()
application.AddCamera(chrono.ChVectorD(0, 5, 10), chrono.ChVectorD(0, 0, 0))
application.AddLight(chrono.ChVectorD(10, 10, 10), chrono.ChVectorD(1, 1, 1))

# Main simulation loop
while application.GetDevice().run():
    system.DoStepDynamics(0.01)  # Step the simulation

    # Clear the previous visualization
    application.BeginScene()
    application.DrawAll()

    # Draw the ANCF cable elements
    for i in range(num_elements):
        node1 = ancf_cable.GetNode(i)
        node2 = ancf_cable.GetNode(i + 1)
        application.DrawLine(node1.GetPos(), node2.GetPos(), chrono.ChColor(0, 0, 1))

    # Draw the nodes
    for i in range(num_elements + 1):
        node = ancf_cable.GetNode(i)
        application.DrawPoint(node.GetPos(), chrono.ChColor(1, 0, 0), 0.1)

    application.EndScene()

# Cleanup
application.Close()
```

### Explanation of the Code:
1. **Initialization**: The script starts by initializing the PyChrono environment and creating a `ChSystemNSC` object.
2. **Ground Body**: A fixed ground body is created to serve as the hinge point for the beam.
3. **Beam Creation**: The beam is created using ANCF cable elements. Nodes are added to the cable, and elements are created to connect these nodes.
4. **Gravity**: A gravitational force is applied to the system.
5. **Irrlicht Visualization**: The Irrlicht engine is set up for rendering the simulation. A camera and light source are added for better visualization.
6. **Simulation Loop**: The main loop runs the simulation, updates the system, and visualizes the beam's deformation and nodal positions.

### Note:
- Ensure that you have the necessary dependencies and that your environment is set up to run PyChrono simulations.
- Adjust parameters such as beam length, number of elements, and material properties as needed for your specific simulation requirements.
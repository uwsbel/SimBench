To create a PyChrono simulation demonstrating a system of epicyclic gears with a fixed truss, a rotating bar, and two gears with a gear motor, you can follow the script below. This script initializes the PyChrono environment, sets up the physical systems, and configures the visualization using the Irrlicht system.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')  # Set your Chrono data path here
system = chrono.ChSystemNSC()

# Create Irrlicht visualization
application = chronoirr.ChIrrApp(system, 'Epicyclic Gears Simulation', chronoirr.dimension2du(800, 600))
application.SetSkyBox(chrono.GetChronoDataPath() + 'skybox/skybox.jpg')
application.AddLogo(chrono.GetChronoDataPath() + 'chrono_logo_alpha.png')
application.AddCamera(chrono.ChVectorD(0, 2, -10), chrono.ChVectorD(0, 1, 0))
application.AddTypicalLights()

# Create a fixed truss
truss = chrono.ChBodyAuxRef()
truss.SetBodyFixed(True)
truss.SetPos(chrono.ChVectorD(0, 0, 0))
truss.GetMaterialSurface().SetFriction(0.4)
truss.GetMaterialSurface().SetRestitution(0.1)
system.Add(truss)

# Create a rotating bar
bar = chrono.ChBody()
bar.SetMass(1.0)
bar.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))
bar.SetPos(chrono.ChVectorD(0, 1, 0))
bar.SetRot(chrono.Q_from_AngZ(chrono.CH_C_PI / 4))  # Initial rotation
system.Add(bar)

# Create two gears
gear1 = chrono.ChBody()
gear1.SetMass(0.5)
gear1.SetInertiaXX(chrono.ChVectorD(0.01, 0.01, 0.01))
gear1.SetPos(chrono.ChVectorD(0, 1, 0))
gear1.SetRot(chrono.Q_from_AngZ(0))
system.Add(gear1)

gear2 = chrono.ChBody()
gear2.SetMass(0.5)
gear2.SetInertiaXX(chrono.ChVectorD(0.01, 0.01, 0.01))
gear2.SetPos(chrono.ChVectorD(0.5, 1, 0))
gear2.SetRot(chrono.Q_from_AngZ(0))
system.Add(gear2)

# Create gear motor to enforce a constant rotation speed
gear_motor = chrono.ChLinkMotorRotation()
gear_motor.Initialize(gear1, gear2, chrono.ChFrameD(chrono.ChVectorD(0, 1, 0)))
gear_motor.SetMotorType(chrono.ChLinkMotor::eChLinkMotorType::MOTOR);
gear_motor.SetSpeed(chrono.CH_C_PI / 2)  # Set speed in radians per second
system.Add(gear_motor)

# Set up visualization materials
truss.GetMaterialSurface().SetFriction(0.4)
truss.GetMaterialSurface().SetRestitution(0.1)

bar.GetMaterialSurface().SetFriction(0.4)
bar.GetMaterialSurface().SetRestitution(0.1)

gear1.GetMaterialSurface().SetFriction(0.4)
gear1.GetMaterialSurface().SetRestitution(0.1)

gear2.GetMaterialSurface().SetFriction(0.4)
gear2.GetMaterialSurface().SetRestitution(0.1)

# Simulation loop
application.AssetBindAll()
application.AssetUpdateAll()

# Set the time step
time_step = 0.01
application.SetTimestep(time_step)

while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.EndScene()
    
    # Advance the simulation
    system.DoStepDynamics(time_step)

# Clean up
application.GetDevice().drop()
```

### Explanation of the Code:
1. **Initialization**: The PyChrono environment is initialized, and the Irrlicht visualization system is set up.
2. **Fixed Truss**: A fixed body is created to represent the truss.
3. **Rotating Bar**: A dynamic body is created to represent the rotating bar.
4. **Gears**: Two gear bodies are created and added to the system.
5. **Gear Motor**: A motor link is created to enforce a constant rotation speed between the two gears.
6. **Visualization**: The materials and lighting are set up for visualization.
7. **Simulation Loop**: The simulation runs in a loop, updating the visualization and advancing the simulation at each time step.

Make sure to adjust the paths and parameters as necessary for your specific setup.
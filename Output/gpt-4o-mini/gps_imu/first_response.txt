To create a PyChrono simulation featuring an HMMWV vehicle with the specified requirements, you can follow the script below. This script initializes the PyChrono environment, sets up the vehicle, terrain, sensors, and visual interface, and runs the simulation loop.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chrono_vehicle

# Initialize the PyChrono environment
chrono.ChSystem.SetNumThreads(4)  # Set the number of threads for parallel processing
system = chrono.ChSystem()

# Create the Irrlicht visualization
application = chronoirr.ChIrrApp(system, "HMMWV Simulation", chronoirr.dimension2d(800, 600))
application.AddSkyBox()
application.AddCamera(chrono.ChVectorD(0, 5, -15))
application.AddLight(chrono.ChVectorD(0, 10, -10), chrono.ChColor(1, 1, 1))

# Create the terrain
terrain = chrono_vehicle.ChTerrain()
terrain.SetGround(chrono.ChVectorD(0, 0, 0), 1000, 1000)  # Flat terrain

# Create the HMMWV vehicle
hmmwv = chrono_vehicle.HMMWV()
hmmwv.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.ChQuaternionD(1, 0, 0, 0)))

# Add the vehicle to the system
system.Add(hmmwv)

# Create IMU and GPS sensors
imu_sensor = chrono_vehicle.ChIMU()
gps_sensor = chrono_vehicle.ChGPS()

# Attach sensors to the vehicle's chassis
hmmwv.GetChassis().AddSensor(imu_sensor)
hmmwv.GetChassis().AddSensor(gps_sensor)

# Set default parameters for the simulation
hmmwv.SetPos(chrono.ChVectorD(0, 0.5, 0))  # Initial position
hmmwv.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))  # Initial orientation

# Simulation parameters
time_step = 0.01  # Time step for the simulation
end_time = 10.0   # End time for the simulation

# Simulation loop
while system.GetChTime() < end_time:
    # Update the system
    system.DoStepDynamics(time_step)

    # Process sensor data
    imu_data = imu_sensor.GetSensorData()
    gps_data = gps_sensor.GetSensorData()

    # Output vehicle mass and sensor data
    vehicle_mass = hmmwv.GetVehicleMass()
    print(f"Time: {system.GetChTime():.2f} s, Vehicle Mass: {vehicle_mass:.2f} kg")
    print(f"IMU Data: {imu_data}, GPS Data: {gps_data}")

    # Render the scene
    application.DrawAll()
    application.DoStep()

# Clean up
application.Close()
```

### Explanation of the Script:
1. **Initialization**: The script initializes the PyChrono environment and sets the number of threads for parallel processing.
2. **Irrlicht Visualization**: It creates a visual interface using Irrlicht, adding a skybox, camera, and light source.
3. **Terrain and Vehicle Setup**: A flat terrain is created, and an HMMWV vehicle is initialized and added to the simulation system.
4. **Sensors**: IMU and GPS sensors are created and attached to the vehicle's chassis.
5. **Simulation Loop**: The loop runs until the specified end time, updating the system, processing sensor data, outputting vehicle mass, and rendering the scene.
6. **Output**: The script prints the simulation time, vehicle mass, and sensor data at each step.

### Note:
- Ensure that you have the necessary PyChrono and Irrlicht libraries installed and properly configured in your Python environment.
- Adjust the parameters (like terrain size, vehicle position, etc.) as needed for your specific simulation requirements.
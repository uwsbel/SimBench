To create a PyChrono simulation integrated with ROS as per your instructions, we need to follow a structured approach. Below is a Python script that initializes the PyChrono environment, sets up the physical systems, and integrates with ROS. Make sure you have the necessary libraries installed (`pychrono` and `rospy`) before running the script.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import rospy
from std_msgs.msg import Int32

# Initialize the ROS node
rospy.init_node('chrono_ros_simulation', anonymous=True)
pub = rospy.Publisher('chrono_integer_topic', Int32, queue_size=10)

# Initialize the Chrono system
chrono.SetChronoDataPath('/path/to/chrono/data/')  # Set your Chrono data path
system = chrono.ChSystemNSC()

# Set gravitational acceleration
gravity = chrono.ChVectorD(0, -9.81, 0)
system.Set_G_acc(gravity)

# Create a fixed floor
floor = chrono.ChBody()
floor.SetBodyFixed(True)
floor.SetPos(chrono.ChVectorD(0, -0.5, 0))
floor.GetMaterialSurface().SetFriction(0.5)
floor.GetMaterialSurface().SetRestitution(0.1)
system.Add(floor)

# Create a movable box
box_size = 0.5
box = chrono.ChBody()
box.SetPos(chrono.ChVectorD(0, 0.5, 0))
box.SetMass(1.0)
box.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))
box.GetMaterialSurface().SetFriction(0.5)
box.GetMaterialSurface().SetRestitution(0.1)
box.SetCollide(True)

# Create a box shape
box_shape = chrono.ChBoxShape()
box_shape.GetBoxGeometry().Size = chrono.ChVectorD(box_size, box_size, box_size)
box_shape.SetColor(chrono.ChColor(0.0, 0.0, 1.0))
box_shape.SetBody(box)
box.AddAsset(box_shape)

# Add the box to the system
system.Add(box)

# Set up the simulation parameters
time_step = 0.01
simulation_time = 10.0
num_steps = int(simulation_time / time_step)

# Create a ROS handler to publish integer messages
def ros_handler():
    for step in range(num_steps):
        # Advance the simulation
        system.DoStepDynamics(time_step)

        # Publish an integer message to the ROS topic
        msg = Int32()
        msg.data = step
        pub.publish(msg)

        # Sleep to maintain real-time execution
        rospy.sleep(time_step)

if __name__ == "__main__":
    try:
        ros_handler()
    except rospy.ROSInterruptException:
        pass
```

### Explanation of the Code:
1. **ROS Initialization**: The script initializes a ROS node and sets up a publisher to send integer messages to a specified topic.
2. **Chrono System Setup**: The Chrono system is initialized, and gravitational acceleration is set.
3. **Fixed Floor Creation**: A fixed floor is created with specified material properties.
4. **Movable Box Creation**: A movable box is created, configured with mass, inertia, and material properties.
5. **Simulation Loop**: The simulation runs for a specified duration, advancing the Chrono system at each timestep and publishing the current step number to the ROS topic.
6. **Real-Time Execution**: The `rospy.sleep(time_step)` function is used to maintain real-time execution.

### Note:
- Ensure that the path to the Chrono data is correctly set in `chrono.SetChronoDataPath()`.
- Adjust the parameters (like box size, mass, and simulation time) as needed for your specific simulation requirements.
- Make sure to run this script in an environment where both PyChrono and ROS are properly configured.
Below is a Python script that sets up a PyChrono simulation for a full HMMWV (High Mobility Multipurpose Wheeled Vehicle) on a flat rigid terrain, using the specified parameters and configurations. This script includes the initialization of the PyChrono environment, the addition of the vehicle and terrain, and the setup of the interactive driver system.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001)

# Create the simulation system
system = chrono.ChSystemNSC()

# Create a Rigid Terrain
terrain = chrono.ChTerrain()
terrain.SetGround(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(10, 0, 10))
terrain.SetTexture(chrono.GetChronoDataPath() + "terrain_texture.jpg")  # Set your texture path here
system.Add(terrain)

# Create the HMMWV vehicle
hmmwv = chrono.ChVehicleHMMWV()
hmmwv.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.ChQuaternionD(1, 0, 0, 0)))

# Set the tire model to TMEASY
for tire in hmmwv.GetTires():
    tire.SetTireType(chrono.ChTire.TMEASY)

# Add the vehicle to the system
system.Add(hmmwv)

# Set up the Irrlicht visualization
application = chronoirr.ChIrrApp(system, "HMMWV Simulation", chronoirr.dimension2d(800, 600))
application.AddLogo(chrono.GetChronoDataPath() + "chrono_logo.png")  # Set your logo path here
application.AddSkyBox()
application.AddCamera(chrono.ChVectorD(0, 5, -10), chrono.ChVectorD(0, 0, 0))
application.AddTypicalLights()
application.SetShowInfos(True)

# Create an interactive driver system
driver = chrono.ChDriverHMMWV()
driver.Initialize(hmmwv)
driver.SetThrottle(0.5)  # Set initial throttle
driver.SetSteering(0.0)  # Set initial steering
driver.SetBraking(0.0)   # Set initial braking
system.Add(driver)

# Set the simulation step size and frame rate
step_size = 1 / 50.0  # 50 frames per second

# Simulation loop
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

    # Update the system
    system.DoStepDynamics(step_size)

    # Update driver inputs (you can modify this to take user input)
    driver.SetThrottle(0.5)  # Example: constant throttle
    driver.SetSteering(0.0)  # Example: no steering
    driver.SetBraking(0.0)   # Example: no braking

    # Render the scene
    application.DrawAll()

# Clean up and exit
application.Close()
```

### Key Components of the Script:
1. **Initialization**: The script initializes the PyChrono environment and creates a simulation system.
2. **Rigid Terrain**: A flat rigid terrain is created with a specified texture.
3. **HMMWV Vehicle**: The HMMWV vehicle is initialized with a specific position and orientation, and the TMEASY tire model is applied.
4. **Irrlicht Visualization**: The script sets up an Irrlicht application for visualization, including camera and lighting.
5. **Driver System**: An interactive driver system is created to control the vehicle's throttle, steering, and braking.
6. **Simulation Loop**: The loop runs at 50 frames per second, updating the vehicle dynamics and rendering the scene.

### Note:
- Ensure you have the correct paths for textures and logos.
- Modify the driver inputs as needed to allow for interactive control.
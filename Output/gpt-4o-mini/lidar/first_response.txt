To create a PyChrono simulation based on your instructions, we will follow the steps outlined in your request. Below is a Python script that initializes the PyChrono environment, adds a triangular mesh from a Wavefront .obj file, incorporates a lidar sensor, and simulates the system while updating the lidar's position in an orbit around the mesh.

Make sure you have the PyChrono library installed and the necessary .obj file available in your working directory.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.sensor as sensor
import numpy as np

# Initialize the PyChrono environment
chrono.ChSystemNSC()
system = chrono.ChSystemNSC()

# Create a visualization window
application = chronoirr.ChIrrApp(system, "Lidar Simulation", chronoirr.dimension2du(800, 600))
application.SetSkyBox()
application.AddLogo()
application.SetFPS(60)

# Load the triangular mesh from a Wavefront .obj file
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefrontMesh("path/to/your/mesh.obj", True, True)

# Create a fixed body for the mesh
fixed_body = chrono.ChBodyAuxRef()
fixed_body.SetBodyFixed(True)
fixed_body.SetCollide(False)
fixed_body.GetCollisionModel().ClearModel()
fixed_body.GetCollisionModel().AddTriangleMesh(mesh, chrono.ChVectorD(0, 0, 0), chrono.ChMatrix33(chrono.CH_C_PI / 2), True, True)
fixed_body.GetCollisionModel().BuildModel()
fixed_body.SetMass(0)  # Fixed body has no mass
system.Add(fixed_body)

# Create a lidar sensor
lidar_sensor = sensor.ChSensorLidar()
lidar_sensor.SetName("Lidar Sensor")
lidar_sensor.SetParent(fixed_body)
lidar_sensor.SetOffset(chrono.ChVectorD(0, 2, 0))  # Position above the mesh
lidar_sensor.SetFOV(90)  # Field of view
lidar_sensor.SetRange(10)  # Range of the lidar
lidar_sensor.SetResolution(512)  # Resolution of the lidar data

# Add noise filters to the lidar sensor
lidar_sensor.SetNoise(0.05)  # Add noise with a standard deviation of 0.05

# Set visualization options for the lidar
lidar_sensor.SetVisualizationMode(sensor.ChSensorLidar.VisualizationMode.LASER)
lidar_sensor.SetSaveData(True)  # Save lidar data

# Add the lidar sensor to the system
system.Add(lidar_sensor)

# Simulation parameters
time_step = 0.01
total_time = 10.0
num_steps = int(total_time / time_step)

# Simulation loop
for step in range(num_steps):
    # Update lidar position in an orbit around the mesh
    angle = step * (2 * np.pi / num_steps)  # Full orbit in total_time
    radius = 5.0  # Orbit radius
    lidar_x = radius * np.cos(angle)
    lidar_z = radius * np.sin(angle)
    lidar_sensor.SetOffset(chrono.ChVectorD(lidar_x, 2, lidar_z))  # Update lidar position

    # Perform the simulation step
    system.DoStepDynamics(time_step)

    # Print lidar buffer data at each simulation step
    lidar_data = lidar_sensor.GetData()
    print(f"Step {step}: Lidar Data: {lidar_data}")

    # Render the scene
    application.DrawAll()

# Finalize the application
application.AssetBindAll()
application.AssetUpdateAll()
application.SetTimestep(time_step)
application.Run()
```

### Notes:
1. **Path to Mesh**: Replace `"path/to/your/mesh.obj"` with the actual path to your .obj file.
2. **Lidar Sensor Configuration**: You can adjust the lidar sensor parameters (FOV, range, resolution, noise) as needed.
3. **Orbit Parameters**: The orbit radius and speed can be modified to fit your simulation requirements.
4. **Visualization**: The script includes basic visualization setup using Irrlicht. You may need to adjust the visualization settings based on your preferences.
5. **Lidar Data**: The lidar data is printed at each simulation step. You can modify this part to save the data to a file if needed.

Make sure to run this script in an environment where PyChrono is properly installed and configured.
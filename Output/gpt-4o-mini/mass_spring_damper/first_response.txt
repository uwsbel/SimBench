Below is a Python script that demonstrates a single mass-spring-damper system using PyChrono. The script initializes the PyChrono environment, sets up the physical system with a mass connected to the ground via a spring-damper system, and includes visualization using Irrlicht.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')  # Set your Chrono data path
system = chrono.ChSystemNSC()

# Create a ground body
ground = chrono.ChBody()
ground.SetBodyFixed(True)
system.Add(ground)

# Create a mass body
mass = chrono.ChBody()
mass.SetMass(1.0)  # Mass of 1 kg
mass.SetPos(chrono.ChVectorD(0, 1, 0))  # Initial position
mass.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))  # Inertia
system.Add(mass)

# Create a spring-damper connection
spring_damper = chrono.ChLinkTSDA()
spring_damper.Initialize(ground, mass, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0))

# Set spring-damper parameters
spring_damper.SetSpringK(1000.0)  # Spring constant (N/m)
spring_damper.SetDampingR(10.0)    # Damping coefficient (Ns/m)
spring_damper.SetRestLength(1.0)   # Rest length of the spring (m)

# Add the spring-damper to the system
system.Add(spring_damper)

# Visualization with Irrlicht
application = chronoirr.ChIrrApp(system, "Mass-Spring-Damper System", chronoirr.dimension2d(800, 600))
application.AddTypicalSky(chrono.ChColor(0.5, 0.5, 0.5))
application.AddTypicalLights()
application.SetCamera(chrono.ChVectorD(0, 2, -5), chrono.ChVectorD(0, 1, 0))
application.SetTimestep(0.01)

# Create visual shapes for the mass and spring
mass_shape = chrono.ChSphere(0.1)  # Sphere with radius 0.1 m
mass_shape.SetPos(mass.GetPos())
mass_shape.SetColor(chrono.ChColor(0.0, 0.0, 1.0))  # Blue color
mass_shape.SetMaterialSurface(chrono.ChMaterialSurfaceNSC())
mass_shape.SetBody(mass)
system.Add(mass_shape)

# Create a visual representation for the spring
spring_shape = chrono.ChLinkSpring()
spring_shape.Initialize(ground, mass, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0))
spring_shape.SetSpringK(1000.0)
spring_shape.SetDampingR(10.0)
spring_shape.SetRestLength(1.0)
system.Add(spring_shape)

# Main simulation loop
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.EndScene()
    
    # Step the simulation
    system.DoStepDynamics(0.01)

# Clean up
application.GetDevice().drop()
```

### Explanation:
1. **Initialization**: The script initializes the PyChrono environment and creates a `ChSystemNSC` object.
2. **Ground and Mass Creation**: A ground body is created and fixed in place, while a mass body is created with a specified mass and initial position.
3. **Spring-Damper Connection**: A `ChLinkTSDA` object is created to connect the mass to the ground, with default spring and damping parameters set.
4. **Visualization**: The script sets up an Irrlicht application for visualization, including camera settings and lighting.
5. **Visual Shapes**: A sphere is created to represent the mass, and a spring representation is added to the system.
6. **Simulation Loop**: The main loop runs the simulation, updating the visualization and stepping through the dynamics.

Make sure to adjust the path for the Chrono data and install the necessary PyChrono dependencies before running the script.
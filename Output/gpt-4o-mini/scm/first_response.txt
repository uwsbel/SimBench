Below is a Python script that sets up a PyChrono simulation for a full HMMWV on SCM deformable terrain, as per your instructions. This script initializes the environment, adds the vehicle and terrain, configures the parameters, and sets up the visualization and control systems.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import pychrono.vehicle.terrain as terrain

# Initialize the PyChrono environment
chrono.ChSystem.SetNumThreads(1)
system = chrono.ChSystem()

# Create Irrlicht visualization
application = chronoirr.ChIrrApp(system, "HMMWV on SCM Terrain", chronoirr.dimension2d_u32(800, 600))
application.SetSkyBox()
application.AddLogo()
application.SetFPS(50)

# Create the HMMWV vehicle
hmmwv = veh.HMMWV("HMMWV")
hmmwv.SetChassisVisualizationType(veh.VisualizationType.MESH)
hmmwv.SetWheelVisualizationType(veh.VisualizationType.MESH)
hmmwv.SetTireVisualizationType(veh.VisualizationType.MESH)

# Initialize vehicle parameters
initial_position = chrono.ChVectorD(0, 0.5, 0)  # Starting position
initial_orientation = chrono.ChQuaternionD(1, 0, 0, 0)  # No rotation
hmmwv.Initialize(initial_position, initial_orientation)

# Create SCM terrain
soil_params = terrain.SCMTerrainParams()
soil_params.SetSoilParameters(20000, 0.3, 0.1)  # Example parameters: stiffness, friction, cohesion
scm_terrain = terrain.SCMTerrain(system, soil_params)
scm_terrain.SetMeshVisualization(True)
scm_terrain.SetMovingPatch(True, hmmwv.GetVehicleBody())

# Set up false color visualization for sinkage
scm_terrain.SetSinkageVisualization(True)

# Create an interactive driver system
driver = veh.HMMWVDriver(hmmwv)
driver.SetThrottle(0.0)
driver.SetSteering(0.0)
driver.SetBraking(0.0)

# Main simulation loop
while application.GetDevice().run():
    # Update driver inputs (for example, using keyboard or joystick)
    driver.UpdateInputs()

    # Update vehicle dynamics
    system.DoStepDynamics(chrono.ChTime(1.0 / 50.0))  # 50 FPS

    # Render the scene
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

# Clean up
application.Close()
```

### Explanation of the Script:
1. **Initialization**: The script initializes the PyChrono environment and sets the number of threads for the simulation.
2. **Irrlicht Visualization**: It creates an Irrlicht application for visualization, sets the window title, and configures the frame rate.
3. **Vehicle Setup**: An HMMWV vehicle is created and initialized with a specified position and orientation. The vehicle's components are set to use mesh visualization.
4. **Terrain Configuration**: The SCM terrain is created with custom soil parameters, and it is configured to visualize sinkage and follow the vehicle dynamically.
5. **Driver System**: An interactive driver system is set up to control the vehicle's throttle, steering, and braking.
6. **Simulation Loop**: The main loop updates the driver inputs, performs the simulation step, and renders the scene at the specified frame rate.

### Note:
- You may need to adjust the soil parameters and vehicle initialization values based on your specific requirements.
- The driver input handling is simplified; you would typically implement actual input handling (e.g., keyboard or joystick) to control the vehicle.
- Ensure that you have the necessary PyChrono and Irrlicht libraries installed and properly configured in your Python environment.
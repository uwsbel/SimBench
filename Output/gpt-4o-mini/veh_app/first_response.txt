Certainly! Below is a Python script that sets up a PyChrono simulation featuring a Gator vehicle, a rigid terrain, an interactive driver system, and a sensor manager with point lights and a camera. The script also includes a simulation loop that updates the various components at each timestep.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chrono_vehicle

# Initialize the PyChrono environment
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.001)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.001)

# Create a Chrono system
system = chrono.ChSystemNSC()

# Create a visualization window
application = chronoirr.ChIrrApp(system, "Gator Vehicle Simulation", chronoirr.dimension2du(800, 600))
application.SetSkyBox()
application.AddTypicalLights()
application.AddTypicalCamera(chrono.ChVectorD(0, 0, 5))

# Create a rigid terrain
terrain = chrono.ChBodyEasyBox(10, 0.1, 10, 1000, True, True)
terrain.SetPos(chrono.ChVectorD(0, -0.05, 0))
terrain.SetBodyFixed(True)
system.Add(terrain)

# Create the Gator vehicle
gator = chrono_vehicle.Gator()
gator.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.ChQuaternionD(1, 0, 0, 0)))
system.Add(gator)

# Set visualization types for vehicle parts
for part in gator.GetVehicleParts():
    part.SetVisualizationType(chrono_vehicle.VisualizationType.PRIMITIVES)

# Create an interactive driver system
driver = chrono_vehicle.ChDriverGator(gator)
gator.SetDriver(driver)

# Set up a sensor manager with point lights
sensor_manager = chrono_vehicle.ChSensorManager(gator)
point_light = chrono_vehicle.ChPointLight(chrono.ChVectorD(0, 1, 0), chrono.ChColor(1, 1, 1), 10)
sensor_manager.AddSensor(point_light)

# Attach a camera to the vehicle's chassis
camera = chronoirr.ChIrrCamera(gator.GetChassisBody(), chrono.ChVectorD(0, 1, -5), chrono.ChVectorD(0, 0, 0))
application.AddCamera(camera)

# Simulation loop
time_step = 0.01
while application.GetDevice().run():
    # Update the driver
    driver.Update(time_step)

    # Update the terrain and vehicle
    system.DoStepDynamics(time_step)

    # Update the sensor manager
    sensor_manager.Update()

    # Render the scene
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

# Clean up
application.Close()
```

### Explanation of the Code:
1. **Initialization**: The script initializes the PyChrono environment and creates a Chrono system.
2. **Visualization**: It sets up a visualization window using Irrlicht and adds a skybox, lights, and a camera.
3. **Rigid Terrain**: A rigid terrain is created as a box and added to the system.
4. **Gator Vehicle**: The Gator vehicle is initialized and added to the simulation.
5. **Visualization Types**: Each part of the vehicle is set to use primitive visualization.
6. **Driver System**: An interactive driver system is created for the Gator vehicle.
7. **Sensor Manager**: A sensor manager is set up with a point light and a camera attached to the vehicle's chassis.
8. **Simulation Loop**: The loop updates the driver, terrain, vehicle, and sensor manager at each timestep while rendering the scene.

Make sure to have the PyChrono library installed and properly configured in your Python environment to run this script. Adjust the parameters as necessary to fit your specific simulation needs.
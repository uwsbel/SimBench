To create a PyChrono simulation featuring an HMMWV vehicle with the specified parameters, we will follow the instructions step by step. Below is a Python script that initializes the PyChrono environment, sets up the vehicle, terrain, driver system, and integrates ROS for communication.

Make sure you have the necessary PyChrono and ROS packages installed in your environment before running this script.

```python
import pychrono.core as chrono
import pychrono.kinematics as chrono_kin
import pychrono.vehicle as chrono_vehicle
import pychrono.ros as chrono_ros

# Initialize the PyChrono environment
chrono.ChSystem.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))  # Set gravity

# Create the simulation system
system = chrono.ChSystemNSC()

# Create the HMMWV vehicle
hmmwv = chrono_vehicle.HMMWV('HMMWV')

# Set vehicle parameters
hmmwv.SetContactMethod(chrono.ChContactMethod.NSC)  # Set contact method
hmmwv.SetEngineType(chrono_vehicle.EngineType.SIMPLE)  # Set engine type
hmmwv.SetTireModel(chrono_vehicle.TireModelType.RIGID)  # Set tire model

# Initialize the vehicle
hmmwv.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.ChQuaternionD(1, 0, 0, 0)))

# Create terrain
terrain = chrono_vehicle.ChTerrain()
terrain.SetFriction(0.8)  # Set terrain friction
terrain.SetRestitution(0.1)  # Set terrain restitution

# Initialize the terrain
terrain.Initialize(system)

# Create driver system for vehicle control
driver = chrono_vehicle.ChDriver()
driver.SetVehicle(hmmwv)
driver.Initialize()

# Initialize ROS for communication
ros_manager = chrono_ros.ChROSManager()
ros_manager.Initialize()

# Register handlers for clock synchronization, driver inputs, and vehicle state
ros_manager.RegisterClockHandler()
ros_manager.RegisterDriverInputHandler(driver)
ros_manager.RegisterVehicleStateHandler(hmmwv)

# Simulation loop parameters
time_step = 0.01  # Time step for the simulation
end_time = 10.0   # Total simulation time
current_time = 0.0

# Simulation loop
while current_time < end_time:
    # Advance the simulation
    system.DoStepDynamics(time_step)
    
    # Update the ROS manager for data publishing
    ros_manager.Update(current_time)
    
    # Update current time
    current_time += time_step

# Finalize the simulation
ros_manager.Shutdown()
```

### Explanation of the Code:
1. **Initialization**: The script initializes the PyChrono environment and sets the gravity.
2. **Vehicle Setup**: An HMMWV vehicle is created with specified contact method, engine type, and tire model. The vehicle is then initialized at the origin.
3. **Terrain Setup**: A terrain object is created with defined friction and restitution values.
4. **Driver System**: A driver system is initialized to control the vehicle.
5. **ROS Integration**: The ROS manager is initialized, and handlers for clock synchronization, driver inputs, and vehicle state are registered.
6. **Simulation Loop**: The loop advances the simulation at each timestep, updating the ROS manager for data publishing.
7. **Shutdown**: After the simulation ends, the ROS manager is shut down.

### Note:
Make sure to adapt the parameters and methods according to your specific requirements and the version of PyChrono you are using. This script serves as a basic template to get you started with your simulation.
Below is a Python script that sets up a PyChrono simulation with a Viper rover on a rigid terrain, following the instructions provided. This script initializes the PyChrono environment, adds the necessary components, and implements a simulation loop with real-time visualization using Irrlicht.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the Chrono system
chrono.ChSystemNSC()

# Set gravity
gravity = chrono.ChVectorD(0, -9.81, 0)
chrono.ChSystemNSC.Set_G_acc(gravity)

# Create the ground body (rigid terrain)
ground = chrono.ChBody()
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
chrono.ChSystemNSC.Add(ground)

# Create a Viper rover (assuming a predefined Viper class exists)
viper_rover = Viper()  # Replace with actual initialization of the Viper rover
viper_rover.SetPos(chrono.ChVectorD(0, 0.5, 0))  # Set initial position above the ground
chrono.ChSystemNSC.Add(viper_rover)

# Initialize the driver for the Viper rover
driver = ViperDriver(viper_rover)  # Replace with actual driver initialization
chrono.ChSystemNSC.Add(driver)

# Set up Irrlicht visualization
application = chronoirr.ChIrrApp(chrono.ChSystemNSC, "Viper Rover Simulation", chronoirr.dimension2d(800, 600))
application.AddSkyBox()
application.AddCamera(chrono.ChVector3(0, 2, -5), chrono.ChVector3(0, 0, 0))
application.AddLight(chrono.ChVector3(0, 10, -10), chrono.ChVector3(1, 1, 1))

# Simulation parameters
time_step = 0.01  # Time step for the simulation
total_time = 10.0  # Total simulation time
steering_duration = 5.0  # Duration to change steering
initial_steering = 0.0  # Initial steering angle
final_steering = 30.0  # Final steering angle in degrees

# Simulation loop
current_time = 0.0
while current_time < total_time:
    # Update steering gradually
    if current_time <= steering_duration:
        steering_angle = initial_steering + (final_steering - initial_steering) * (current_time / steering_duration)
        driver.SetSteeringAngle(chrono.ChDegreeToRad(steering_angle))  # Set steering angle in radians

    # Perform simulation step
    chrono.ChSystemNSC.DoStepDynamics(time_step)

    # Render the scene
    application.DrawAll()
    application.Run()

    # Increment time
    current_time += time_step

# Cleanup and exit
application.Close()
```

### Notes:
1. **Viper and ViperDriver Classes**: The script assumes that there are predefined classes for the Viper rover and its driver. You will need to implement or import these classes based on your specific requirements.
2. **Steering Angle**: The steering angle is updated gradually over the specified duration. Adjust the `initial_steering` and `final_steering` values as needed.
3. **Irrlicht Visualization**: The script sets up a basic Irrlicht visualization with a skybox, camera, and lighting. You can customize these settings further based on your preferences.
4. **Chrono System**: Ensure that the Chrono library is properly installed and configured in your Python environment to run this script successfully.

Make sure to adapt the script as necessary to fit your specific implementation details and requirements.
Certainly! Below is a PyChrono simulation script that demonstrates the use of beam finite elements. The script initializes the PyChrono environment, sets up the physical system with beams and nodes, adds visualization, and runs the simulation loop using the Irrlicht engine for real-time rendering.

```python
import pychrono as chrono
import pychrono.fea as fea
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('path/to/chrono/data/')

# Create a physical system
system = chrono.ChSystemSMC()

# Create a mesh
mesh = fea.ChMesh()

# Define material properties for the beam
beam_material = fea.ChBeamSectionAdvanced()
beam_material.SetYoungModulus(210e9)  # Young's modulus in Pa
beam_material.SetGshearModulus(80.77e9)  # Shear modulus in Pa
beam_material.SetBeamRaleyghDamping(0.000)  # Raleygh damping
beam_material.SetDensity(7800)  # Density in kg/m^3
beam_material.SetAsRectangularSection(0.012, 0.025)  # Cross-section dimensions in meters

# Create nodes
node1 = fea.ChNodeFEAxyz(chrono.ChVectorD(0, 0, 0))
node2 = fea.ChNodeFEAxyz(chrono.ChVectorD(1, 0, 0))
node3 = fea.ChNodeFEAxyz(chrono.ChVectorD(2, 0, 0))

# Add nodes to the mesh
mesh.AddNode(node1)
mesh.AddNode(node2)
mesh.AddNode(node3)

# Create a beam element between node1 and node2
beam1 = fea.ChElementBeamEuler()
beam1.SetNodes(node1, node2)
beam1.SetSection(beam_material)

# Create a beam element between node2 and node3
beam2 = fea.ChElementBeamEuler()
beam2.SetNodes(node2, node3)
beam2.SetSection(beam_material)

# Add beam elements to the mesh
mesh.AddElement(beam1)
mesh.AddElement(beam2)

# Add the mesh to the system
system.Add(mesh)

# Add a visualization of the FEM mesh
visualization = fea.ChVisualizationFEAmesh(mesh)
visualization.SetFEMdataType(fea.ChVisualizationFEAmesh.E_PLOT_ELEM_BEAM_MZ)
visualization.SetColorscaleMinMax(-0.4, 0.4)
visualization.SetSmoothFaces(True)
visualization.SetWireframe(False)
mesh.AddAsset(visualization)

# Create the Irrlicht application for visualization
application = chronoirr.ChIrrApp(system, "Beam Finite Element Simulation", chronoirr.dimension2du(1024, 768))

# Add a logo, camera, and lights to the scene
application.AddLogo()
application.AddSkyBox()
application.AddTypicalLights()
application.AddCamera(chronoirr.vector3df(2, 2, -2))

# Bind all assets to the Irrlicht application
application.AssetBindAll()
application.AssetUpdateAll()

# Simulation loop
application.SetTimestep(0.01)
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()
```

### Explanation:
1. **Initialize PyChrono Environment and Core Components**:
   - Set the Chrono data path.
   - Create a physical system (`ChSystemSMC`).

2. **Add Physical Systems and Objects**:
   - Create a mesh (`ChMesh`).
   - Define material properties for the beam using `ChBeamSectionAdvanced`.
   - Create nodes (`ChNodeFEAxyz`) and add them to the mesh.
   - Create beam elements (`ChElementBeamEuler`) and set their nodes and section properties.
   - Add the beam elements to the mesh and the mesh to the system.

3. **Set Necessary Default Parameters**:
   - Add visualization to the mesh using `ChVisualizationFEAmesh`.
   - Create an Irrlicht application for real-time rendering.
   - Add typical scene elements like logo, skybox, lights, and camera.
   - Bind and update all assets.

4. **Run the Simulation Loop**:
   - Set the timestep for the simulation.
   - Run the simulation loop to render the scene and perform simulation steps.

Make sure to replace `'path/to/chrono/data/'` with the actual path to your Chrono data directory. This script should provide a good starting point for a beam finite element simulation using PyChrono and the Irrlicht engine for visualization.
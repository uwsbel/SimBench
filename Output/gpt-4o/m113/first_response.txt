Certainly! Below is a PyChrono simulation script based on the provided instructions. This script sets up an M113 vehicle, a rigid terrain, a driver system, and a real-time visualization using Irrlicht. It also includes a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep.

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import pychrono.utils as utils

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('/path/to/chrono/data/')
veh.SetDataPath('/path/to/chrono/data/vehicle/')

# Create the M113 vehicle system
vehicle = veh.M113()
vehicle.SetContactMethod(chrono.ChContactMethod_NSC)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1), chrono.QUNIT))
vehicle.SetPowertrainType(veh.PowertrainModelType_SIMPLE)
vehicle.SetDriveType(veh.DrivelineTypeTV_SIMPLE)
vehicle.SetBrakeType(veh.BrakeType_SIMPLE)
vehicle.SetTrackShoeType(veh.TrackShoeType_SINGLE_PIN)
vehicle.Initialize()

# Create the terrain system
terrain = veh.RigidTerrain(vehicle.GetSystem())
patch = terrain.AddPatch(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT),
                         chrono.ChVectorD(200, 200, 10))
patch.SetContactFrictionCoefficient(0.9)
patch.SetContactRestitutionCoefficient(0.01)
patch.SetContactMaterialProperties(2e7, 0.3)
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 200, 200)
terrain.Initialize()

# Create the driver system
driver = veh.ChIrrGuiDriver(vehicle.GetVehicle())
driver.SetSteeringDelta(0.04)
driver.SetThrottleDelta(0.04)
driver.SetBrakingDelta(0.04)

# Create the Irrlicht visualization system
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('M113 Vehicle Simulation')
vis.SetWindowSize(1280, 720)
vis.Initialize()
vis.AddLogo()
vis.AddSkyBox()
vis.AddTypicalLights()
vis.AddLightWithShadow(chrono.ChVectorD(60, 60, 100), chrono.ChVectorD(0, 0, 0), 250, 130, 250, 90)
vis.AttachVehicle(vehicle.GetVehicle())

# Simulation loop
step_size = 1e-3
while vis.Run():
    # Synchronize the systems
    time = vehicle.GetSystem().GetChTime()
    driver_inputs = driver.GetInputs()
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)

    # Advance the systems
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Render the scene
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
```

### Explanation:
1. **Initialization**:
   - The script initializes the PyChrono environment and sets the data paths.
   - An M113 vehicle system is created and initialized with specific parameters.

2. **Terrain Setup**:
   - A rigid terrain is created with defined friction and restitution coefficients.
   - The terrain patch is configured with a texture and material properties.

3. **Driver System**:
   - A driver system is initialized to control the vehicle, with specific delta values for steering, throttle, and braking.

4. **Visualization**:
   - The Irrlicht visualization system is set up with window settings, lighting, and camera settings.
   - The vehicle is attached to the visualization system.

5. **Simulation Loop**:
   - The loop synchronizes and advances the vehicle, terrain, driver, and visualization systems at each timestep.
   - The scene is rendered in real-time.

Make sure to replace `'/path/to/chrono/data/'` with the actual path to your Chrono data directory. This script should provide a comprehensive simulation environment for the M113 vehicle with the specified initial conditions and visualization settings.
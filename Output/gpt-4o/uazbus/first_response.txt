Certainly! Below is a PyChrono simulation script based on the provided instructions. This script sets up a UAZBUS vehicle, a rigid terrain, a driver system, and a real-time visualization using Irrlicht. It also includes a simulation loop that synchronizes and advances all components at each timestep.

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath("path/to/chrono/data/")

# Create the UAZBUS vehicle
vehicle = veh.UAZBUS()
vehicle.SetContactMethod(chrono.ChContactMethod_SMC)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1), chrono.QUNIT))
vehicle.SetPowertrainType(veh.PowertrainModelType_SHAFTS)
vehicle.SetDriveType(veh.DrivelineTypeWV_AWD)
vehicle.SetTireType(veh.TireModelType_TMEASY)
vehicle.SetTireStepSize(1e-3)
vehicle.Initialize()

# Create the terrain
terrain = veh.RigidTerrain(vehicle.GetSystem())
patch = terrain.AddPatch(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT),
                         chrono.ChVectorD(200, 200, 1), True, True)
patch.SetContactFrictionCoefficient(0.9)
patch.SetContactRestitutionCoefficient(0.01)
patch.SetContactMaterialProperties(2e7, 0.3)
patch.SetTexture(chrono.GetChronoDataFile("terrain/textures/tile4.jpg"), 200, 200)
terrain.Initialize()

# Create the driver system
driver = veh.ChPathFollowerDriver(vehicle.GetVehicle(), "path/to/steering_controller.json",
                                  "path/to/speed_controller.json", True)
driver.Initialize()

# Create the Irrlicht visualization
vis = veh.ChWheeledVehicleIrrApp(vehicle.GetVehicle(), "UAZBUS Demo")
vis.SetSkyBox()
vis.AddTypicalLights()
vis.AddTypicalCamera(chrono.ChVectorD(0, 0, 1.75))
vis.SetChaseCamera(chrono.ChVectorD(0.0, 0.0, 1.75), 6.0, 0.5)
vis.SetTimestep(1e-3)
vis.AssetBindAll()
vis.AssetUpdateAll()

# Simulation loop
step_size = 1e-3
while vis.Run():
    time = vehicle.GetSystem().GetChTime()

    # Synchronize the systems
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver.GetInputs(), terrain)
    vis.Synchronize(time, driver.GetInputs())

    # Advance the systems
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Render the scene
    vis.BeginScene()
    vis.DrawAll()
    vis.EndScene()
```

### Explanation:
1. **Initialization**:
   - The PyChrono environment is initialized with the necessary data path.
   - The UAZBUS vehicle is created and initialized with specified parameters.
   - A rigid terrain is created with defined friction and restitution properties.
   - A driver system is set up to control the vehicle.

2. **Visualization**:
   - The Irrlicht visualization system is initialized with camera settings and lighting.

3. **Simulation Loop**:
   - The loop synchronizes and advances the vehicle, terrain, driver, and visualization system at each timestep.
   - The scene is rendered in real-time.

Make sure to replace `"path/to/chrono/data/"`, `"path/to/steering_controller.json"`, and `"path/to/speed_controller.json"` with the actual paths to your data files.
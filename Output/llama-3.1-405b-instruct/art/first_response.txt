Here's a sample PyChrono script that simulates an ARTcar vehicle on a rigid terrain using Irrlicht for visualization:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the ground body
ground = chrono.ChBodyEasyBox(my_system,  # parent system
                              100, 100, 2,  # dimensions
                              1000,  # density
                              True,  # visualization?
                              True,  # collide?
                              chrono.ChMaterialSurfaceNSC())  # material
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, -2, 0))

# Create the vehicle body
vehicle = chrono.ChPart(chrono.ChBodyEasyBox(my_system,  # parent system
                                             4, 2, 1,  # dimensions
                                             500,  # density
                                             True,  # visualization?
                                             True,  # collide?
                                             chrono.ChMaterialSurfaceNSC()))  # material
vehicle.SetPos(chrono.ChVectorD(0, 1, 0))

# Create the vehicle's wheels
wheels = []
for i in range(4):
    wheel = chrono.ChPart(chrono.ChBodyEasyCylinder(my_system,  # parent system
                                                    0.5,  # radius
                                                    0.2,  # height
                                                    100,  # density
                                                    True,  # visualization?
                                                    True,  # collide?
                                                    chrono.ChMaterialSurfaceNSC()))  # material
    wheel.SetPos(chrono.ChVectorD(-1.5 + i * 1.0, -0.5, 0))
    wheels.append(wheel)

# Create the vehicle's suspension
suspension = []
for i in range(4):
    spring = chrono.ChLinkSpring()
    spring.Initialize(vehicle, wheels[i], False, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0), True)
    spring.SetSpringCoefficient(10000)
    spring.SetDampingCoefficient(50)
    my_system.AddLink(spring)
    suspension.append(spring)

# Create the RigidTerrain
terrain = chrono.ChRigidTerrain(my_system)
terrain.SetSize(chrono.ChVectorD(100, 100, 2))
terrain.SetPos(chrono.ChVectorD(0, -2, 0))
terrain.SetMaterialSurface(chrono.ChMaterialSurfaceNSC())
terrain.SetTexture(chrono.ChTexture("terrain_texture.png"))

# Create the driver system
driver = chrono.ChIrrNodeAsset(my_system)
driver.SetChassisBody(vehicle)
driver.SetWheels(wheels)
driver.SetSteeringType(chrono.ChDriver.STEERING_TYPE_TARGET)
driver.SetThrottleType(chrono.ChDriver.THROTTLE_TYPE_TARGET)
driver.SetBrakingType(chrono.ChDriver.BRAKING_TYPE_TARGET)

# Create the Irrlicht application
myapplication = chronoirr.ChIrrApp(my_system, 'PyChrono example', chronoirr.dimension2du(800, 600))

# Set up the simulation loop
myapplication.AddTypicalSky()
myapplication.AddTypicalCamera(chronoirr.vector3df(0, 0, -10))
myapplication.AddTypicalLights()

while myapplication.GetDevice().run():
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.DoStep()
    myapplication.EndScene()

# Clean up
del myapplication
del my_system
```

This script creates a simulation of an ARTcar vehicle on a rigid terrain using Irrlicht for visualization. The vehicle is initialized with specific parameters such as location, orientation, contact method, and visualization type. The RigidTerrain is set up with defined dimensions, and a custom texture is added. An interactive driver system is incorporated to control the vehicle's steering, throttle, and braking. The simulation loop updates the vehicle dynamics and visualization in real time, displaying the simulation at 50 frames per second.

Note that you'll need to replace `'/path/to/chrono/data/'` with the actual path to the Chrono data directory on your system. Additionally, you'll need to create a `terrain_texture.png` file in the same directory as the script for the terrain texture to be applied correctly.
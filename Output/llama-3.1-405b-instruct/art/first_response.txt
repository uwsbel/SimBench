Here's a sample PyChrono script that simulates an ARTcar vehicle on a rigid terrain using Irrlicht for visualization:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
application = chronoirr.ChIrrApp(my_system, 'PyChrono example', chronoirr.dimension2du(800, 600))

# Set up the simulation scene
application.AddTypicalSky()
application.AddTypicalCamera(chronoirr.vector3df(0, 0, 1))
application.AddTypicalLights()

# Create the vehicle
vehicle = chrono.ChARTcar()
vehicle.SetPosition(chrono.ChVectorD(0, 0, 0.5))
vehicle.SetOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
vehicle.SetContactMethod(chrono.ChContactMethod_SMC)
vehicle.SetVisualizationType(chrono.ChVisualizationType_ARTWHEEL)
my_system.Add(vehicle)

# Create the terrain
terrain = chrono.ChRigidTerrain()
terrain.SetPosition(chrono.ChVectorD(0, 0, -0.5))
terrain.SetDimensions(chrono.ChVectorD(10, 10, 0.1))
terrain.SetTexture(chrono.ChTexture('terrain_texture.png'))
my_system.Add(terrain)

# Create an interactive driver system
driver = chrono.ChIrrNodeDriver(application.GetDevice())
driver.SetSteeringDelta(0.01)
driver.SetThrottleDelta(0.01)
driver.SetBrakingDelta(0.01)
vehicle.SetDriver(driver)

# Simulation loop
application.AssetBindAll()
application.AssetUpdateAll()

while application.GetDevice().run():
    # Update the vehicle dynamics
    my_system.DoStepDynamics(1e-3)

    # Update the visualization
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

    # Limit the simulation to 50 frames per second
    application.GetDevice().setSleep(1e-3, 1e-3)
```

This script initializes a PyChrono environment and creates a Chrono::Engine physical system. It then sets up an Irrlicht visualization system and creates a simulation scene with a typical sky, camera, and lights.

The script creates an ARTcar vehicle with specific parameters such as location, orientation, contact method, and visualization type. It also creates a RigidTerrain with defined dimensions and adds a custom texture.

An interactive driver system is created to control the vehicle's steering, throttle, and braking. The simulation loop updates the vehicle dynamics and visualization in real time, displaying the simulation at 50 frames per second.

Note that you'll need to replace `'/path/to/chrono/data/'` with the actual path to the Chrono data directory on your system. Additionally, you'll need to create a `terrain_texture.png` file in the same directory as the script for the terrain texture to load correctly.
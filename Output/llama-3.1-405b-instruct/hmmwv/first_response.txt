Here is a PyChrono simulation script based on the provided instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
sys = chrono.ChSystemNSC()

# Create the flat rigid terrain
terrain = veh.RigidTerrain(sys)
terrain.SetContactFrictionCoefficient(0.8)
terrain.SetContactRestitutionCoefficient(0.5)
terrain.SetContactMaterialProperties(chrono.ChMaterialSurfaceNSC.SMC_RUBBER, chrono.ChMaterialSurfaceNSC.SMC_CONCRETE)
terrain.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.ChQuaternionD(1, 0, 0, 0)), 1024, 1024, 20, 20)

# Create the HMMWV vehicle
vehicle = veh.WheeledVehicle(sys, veh.WheeledVehicle.WVE_HMMWV)
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 1, 0), chrono.ChQuaternionD(1, 0, 0, 0)))
vehicle.SetContactMethod(chrono.ChMaterialSurfaceNSC.SMC_NODE_FRICTION)
vehicle.SetTireType(veh.TMEASY)
vehicle.SetTireStepSize(0.01)
vehicle.SetVisualizationType(veh.VisualizationType_PRIMITIVES)

# Configure the interactive driver system
driver = veh.ChIrrNodeDriver(vehicle)
driver.SetSteeringDelta(0.02)
driver.SetThrottleDelta(0.02)
driver.SetBrakingDelta(0.02)

# Create the Irrlicht application
app = chronoirr.ChIrrApp(sys, 'HMMWV Simulation', chronoirr.dimension2du(800, 600))
app.AddTypicalSky()
app.AddTypicalLights()
app.AddCamera(chrono.ChVectorD(0, 2, -5))
app.AssetBindAll()
app.AssetUpdateAll()

# Simulation loop
while app.GetDevice().run():
    # Update the vehicle dynamics
    sys.DoStepDynamics(1e-3)

    # Update the driver system
    driver.Synchronize()

    # Render the scene
    app.BeginScene(True, True, chronoirr.SColor(255, 140, 140, 140))
    app.DrawAll()
    app.EndScene()

    # Limit the simulation to 50 frames per second
    app.GetDevice().getTimer().setSpeed(50)
```

This script creates a PyChrono simulation of a full HMMWV on a flat rigid terrain using Irrlicht for visualization. The vehicle is initialized with specific parameters such as location, orientation, contact method, and TMEASY tire model, and uses primitive visualization for the vehicle components. The script also sets up a RigidTerrain with defined dimensions and texture, and configures an interactive driver system for steering, throttle, and braking. The simulation loop runs in real time at 50 frames per second, updating the vehicle dynamics and rendering the scene.
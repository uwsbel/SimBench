Here's a sample code that adheres to the instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
sys = chrono.ChSystemNSC()

# Create the ground body
ground = chrono.ChBodyEasyBox(sys,  # parent system
                              100, 100, 2,  # dimensions
                              1000,  # density
                              True,  # contact geometry
                              True)  # enable contact
sys.Add(ground)
ground.SetBodyFixed(True)

# Create a custom mesh terrain
terrain = chrono.ChBodyEasyMesh(sys,  # parent system
                                '/path/to/Highway_col.obj',  # collision mesh
                                '/path/to/Highway_vis.obj',  # visual mesh
                                0.01,  # mesh scale
                                1000,  # density
                                True,  # contact geometry
                                True,  # enable contact
                                0.1)  # friction
sys.Add(terrain)
terrain.SetBodyFixed(True)

# Create a HMMWV vehicle
vehicle = chrono.ChPart(sys,  # parent system
                        '/path/to/HMMWV.json')  # vehicle data file
sys.Add(vehicle)

# Initialize vehicle parameters
vehicle.SetChassisPosition(chrono.ChVectorD(0, 0, 1.5))  # location
vehicle.SetChassisOrientation(chrono.ChQuaternionD(1, 0, 0, 0))  # orientation
vehicle.SetContactMethod(chrono.ChContactMethod_SMC)  # contact method
vehicle.SetTireModel(chrono.ChTireModel_TMEASY)  # tire model
vehicle.SetTireVisualization(chrono.ChTireVisualization_MESH)  # tire visualization
vehicle.SetChassisVisualization(chrono.ChVisualizationMode_MESH)  # chassis visualization

# Create an interactive driver system
driver = chrono.ChIrrNodeDriver(vehicle)
sys.Add(driver)

# Create an Irrlicht application
app = chronoirr.ChIrrApp(sys,  # physical system
                         'HMMWV Simulation',  # window title
                         chronoirr.dimension2du(800, 600))  # window size

# Configure the simulation loop
app.SetTimestep(0.02)  # time step
app.SetTryRealtime(True)  # run in real time
app.SetVideoframe(50)  # frames per second

# Run the simulation loop
while app.GetDevice().run():
    # Update vehicle dynamics
    sys.DoStepDynamics(app.GetTimestep())

    # Render the scene
    app.BeginScene(True, True, chronoirr.SColor(255, 140, 140, 140))
    app.DrawAll()
    app.EndScene()
```

This code initializes a PyChrono environment, creates a custom mesh terrain, and adds a HMMWV vehicle with specific parameters. It also configures an interactive driver system and sets up an Irrlicht application for visualization. The simulation loop runs in real time at 50 frames per second, updating vehicle dynamics and rendering the scene.

Note that you'll need to replace the file paths (`/path/to/chrono/data/`, `/path/to/Highway_col.obj`, `/path/to/Highway_vis.obj`, and `/path/to/HMMWV.json`) with the actual paths to your files. Additionally, you may need to adjust the vehicle parameters and simulation settings to suit your specific needs.
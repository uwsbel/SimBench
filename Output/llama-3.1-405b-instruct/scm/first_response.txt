Here is a PyChrono simulation script based on the provided instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronoveh
import pychrono.scm as chronoscm

# Initialize the PyChrono environment
chrono.SetChronoDataPath("C:/path/to/chrono/data/")

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the SCM deformable terrain
terrain = chronoscm.ChSoilSCM()
terrain.SetSoilParameters(chronoscm.ChSoilParameters(
    0.2,  # density
    0.01,  # friction
    0.1,  # cohesion
    30,  # elastic modulus
    0.3   # poisson ratio
))
terrain.SetMovingPatchEnabled(True)
my_system.Add(terrain)

# Create the HMMWV vehicle
vehicle = chronoveh.ChPart_HMMWV()
vehicle.SetChassisPosition(chrono.ChVectorD(0, 0.5, 0))
vehicle.SetChassisOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
vehicle.SetTireModel(chronoveh.ChTireModelRigid())
vehicle.SetTireVisualization(chronoveh.ChTireVisualizationType_MESH)
my_system.Add(vehicle)

# Create an interactive driver system
driver = chronoveh.ChIrrNodeDriver()
driver.Initialize(vehicle)
driver.SetSteeringIncrement(0.01)
driver.SetThrottleIncrement(0.01)
driver.SetBrakingIncrement(0.01)

# Create an Irrlicht application
app = chronoirr.ChIrrApp(my_system, "HMMWV on SCM Deformable Terrain", chronoirr.dimension2du(800, 600))
app.AddTypicalSky()
app.AddTypicalLights()
app.AddCamera(chrono.ChVectorD(0, 1.5, -5))
app.SetSymbolscale(0.02)
app.SetShowInfos(True)

# Configure the simulation and visualization
app.AssetBindAll()
app.AssetUpdateAll()
app.AddShadowAll()
app.SetVideoframe(50)

# Run the simulation
while app.GetDevice().run():
    # Update the vehicle dynamics
    my_system.DoStepDynamics(1e-3)
    
    # Update the driver input
    driver.Synchronize()
    
    # Render the scene
    app.BeginScene()
    app.DrawAll()
    app.EndScene()
    
    # Visualize sinkage with false color plotting
    terrain.VisualizeSinkage(app.GetVideoDriver(), app.GetSceneManager())
```

This script creates a PyChrono simulation of a full HMMWV on SCM deformable terrain using Irrlicht for visualization. The vehicle is initialized with specific parameters, including location, orientation, and a rigid tire model, and mesh visualization is applied to all vehicle components. The SCM terrain is configured with custom soil parameters, and a moving patch feature is enabled to dynamically follow the vehicle chassis. The terrain visualizes sinkage with false color plotting. An interactive driver system is set up to control steering, throttle, and braking, and the simulation runs in real time, updating vehicle dynamics and rendering the scene at 50 frames per second.
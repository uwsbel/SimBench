Here's a sample PyChrono script that simulates a simple crank-slider mechanism:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Set the simulation parameters
chrono.SetChronoDataPath('/path/to/chrono/data/')  # Set the Chrono data path

# Create the simulation system
sys = chrono.ChSystemNSC()

# Create the floor (truss)
floor = chrono.ChBodyEasyBox(sys,  # Parent system
                             10, 10, 1,  # Dimensions (x, y, z)
                             1000,  # Density
                             True,  # Visualization
                             True)  # Collision
sys.Add(floor)

# Create the crankshaft
crankshaft = chrono.ChBodyEasyCylinder(sys,  # Parent system
                                       1,  # Radius
                                       5,  # Height
                                       1000,  # Density
                                       True,  # Visualization
                                       True)  # Collision
crankshaft.SetPos(chrono.ChVectorD(0, 0, 3))  # Set the initial position
sys.Add(crankshaft)

# Create the connecting rod
connecting_rod = chrono.ChBodyEasyBox(sys,  # Parent system
                                      2, 0.5, 5,  # Dimensions (x, y, z)
                                      1000,  # Density
                                      True,  # Visualization
                                      True)  # Collision
connecting_rod.SetPos(chrono.ChVectorD(3, 0, 3))  # Set the initial position
sys.Add(connecting_rod)

# Create the piston
piston = chrono.ChBodyEasyBox(sys,  # Parent system
                              1, 1, 2,  # Dimensions (x, y, z)
                              1000,  # Density
                              True,  # Visualization
                              True)  # Collision
piston.SetPos(chrono.ChVectorD(6, 0, 3))  # Set the initial position
sys.Add(piston)

# Create joints
revolute_joint = chrono.ChLinkRevolute()
revolute_joint.Initialize(crankshaft,  # Body A
                          connecting_rod,  # Body B
                          chrono.ChFrameD(chrono.ChVectorD(0, 0, 3)))  # Frame
sys.Add(revolute_joint)

prismatic_joint = chrono.ChLinkPrismatic()
prismatic_joint.Initialize(connecting_rod,  # Body A
                           piston,  # Body B
                           chrono.ChFrameD(chrono.ChVectorD(3, 0, 3)),  # Frame
                           chrono.ChVectorD(1, 0, 0))  # Guide
sys.Add(prismatic_joint)

# Create a motor to drive the crankshaft
motor = chrono.ChLinkMotorRotationSpeed()
motor.Initialize(crankshaft,  # Body
                 chrono.ChFrameD(chrono.ChVectorD(0, 0, 3)))  # Frame
motor.SetMotorFunction(chrono.ChFunction_Const(chrono.CH_C_PI / 2))  # Set the angular speed
sys.Add(motor)

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(sys)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("Crank-Slider Mechanism")
vis.Initialize()
vis.AddCamera(chrono.ChVectorD(10, 10, 10),  # Position
              chrono.ChVectorD(0, 0, 0))  # Target
vis.AddLight(chrono.ChVectorD(10, 10, 10),  # Position
             chrono.ChVectorD(0, 0, 0),  # Direction
             100,  # Power
             chrono.ChColor(1, 1, 1))  # Color
vis.AddSkyBox()
vis.AddLogo()
vis.AddTypicalLights()

# Simulate the system
while vis.Run():
    sys.DoStepDynamics(0.01)  # Simulate for 0.01 seconds
    vis.BeginScene()
    vis.DrawAll()
    vis.EndScene()
```

This script creates a simple crank-slider mechanism with a floor, crankshaft, connecting rod, and piston. The crankshaft is driven by a motor at a constant angular speed, causing the connecting rod and piston to move. The simulation is visualized using the Irrlicht system with a customizable camera, lighting, and additional visual elements.

Note that you'll need to replace `'/path/to/chrono/data/'` with the actual path to the Chrono data directory on your system.
Here's a sample script that follows the instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a ChronoEngine physical system
sys = chrono.ChSystemNSC()

# Create a mesh grid for the tablecloth
num_nodes_x = 20
num_nodes_y = 20
node_mass = 0.1
node_radius = 0.01
mesh_size_x = 1.0
mesh_size_y = 1.0

nodes = []
for i in range(num_nodes_x):
    for j in range(num_nodes_y):
        node = chrono.ChBodyEasyMesh(sys)
        node.SetPos(chrono.ChVectorD(i * mesh_size_x / (num_nodes_x - 1), j * mesh_size_y / (num_nodes_y - 1), 0))
        node.SetMass(node_mass)
        node.SetInertiaXX(chrono.ChVectorD(0.1, 0.1, 0.1))
        nodes.append(node)

# Create shell elements for the tablecloth
elements = []
for i in range(num_nodes_x - 1):
    for j in range(num_nodes_y - 1):
        node1 = nodes[i * num_nodes_y + j]
        node2 = nodes[(i + 1) * num_nodes_y + j]
        node3 = nodes[(i + 1) * num_nodes_y + j + 1]
        node4 = nodes[i * num_nodes_y + j + 1]
        element = chrono.ChElementShellKirchhoff(sys)
        element.SetNodes(node1, node2, node3, node4)
        element.SetMaterial(chrono.ChMaterialShellKirchhoff(sys))
        element.SetThickness(0.01)
        elements.append(element)

# Add the tablecloth to the system
for node in nodes:
    sys.Add(node)
for element in elements:
    sys.Add(element)

# Set up the Irrlicht visualization system
application = chronoirr.ChIrrApp(sys, 'Tablecloth Folding', chronoirr.dimension2du(800, 600))
application.AddTypicalSky()
application.AddTypicalCamera(chronoirr.vector3df(0, 0, 1))
application.AddLightWithShadow(chronoirr.vector3df(2, 4, 2), chronoirr.vector3df(0, 0, 0), 3, 2, 10, 120)

# Set the solver
solver = chrono.ChSolverPardisoMKL()
sys.SetSolver(solver)

# Set the simulation parameters
sys.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
sys.SetMaxItersSolverSpeed(100)
sys.SetMaxItersSolverStab(100)

# Run the simulation
application.AssetBindAll()
application.AssetUpdateAll()
application.Simulate(0.01, 10)

# Exit the simulation
application.GetDevice().closeDevice()
```

This script creates a PyChrono simulation of a tablecloth folding using shell elements. It initializes the PyChrono environment, creates a mesh grid for the tablecloth, adds nodes and elements to the system, sets up an Irrlicht visualization system, and uses the PardisoMKL solver to efficiently handle the simulation's dynamics. The simulation parameters are set to model a realistic folding scenario. The script then runs the simulation and exits when complete.
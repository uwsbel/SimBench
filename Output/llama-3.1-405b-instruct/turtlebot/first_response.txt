Here's a sample PyChrono simulation script based on the provided instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the Chrono system
chrono.SetChronoDataPath('/path/to/chrono/data/')
system = chrono.ChSystemNSC()

# Set the gravity
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the ground body
ground = chrono.ChBodyEasyBox(system,  # parent system
                              10, 10, 1,  # dimensions (x, y, z)
                              1000,  # density
                              True,  # visualization
                              True,  # collision
                              chrono.ChVectorD(0, -1, 0),  # position
                              chrono.ChQuaternionD(1, 0, 0, 0))  # rotation

# Create the Turtlebot robot
turtlebot = chrono.ChBodyEasyBox(system,  # parent system
                                 0.2, 0.2, 0.1,  # dimensions (x, y, z)
                                 100,  # density
                                 True,  # visualization
                                 True,  # collision
                                 chrono.ChVectorD(0, 0.1, 0),  # position
                                 chrono.ChQuaternionD(1, 0, 0, 0))  # rotation

# Initialize the motors
motor_l = chrono.ChLinkMotorRotationSpeed(turtlebot,  # body
                                          chrono.ChFrameD(chrono.ChVectorD(-0.05, 0, 0),  # position
                                                          chrono.ChQuaternionD(1, 0, 0, 0)),  # rotation
                                          0.1)  # speed
motor_r = chrono.ChLinkMotorRotationSpeed(turtlebot,  # body
                                          chrono.ChFrameD(chrono.ChVectorD(0.05, 0, 0),  # position
                                                          chrono.ChQuaternionD(1, 0, 0, 0)),  # rotation
                                          0.1)  # speed

# Add the motors to the system
system.Add(motor_l)
system.Add(motor_r)

# Create the Irrlicht visualization
application = chronoirr.ChIrrApp(system,  # system
                                 'Turtlebot Simulation',  # title
                                 chronoirr.dimension2du(800, 600))  # window size

# Set the camera settings
application.AddCamera(chronoirr.vector3df(0, 0, 1),  # position
                      chronoirr.vector3df(0, 0, 0))  # target

# Set the lighting settings
application.AddLight(chronoirr.vector3df(2, 2, 2),  # position
                     chronoirr.vector3df(0, 0, 0),  # target
                     3,  # radius
                     0.5,  # red
                     0.5,  # green
                     0.5)  # blue

# Simulation loop
application.AssetBindAll()
application.AssetUpdateAll()

time = 0
while application.GetDevice().run():
    # Update the motors
    if time < 5:
        motor_l.SetMotorFunction(chrono.ChFunction_Ramp(0, 1))
        motor_r.SetMotorFunction(chrono.ChFunction_Ramp(0, 1))
    elif time < 10:
        motor_l.SetMotorFunction(chrono.ChFunction_Ramp(-1, 0))
        motor_r.SetMotorFunction(chrono.ChFunction_Ramp(1, 0))
    else:
        motor_l.SetMotorFunction(chrono.ChFunction_Ramp(0, -1))
        motor_r.SetMotorFunction(chrono.ChFunction_Ramp(0, -1))

    # Update the simulation
    application.DoStep()
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

    # Update the time
    time += application.GetStepSize()

# Close the simulation
application.GetDevice().closeDevice()
```

This script creates a PyChrono simulation with a Turtlebot robot on a rigid terrain. It sets up the Chrono system with gravity and a ground body, then initializes the Turtlebot with a specific position and orientation. The script also creates a real-time visualization using Irrlicht with camera settings and lighting. The simulation loop updates the motors to control left and right turns at specified times, updating and rendering the robot at each timestep.
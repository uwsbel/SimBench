Here's a Python script that initializes a PyChrono environment, sets up a physical system with beam finite elements, and runs a simulation using the Irrlicht engine for real-time rendering:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.fea as fea

# Create the simulation system and set the length unit
mysystem = chrono.ChSystemNSC()
mysystem.SetLength(1.0)

# Create the Irrlicht visualization (for 3D rendering with fast refresh)
vis = chronoirr.ChVisualSystemIrrlicht()
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("PyChrono Beam Finite Elements Simulation")
vis.SetCamera(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0))

# Create a mesh composed of beam finite elements
beam_mesh = fea.ChBeamSectionEuler()
beam_mesh.SetYoungModulus(2e11)  # Young's modulus in Pa
beam_mesh.SetArea(0.01)  # Cross-sectional area in m^2
beam_mesh.SetIyy(1e-4)  # Moment of inertia about the y-axis in m^4
beam_mesh.SetIzz(1e-4)  # Moment of inertia about the z-axis in m^4
beam_mesh.SetJ(1e-5)  # Torsional moment of inertia in m^4
beam_mesh.SetDensity(7850)  # Density in kg/m^3

# Create a beam finite element
beam = fea.ChBeamEuler()
beam.SetSection(beam_mesh)
beam.SetNodes(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(1, 0, 0))

# Add the beam to the physical system
mysystem.Add(beam)

# Set the initial conditions
beam.SetInitialVelocity(chrono.ChVectorD(0, 0, 0))
beam.SetInitialAcceleration(chrono.ChVectorD(0, 0, 0))

# Set the time-stepping parameters
mysystem.SetTimestep(0.01)
mysystem.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)

# Create the Irrlicht visualization scene
vis.AddSkyBox()
vis.AddTypicalLights()
vis.AddCamera(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0))

# Add the beam to the visualization scene
vis.AddMesh(beam)

# Run the simulation loop
while vis.Run():
    mysystem.DoStepDynamics(mysystem.GetTimestep())
    vis.Render()
```

This script initializes a PyChrono environment, sets up a physical system with a beam finite element, and runs a simulation using the Irrlicht engine for real-time rendering. The beam is defined with specific properties, such as Young's modulus, cross-sectional area, and density. The simulation loop runs until the user closes the visualization window.

Note that this script assumes that you have PyChrono and the Irrlicht engine installed on your system. If you haven't installed PyChrono, you can do so by following the instructions on the PyChrono GitHub page.
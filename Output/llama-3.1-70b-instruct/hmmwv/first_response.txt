Here is the Python code that implements the PyChrono simulation based on the provided instructions:
```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('./data/')
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization
visualizer = chronoirr.ChVisualSystemIrrlicht(system)
visualizer.SetWindowSize(800, 600)
visualizer.SetWindowTitle('HMMWV Simulation')

# Create the vehicle
hmmwv = veh.HMMWV(system)
hmmwv.SetLocation(chrono.ChVectorD(0, 0, 0))
hmmwv.SetRotation(chrono.Q_from_AngX(chrono.CH_C_PI_2))
hmmwv.SetContactMethod(chrono.ChContactMethod_NSC)
hmmwv.SetTireModel(chrono.TireModelType.TMEASY)
hmmwv.SetVisualizationType(chrono.VisualizationType.PRIMITIVES)

# Create the terrain
terrain = chrono.ChBodyEasyRigid(system)
terrain.SetName('Terrain')
terrain.SetMass(1000)
terrain.SetInertia(chrono.ChVectorD(1, 1, 1))
terrain.SetMaterial(chrono.ChMaterialSurfaceNSC())
terrain.SetCollide(True)
terrain.SetBodyFixed(True)
terrain.SetPos(chrono.ChVectorD(0, -0.5, 0))
terrain.SetRot(chrono.Q_from_AngX(chrono.CH_C_PI_2))
terrain.SetBoxDimensions(chrono.ChVectorD(10, 1, 10))
terrain.SetBoxTexture(chrono.ChTexture('data/textures/concrete.jpg'))

# Create the driver system
driver = veh.ChIrrlichtDriver(hmmwv)
driver.SetSteeringMode(chrono.SteeringMode.TORQUE)
driver.SetThrottleMode(chrono.ThrottleMode.TORQUE)
driver.SetBrakingMode(chrono.BrakingMode.TORQUE)
driver.SetSteeringTorque(100)
driver.SetThrottleTorque(1000)
driver.SetBrakingTorque(1000)

# Set up the simulation loop
stepping = chrono.ChTimestepperHHT(system)
stepping.SetStepSize(0.01)
stepping.SetMaxIters(100)

while visualizer.Run():
    system.DoStepDynamics(stepping.GetStepSize())
    visualizer.BeginScene()
    visualizer.DrawAll()
    visualizer.EndScene()
    chrono.ChUtils::Sleep(0.02)  # 50 Hz
```
This code initializes the PyChrono environment, creates the HMMWV vehicle with the specified parameters, sets up the rigid terrain, and configures the interactive driver system. The simulation loop runs in real-time at 50 frames per second, updating the vehicle dynamics and rendering the scene using Irrlicht.
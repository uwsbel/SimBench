{
    "round_name": "second",
    "prediction": "\"\"\"\nPyChrono example of a spring-damper system with custom force functor.\n\"\"\"\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# Custom force functor for spring force calculation\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self, spring_coef, damping_coef):\n        super().__init__()\n        self.spring_coef = spring_coef\n        self.damping_coef = damping_coef\n\n    def Evaluate(self, time, pos, vel, F):\n        # Calculate spring force using custom parameters\n        F.Set(chrono.ChVector3d(0, -self.spring_coef * pos.y - self.damping_coef * vel.y, 0))\n\n# Simulation parameters\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n# Create the simulation system\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\n# Create the ground body\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\n# Add visual shapes to the ground\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFrameD(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFrameD(chrono.ChVector3d(1, 0, 0)))\n\n# Create body 1\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 1\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create spring 1 between body 1 and ground using direct spring and damping coefficients\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Add visual shape to spring 1\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create body 2\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 2\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0.6, 0))\nbody_2.AddVisualShape(box_2)\n\n# Create spring 2 between body 2 and ground using custom force functor\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nmy_spring_force = MySpringForce(spring_coef, damping_coef)\nspring_2.SetForceFunctor(my_spring_force)\nsys.AddLink(spring_2)\n\n# Add visual shape to spring 2\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\n# Simulation loop\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)",
    "reference_code": "# Simple example demonstrating the use of ChLinkTSDA.\n#\n# Two bodies, connected with identical (but modeled differently) spring-dampers\n# are created side by side.\n#\n# Recall that Irrlicht uses a left-hand frame, so everything is rendered with\n# left and right flipped.\n#\n# =============================================================================\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# =============================================================================\n\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self):\n        super(MySpringForce, self).__init__()\n\n    def evaluate(self,  #\n                 time,  # current time\n                 rest_length,  # undeformed length\n                 length,  # current length\n                 vel,  # current velocity (positive when extending)\n                 link):  # associated link\n        force = -spring_coef * (length - rest_length) - damping_coef * vel\n        return force\n\n\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFramed(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFramed(chrono.ChVector3d(1, 0, 0)))\n\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create the spring between body_1 and ground. The spring end points are\n# specified in the body relative frames.\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Attach a visualization asset.\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create a body suspended through a ChLinkTSDA (custom force functor)\n# -------------------------------------------------------------------\n\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0, 0.6))\nbody_2.AddVisualShape(box_2)\n\n# Create the spring between body_2 and ground. The spring end points are\n# specified in the body relative frames.\nforce = MySpringForce()\n\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nspring_2.RegisterForceFunctor(force)\nsys.AddLink(spring_2)\n\n# Attach a visualization asset.\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n\n",
    "api_path": "# PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.",
    "output_system_path": "D:\\SimBench\\output\\llama-3.1-70b-instruct\\mass_spring_damper",
    "scores": {
        "score_document": "### Evaluation of the PyChrono Simulation Script\n\n1. **Completeness (40 points total)**\n   - **System Initialization**: The system is correctly initialized with `chrono.ChSystemNSC()`. (0 points deducted)\n   - **Body Creation**: Both bodies and springs are created and added to the system. (0 points deducted)\n   - **Visualization**: The visualization setup is complete with a window, camera, and lights. (0 points deducted)\n   - **Missing Components**: No essential components are missing. (0 points deducted)\n   - **Total Deductions**: 0 points\n\n2. **Correctness (30 points total)**\n   - **Incorrect API Usage**: The use of `chrono.ChLinkTSDA` for the spring connections is appropriate, and the custom force functor is correctly implemented. (0 points deducted)\n   - **Logical Errors**: The initialization of bodies and springs appears correct, with no logical errors present. (0 points deducted)\n   - **Total Deductions**: 0 points\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure**: The code is well-structured, with meaningful variable names and clear organization. (0 points deducted)\n   - **Comments**: While the code is readable, it lacks comments explaining the purpose of each section and the custom force functor. (5 points deducted)\n   - **Total Deductions**: 5 points\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations**: There are no unnecessary calculations or redundant code present. (0 points deducted)\n   - **Optimization Opportunities**: The code could benefit from some optimizations, such as avoiding repeated calls to `chrono.ChVector3d` for static positions. (3 points deducted)\n   - **Total Deductions**: 3 points\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Basic Error Handling**: There is no error handling implemented, which is a significant omission in simulation scripts. (5 points deducted)\n   - **Total Deductions**: 5 points\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Visualization Setup**: The visualization setup is mostly correct, but the addition of a skybox and proper lighting could enhance the visual quality. (3 points deducted)\n   - **Total Deductions**: 3 points\n\n### Summary of Deductions\n- Completeness: 0 points\n- Correctness: 0 points\n- Code Quality: 5 points\n- Efficiency: 3 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 3 points\n\n### Final Score Calculation\nTotal points deducted: 16 points (out of a possible 100 points)\n\nFinal score: 100 - 16 = 84\n\n### Final Score Output\n[[84]] \n\n### Explanation of Deductions\nThe script is well-structured and mostly correct, but it lacks comments for clarity, has minor optimization opportunities, and does not include any error handling, which is crucial for robustness in simulations. Additionally, while the visualization setup is functional, it could be improved for better visual quality.",
        "score_reference": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - The provided code includes all essential components such as system initialization, body creation, and visualization setup. However, there are minor deviations:\n     - The `Evaluate` method in the custom force functor does not match the reference's `evaluate` method signature and logic. This is a significant detail that affects completeness.\n     - The visual shape addition for the ground uses `chrono.ChFrameD` instead of `chrono.ChFramed`, which is a minor deviation.\n   - **Deductions**: 10 points for the incorrect method signature and logic in the force functor, and 5 points for the visual shape addition.\n   - **Total Deductions for Completeness**: 15 points.\n\n2. **Correctness (30 points total)**\n   - The custom force functor's implementation is incorrect as it does not calculate the spring force based on the current length and rest length, which could lead to significant changes in simulation behavior.\n   - The method `SetForceFunctor` is used instead of `RegisterForceFunctor`, which is a logical error.\n   - **Deductions**: 15 points for incorrect use of the API in the force functor, and 10 points for the incorrect method used to register the force functor.\n   - **Total Deductions for Correctness**: 25 points.\n\n3. **Code Quality (10 points total)**\n   - The code is generally well-structured and readable, but the comments could be more descriptive, especially regarding the custom force functor.\n   - **Deductions**: 5 points for insufficient comments and documentation.\n   - **Total Deductions for Code Quality**: 5 points.\n\n4. **Efficiency (10 points total)**\n   - The code does not exhibit any unnecessary calculations or redundant code. However, the custom force functor could be optimized to match the reference's approach.\n   - **Deductions**: 3 points for missing optimization opportunities.\n   - **Total Deductions for Efficiency**: 3 points.\n\n5. **Error Handling and Robustness (5 points total)**\n   - The provided code lacks any explicit error handling or robustness checks, which are not present in the reference script either.\n   - **Deductions**: 5 points for lack of error handling.\n   - **Total Deductions for Error Handling and Robustness**: 5 points.\n\n6. **Use of Visualization Tools (5 points total)**\n   - The visualization setup is mostly correct, but the minor deviation in the visual shape addition for the ground is noted.\n   - **Deductions**: 2 points for the minor visualization issue.\n   - **Total Deductions for Use of Visualization Tools**: 2 points.\n\n### Summary of Deductions\n- Completeness: 15 points\n- Correctness: 25 points\n- Code Quality: 5 points\n- Efficiency: 3 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 2 points\n\n### Final Score Calculation\nThe total deductions amount to 55 points from a maximum of 100 points, resulting in a final score of 45.\n\n**Final Score**: [[45]]",
        "score_reference_document": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - The provided code includes all essential components such as system initialization, body creation, and visualization. However, there are minor deviations in the naming conventions and some comments that could be clearer.\n   - **Deductions**: 5 points for minor omissions in comments and naming conventions.\n\n2. **Correctness (30 points total)**\n   - The implementation of the custom force functor is correct, but the method name `Evaluate` should follow the naming convention in the reference code, which uses `evaluate`. This could lead to confusion or errors in the simulation.\n   - The spring force calculation in `MySpringForce` is not using the correct parameters as per the reference script, which could lead to a significant change in simulation behavior.\n   - **Deductions**: 15 points for incorrect method naming and 10 points for the incorrect implementation of the force calculation.\n\n3. **Code Quality (10 points total)**\n   - The code is generally well-structured and readable, but it lacks sufficient comments explaining the purpose of certain sections, especially the custom force functor.\n   - **Deductions**: 5 points for insufficient comments.\n\n4. **Efficiency (10 points total)**\n   - The code does not exhibit any unnecessary calculations or redundant code. However, there are minor opportunities for optimization, such as using constants for repeated values.\n   - **Deductions**: 3 points for missing obvious optimization opportunities.\n\n5. **Error Handling and Robustness (5 points total)**\n   - The code does not include any error handling mechanisms, which could lead to issues during runtime if unexpected conditions arise.\n   - **Deductions**: 5 points for lack of error handling.\n\n6. **Use of Visualization Tools (5 points total)**\n   - The visualization setup is mostly correct, but there are minor issues with the arrangement of visual elements that could be improved for clarity.\n   - **Deductions**: 3 points for minor visualization issues.\n\n### Summary of Deductions\n- Completeness: 5 points\n- Correctness: 25 points\n- Code Quality: 5 points\n- Efficiency: 3 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 3 points\n\n### Final Score Calculation\nStarting from a perfect score of 100:\n- Total deductions: 5 + 25 + 5 + 3 + 5 + 3 = 46\n- Final score: 100 - 46 = 54\n\n### Final Score\n[[54]]"
    },
    "prompts": {
        "prompt_document": "\n        You are a PyChrono expert tasked with evaluating a simulation script by comparing it against the PyChrono API documentation. While the API documentation provides guidelines, it may not cover all aspects due to length constraints. Therefore, your evaluation should also be based on your knowledge of best practices in Python coding and general simulation principles.\n\n        Here is the PyChrono code you need to evaluate:\n        [The Start of Assistant’s Answer]\n        \"\"\"\nPyChrono example of a spring-damper system with custom force functor.\n\"\"\"\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# Custom force functor for spring force calculation\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self, spring_coef, damping_coef):\n        super().__init__()\n        self.spring_coef = spring_coef\n        self.damping_coef = damping_coef\n\n    def Evaluate(self, time, pos, vel, F):\n        # Calculate spring force using custom parameters\n        F.Set(chrono.ChVector3d(0, -self.spring_coef * pos.y - self.damping_coef * vel.y, 0))\n\n# Simulation parameters\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n# Create the simulation system\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\n# Create the ground body\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\n# Add visual shapes to the ground\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFrameD(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFrameD(chrono.ChVector3d(1, 0, 0)))\n\n# Create body 1\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 1\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create spring 1 between body 1 and ground using direct spring and damping coefficients\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Add visual shape to spring 1\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create body 2\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 2\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0.6, 0))\nbody_2.AddVisualShape(box_2)\n\n# Create spring 2 between body 2 and ground using custom force functor\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nmy_spring_force = MySpringForce(spring_coef, damping_coef)\nspring_2.SetForceFunctor(my_spring_force)\nsys.AddLink(spring_2)\n\n# Add visual shape to spring 2\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\n# Simulation loop\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n        [The End of Assistant’s Answer]\n\n        Use the following evaluation criteria and point deduction guidelines:\n\n        1. **Completeness (40 points total)**\n           - Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) as outlined in the PyChrono API documentation or generally expected in a simulation setup.\n           - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured according to the API documentation or general simulation best practices.\n           - Deduct **5 points** for minor omissions or slight deviations from best practices mentioned in the API documentation or common Python coding practices.\n\n        2. **Correctness (30 points total)**\n           - Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior, as indicated by the documentation or your expert knowledge.\n           - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, based on the API documentation or standard simulation principles.\n           - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the API guidelines or standard coding practices.\n\n        3. **Code Quality (10 points total)**\n           - Evaluate the readability, structure, and documentation of the code. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting, based on your Python expertise.\n           - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, whether outlined in the API documentation or based on general coding standards.\n\n        4. **Efficiency (10 points total)**\n           - Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that could be optimized according to the API documentation or your understanding of efficient coding practices.\n           - Deduct **3 points** for missing obvious optimization opportunities as suggested by the API documentation or standard programming practices.\n\n        5. **Error Handling and Robustness (5 points total)**\n           - Deduct **5 points** for lack of basic error handling or failure to account for common issues, as recommended by the API documentation or best practices in Python coding.\n           - Deduct **3 points** for inadequate handling of edge cases, considering both the API documentation and typical robustness requirements in coding.\n\n        6. **Use of Visualization Tools (5 points total)**\n           - Deduct **3 to 5 points** for incorrect or inadequate visualization setup according to the API documentation or general expectations for visualizing simulations.\n           - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, based on both the API documentation and your understanding of effective simulation visualization.\n\n        Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n        Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n        After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n        Provide the evaluated score and a brief explanation of the deductions below:\n        ",
        "prompt_reference": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    \"\"\"\nPyChrono example of a spring-damper system with custom force functor.\n\"\"\"\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# Custom force functor for spring force calculation\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self, spring_coef, damping_coef):\n        super().__init__()\n        self.spring_coef = spring_coef\n        self.damping_coef = damping_coef\n\n    def Evaluate(self, time, pos, vel, F):\n        # Calculate spring force using custom parameters\n        F.Set(chrono.ChVector3d(0, -self.spring_coef * pos.y - self.damping_coef * vel.y, 0))\n\n# Simulation parameters\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n# Create the simulation system\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\n# Create the ground body\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\n# Add visual shapes to the ground\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFrameD(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFrameD(chrono.ChVector3d(1, 0, 0)))\n\n# Create body 1\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 1\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create spring 1 between body 1 and ground using direct spring and damping coefficients\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Add visual shape to spring 1\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create body 2\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 2\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0.6, 0))\nbody_2.AddVisualShape(box_2)\n\n# Create spring 2 between body 2 and ground using custom force functor\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nmy_spring_force = MySpringForce(spring_coef, damping_coef)\nspring_2.SetForceFunctor(my_spring_force)\nsys.AddLink(spring_2)\n\n# Add visual shape to spring 2\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\n# Simulation loop\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    # Simple example demonstrating the use of ChLinkTSDA.\n#\n# Two bodies, connected with identical (but modeled differently) spring-dampers\n# are created side by side.\n#\n# Recall that Irrlicht uses a left-hand frame, so everything is rendered with\n# left and right flipped.\n#\n# =============================================================================\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# =============================================================================\n\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self):\n        super(MySpringForce, self).__init__()\n\n    def evaluate(self,  #\n                 time,  # current time\n                 rest_length,  # undeformed length\n                 length,  # current length\n                 vel,  # current velocity (positive when extending)\n                 link):  # associated link\n        force = -spring_coef * (length - rest_length) - damping_coef * vel\n        return force\n\n\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFramed(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFramed(chrono.ChVector3d(1, 0, 0)))\n\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create the spring between body_1 and ground. The spring end points are\n# specified in the body relative frames.\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Attach a visualization asset.\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create a body suspended through a ChLinkTSDA (custom force functor)\n# -------------------------------------------------------------------\n\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0, 0.6))\nbody_2.AddVisualShape(box_2)\n\n# Create the spring between body_2 and ground. The spring end points are\n# specified in the body relative frames.\nforce = MySpringForce()\n\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nspring_2.RegisterForceFunctor(force)\nsys.AddLink(spring_2)\n\n# Attach a visualization asset.\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    ",
        "prompt_reference_document": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts. Your evaluation should consider both the accuracy of the script compared to the reference and adherence to best practices as outlined in the PyChrono API documentation.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    \"\"\"\nPyChrono example of a spring-damper system with custom force functor.\n\"\"\"\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# Custom force functor for spring force calculation\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self, spring_coef, damping_coef):\n        super().__init__()\n        self.spring_coef = spring_coef\n        self.damping_coef = damping_coef\n\n    def Evaluate(self, time, pos, vel, F):\n        # Calculate spring force using custom parameters\n        F.Set(chrono.ChVector3d(0, -self.spring_coef * pos.y - self.damping_coef * vel.y, 0))\n\n# Simulation parameters\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n# Create the simulation system\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\n# Create the ground body\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\n# Add visual shapes to the ground\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFrameD(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFrameD(chrono.ChVector3d(1, 0, 0)))\n\n# Create body 1\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 1\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create spring 1 between body 1 and ground using direct spring and damping coefficients\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Add visual shape to spring 1\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create body 2\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Add visual shape to body 2\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0.6, 0))\nbody_2.AddVisualShape(box_2)\n\n# Create spring 2 between body 2 and ground using custom force functor\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nmy_spring_force = MySpringForce(spring_coef, damping_coef)\nspring_2.SetForceFunctor(my_spring_force)\nsys.AddLink(spring_2)\n\n# Add visual shape to spring 2\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\n# Simulation loop\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    # Simple example demonstrating the use of ChLinkTSDA.\n#\n# Two bodies, connected with identical (but modeled differently) spring-dampers\n# are created side by side.\n#\n# Recall that Irrlicht uses a left-hand frame, so everything is rendered with\n# left and right flipped.\n#\n# =============================================================================\n\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\n\n# =============================================================================\n\nrest_length = 1.5\nspring_coef = 50\ndamping_coef = 1\n\n\nclass MySpringForce(chrono.ForceFunctor):\n    def __init__(self):\n        super(MySpringForce, self).__init__()\n\n    def evaluate(self,  #\n                 time,  # current time\n                 rest_length,  # undeformed length\n                 length,  # current length\n                 vel,  # current velocity (positive when extending)\n                 link):  # associated link\n        force = -spring_coef * (length - rest_length) - damping_coef * vel\n        return force\n\n\nsys = chrono.ChSystemNSC()\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\nground = chrono.ChBody()\nsys.AddBody(ground)\nground.SetFixed(True)\nground.EnableCollision(False)\n\nsph_1 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_1, chrono.ChFramed(chrono.ChVector3d(-1, 0, 0)))\n\nsph_2 = chrono.ChVisualShapeSphere(0.1)\nground.AddVisualShape(sph_2, chrono.ChFramed(chrono.ChVector3d(1, 0, 0)))\n\nbody_1 = chrono.ChBody()\nsys.AddBody(body_1)\nbody_1.SetPos(chrono.ChVector3d(-1, -3, 0))\nbody_1.SetFixed(False)\nbody_1.EnableCollision(False)\nbody_1.SetMass(1)\nbody_1.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_1 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_1.SetColor(chrono.ChColor(0.6, 0, 0))\nbody_1.AddVisualShape(box_1)\n\n# Create the spring between body_1 and ground. The spring end points are\n# specified in the body relative frames.\nspring_1 = chrono.ChLinkTSDA()\nspring_1.Initialize(body_1, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(-1, 0, 0))\nspring_1.SetRestLength(rest_length)\nspring_1.SetSpringCoefficient(spring_coef)\nspring_1.SetDampingCoefficient(damping_coef)\nsys.AddLink(spring_1)\n\n# Attach a visualization asset.\nspring_1.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\n# Create a body suspended through a ChLinkTSDA (custom force functor)\n# -------------------------------------------------------------------\n\nbody_2 = chrono.ChBody()\nsys.AddBody(body_2)\nbody_2.SetPos(chrono.ChVector3d(1, -3, 0))\nbody_2.SetFixed(False)\nbody_2.EnableCollision(False)\nbody_2.SetMass(1)\nbody_2.SetInertiaXX(chrono.ChVector3d(1, 1, 1))\n\n# Attach a visualization asset.\nbox_2 = chrono.ChVisualShapeBox(1, 1, 1)\nbox_2.SetColor(chrono.ChColor(0, 0, 0.6))\nbody_2.AddVisualShape(box_2)\n\n# Create the spring between body_2 and ground. The spring end points are\n# specified in the body relative frames.\nforce = MySpringForce()\n\nspring_2 = chrono.ChLinkTSDA()\nspring_2.Initialize(body_2, ground, True, chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(1, 0, 0))\nspring_2.SetRestLength(rest_length)\nspring_2.RegisterForceFunctor(force)\nsys.AddLink(spring_2)\n\n# Attach a visualization asset.\nspring_2.AddVisualShape(chrono.ChVisualShapeSpring(0.05, 80, 15))\n\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('ChLinkTSDA demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 0, 6))\nvis.AddTypicalLights()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(1e-3)\n\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    "
    }
}
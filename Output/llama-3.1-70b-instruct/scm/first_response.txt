Here's a Python script that implements the specified PyChrono simulation:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('./data/')

# Create the simulation system and add it to the environment
mysystem = chrono.ChSystemNSC()
chrono.ChCollisionSystem.SetDefaultImpulseThreshold(1e-3)

# Create the vehicle
veh_hmmwv = veh.HMMWV(mysystem)

# Set the vehicle's initial position and orientation
veh_hmmwv.SetChassisFixed(False)
veh_hmmwv.SetChassisPosition(chrono.ChVectorD(0, 0.5, 0))
veh_hmmwv.SetChassisOrientation(chrono.ChQuaternionD(1, 0, 0, 0))

# Add the vehicle to the simulation system
mysystem.Add(veh_hmmwv.GetChassisBody())
mysystem.Add(veh_hmmwv.GetPart(0))  # Add the vehicle's body
mysystem.Add(veh_hmmwv.GetPart(1))  # Add the vehicle's wheels
mysystem.Add(veh_hmmwv.GetPart(2))  # Add the vehicle's suspension

# Create the SCM terrain
terrain = veh.SCMDeformableTerrain(mysystem)

# Set the terrain's parameters
terrain.SetSoilParameters(0.1, 0.2, 0.3, 0.4, 0.5)
terrain.SetMovingPatchSize(10, 10)
terrain.SetMovingPatchCenter(chrono.ChVectorD(0, 0, 0))
terrain.SetMovingPatchFollowsChassis(True)

# Add the terrain to the simulation system
mysystem.Add(terrain)

# Create the visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('HMMWV on SCM Deformable Terrain')
vis.SetTypicalLenght(1.0)
vis.SetCamera(chrono.ChVectorD(0, 0, 3), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0))

# Add visualization to the vehicle's components
veh_hmmwv.AddVisualizationMesh(vis)

# Add visualization to the terrain
terrain.AddVisualization(vis, True, False, True)

# Create the interactive driver system
driver = veh.HMMWV_Driver(veh_hmmwv)

# Set the simulation's time step and frame rate
mysystem.SetChTimeStep(0.01)
vis.SetFrameRate(50)

# Run the simulation
while vis.Run():
    mysystem.DoStepDynamics(0.01)
    vis.BeginScene()
    vis.DrawAll()
    vis.EndScene()
```

This script initializes the PyChrono environment, creates a full HMMWV vehicle with a rigid tire model, and sets up an SCM deformable terrain with custom soil parameters. It also configures the terrain to visualize sinkage with false color plotting and enables a moving patch feature that dynamically follows the vehicle chassis. The script then sets up an interactive driver system to control steering, throttle, and braking, and runs the simulation in real time, updating vehicle dynamics and rendering the scene at 50 frames per second.
Here is the PyChrono simulation script based on the provided instructions:
```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import numpy as np

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('./data/')
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization
irr = chronoirr.ChIrrTools()
irr.SetWindowSize(800, 600)
irr.SetWindowTitle('HMMWV on SCM Deformable Terrain')
irr.SetTypicalLambertMaterial(chrono.ChVectorD(0.5, 0.5, 0.5))
irr.AddCamera(chrono.ChVectorD(0, 0, 1.5), chrono.ChVectorD(0, 0, 0))
irr.AddTypicalLights()

# Create the vehicle
hmmwv = veh.HMMWV(system)
hmmwv.SetChassisVisualization(chrono.ChVisualizationType.MESH)
hmmwv.SetSuspensionVisualization(chrono.ChVisualizationType.MESH)
hmmwv.SetSteeringVisualization(chrono.ChVisualizationType.MESH)
hmmwv.SetWheelVisualization(chrono.ChVisualizationType.MESH)
hmmwv.SetChassisPosition(chrono.ChVectorD(0, 0, 0.5))
hmmwv.SetChassisOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
hmmwv.SetRigidTireModel()

# Create the SCM terrain
terrain = veh.SCMDeformableTerrain(system)
terrain.SetSoilParameters(chrono.ChVectorD(0.1, 0.1, 0.1),  # cohesion, friction, density
                          chrono.ChVectorD(0.1, 0.1, 0.1),  # stiffness, damping, adhesion
                          0.1, 0.1)  # sinkage, rolling resistance
terrain.SetMovingPatch(chrono.ChVectorD(0, 0, 0),  # center
                       chrono.ChVectorD(10, 10, 0.5),  # size
                       chrono.ChVectorD(0, 0, 1))  # normal
terrain.SetVisualization(True, False, True)  # visualize sinkage, false color plotting

# Add the vehicle and terrain to the system
system.Add(hmmwv.GetChassisBody())
system.Add(terrain.GetTerrainBody())

# Set up the interactive driver system
driver = veh.InteractiveDriver(hmmwv)
driver.SetSteeringRange(-0.5, 0.5)
driver.SetThrottleRange(0, 1)
driver.SetBrakingRange(0, 1)

# Set up the simulation
system.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)
system.SetSolverMaxIterations(100)
system.SetSolverTolerance(1e-6)
system.SetTimestep(0.02)

# Run the simulation
while irr.GetDevice().run():
    system.DoStepDynamics(0.02)
    irr.BeginScene()
    irr.DrawAll()
    irr.EndScene()
    irr.SetFps(50)
```
This script initializes the PyChrono environment, creates the HMMWV vehicle and SCM deformable terrain, sets up the interactive driver system, and runs the simulation in real-time using Irrlicht for visualization. The simulation updates vehicle dynamics and renders the scene at 50 frames per second.
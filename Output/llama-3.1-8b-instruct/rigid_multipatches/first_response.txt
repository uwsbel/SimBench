Here's a Python script that meets the given requirements:

```python
import chrono as ch
import irrlicht

# Initialize PyChrono environment and core components
ch.init()

# Create a new simulation
sim = ch.ChSystem()

# Create a new vehicle
vehicle = ch.ChBody()
vehicle.SetMass(1000.0)
vehicle.SetInertiaTensor(1000.0, 1000.0, 1000.0)
vehicle.SetPos(ch.Vec3(0, 0, 0))
vehicle.SetRot(ch.QFromEuler(0, 0, 0))
sim.Add(vehicle)

# Create a new engine
engine = ch.ChEngine()
engine.SetType(ch.ChEngineType.eEngType_Diesel)
engine.SetPower(100.0)
vehicle.Add(engine)

# Create a new drivetrain
drivetrain = ch.ChDrivetrain()
drivetrain.SetType(ch.ChDrivetrainType.eDrivetrainType_4x4)
vehicle.Add(drivetrain)

# Create a new driver
driver = ch.ChDriver()
driver.SetSteeringSensitivity(0.1)
driver.SetThrottleSensitivity(0.1)
driver.SetBrakeSensitivity(0.1)
vehicle.Add(driver)

# Create a new terrain
terrain = ch.ChTerrain()
terrain.SetPatchCount(10)
terrain.SetPatchSize(10.0)
terrain.SetPatchTexture(ch.ChTexture("texture1.png"))
terrain.SetPatchHeight(0.0)
sim.Add(terrain)

# Create a new patch
patch = ch.ChTerrainPatch()
patch.SetType(ch.ChTerrainPatchType.ePatchType_Flat)
patch.SetTexture(ch.ChTexture("texture2.png"))
patch.SetHeight(0.0)
terrain.AddPatch(patch)

# Create a new mesh-based patch
mesh_patch = ch.ChTerrainPatch()
mesh_patch.SetType(ch.ChTerrainPatchType.ePatchType_Mesh)
mesh_patch.SetMesh(ch.ChMesh("mesh.obj"))
mesh_patch.SetHeight(0.0)
terrain.AddPatch(mesh_patch)

# Create a new heightmap-based patch
heightmap_patch = ch.ChTerrainPatch()
heightmap_patch.SetType(ch.ChTerrainPatchType.ePatchType_Heightmap)
heightmap_patch.SetHeightmap(ch.ChHeightmap("heightmap.png"))
heightmap_patch.SetHeight(0.0)
terrain.AddPatch(heightmap_patch)

# Set default parameters
vehicle.SetMesh(ch.ChMesh("vehicle.obj"))
vehicle.SetVisual(ch.ChVisual("vehicle.obj"))
vehicle.SetCollision(ch.ChCollision("vehicle.obj"))

# Set up visualization
irrlicht.init()
device = irrlicht.createDevice(irrlicht.VideoMode(800, 600, 32), irrlicht.E_DRIVER_TYPE_OPENGL)
scene = irrlicht.Scene()
device.setWindowCaption("HMMWV Simulation")

# Main simulation loop
while device.run():
    # Update simulation
    sim.Update(0.01)

    # Render scene
    scene.beginScene()
    scene.drawAll()
    scene.endScene()

# Clean up
device.drop()
ch.quit()
```

This script initializes the PyChrono environment and core components, creates a new simulation, and adds the required physical systems and objects as specified. It also sets necessary default parameters such as positions, forces, and interactions. The script uses Irrlicht for visualization and incorporates an interactive driver system to control steering, throttle, and braking. The simulation updates at a consistent timestep while rendering the scene in real time.
Here's the corrected and modified script based on the provided instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

# Set chrono data path
chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle location and orientation
initLoc = chrono.ChVector3d(-8, 0, 0.6)
initRot = chrono.ChQuaterniond(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_MESH

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
tire_model = veh.TireModelType_RIGID

# Rigid terrain
terrainHeight = 0      # terrain height
terrainLength = 100.0  # size in X direction
terrainWidth = 100.0   # size in Y direction

# Poon chassis tracked by the camera
trackPoint = chrono.ChVector3d(0.0, 0.0, 1.71)

# Contact method
contact_method = chrono.ChContactMethod_SMC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# Create the HMMWV vehicle, set parameters, and initialize
vehicle = veh.HMMWV_Full() # veh.HMMWV_Reduced()  could be another choice here
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)

# Initialize terrain parameters
terrain_params = TerrainParameters()
terrain_params.set_parameters("soft")

vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the SCM deformable terrain patch
terrain = veh.SCMTerrain(vehicle.GetSystem())
terrain.set_parameters(terrain_params)

# Optionally, enable moving patch feature (single patch around vehicle chassis)
terrain.AddMovingPatch(vehicle.GetChassisBody(), chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(5, 3, 1))

# Initialize the SCM terrain (length, width, mesh resolution), specifying the initial mesh grid
terrain.Initialize(20, 20, 0.02)

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('HMMWV Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())

# Create the driver system
driver = veh.ChInteractiveDriverIRR(vis)

# Set the time response for steering and throttle keyboard inputs.
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1
driver.SetSteeringDelta(render_step_size / steering_time)
driver.SetThrottleDelta(render_step_size / throttle_time)
driver.SetBrakingDelta(render_step_size / braking_time)

driver.Initialize()

# ---------------
# Simulation loop
# ---------------

# output vehicle mass
print( "VEHICLE MASS: ",  vehicle.GetVehicle().GetMass())

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter s
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

class TerrainParameters:
    def __init__(self):
        self.bekker_kphi = 2e6
        self.bekker_kc = 0
        self.bekker_n_exponent = 1.1
        self.mohr_cohesive_limit = 0
        self.mohr_friction_limit = 30
        self.janosi_shear_coefficient = 0.01
        self.elastic_stiffness = 2e8
        self.damping = 3e4

    def set_parameters(self, config):
        if config == "soft":
            self.bekker_kphi = 1e6
            self.bekker_kc = 1e3
            self.bekker_n_exponent = 1.2
            self.mohr_cohesive_limit = 1e3
            self.mohr_friction_limit = 20
            self.janosi_shear_coefficient = 0.05
            self.elastic_stiffness = 1e8
            self.damping = 1e4
        elif config == "mid":
            self.bekker_kphi = 2e6
            self.bekker_kc = 1e3
            self.bekker_n_exponent = 1.1
            self.mohr_cohesive_limit = 1e3
            self.mohr_friction_limit = 25
            self.janosi_shear_coefficient = 0.01
            self.elastic_stiffness = 2e8
            self.damping = 3e4
        elif config == "hard":
            self.bekker_kphi = 3e6
            self.bekker_kc = 1e4
            self.bekker_n_exponent = 1.0
            self.mohr_cohesive_limit = 1e4
            self.mohr_friction_limit = 30
            self.janosi_shear_coefficient = 0.005
            self.elastic_stiffness = 3e8
            self.damping = 5e4

    def get_parameters(self):
        return {
            "bekker_kphi": self.bekker_kphi,
            "bekker_kc": self.bekker_kc,
            "bekker_n_exponent": self.bekker_n_exponent,
            "mohr_cohesive_limit": self.mohr_cohesive_limit,
            "mohr_friction_limit": self.mohr_friction_limit,
            "janosi_shear_coefficient": self.janosi_shear_coefficient,
            "elastic_stiffness": self.elastic_stiffness,
            "damping": self.damping
        }

while vis.Run() :
    time = vehicle.GetSystem().GetChTime()

    # Render scene and output POV-Ray data
    if (step_number % render_steps == 0) :
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)
```

The provided script has been corrected and modified to encapsulate SCM terrain parameters into a new class called `TerrainParameters`. This class allows for easy management and setting of the terrain parameters. The existing terrain parameter setup has been replaced with the new class, using predefined configurations ("soft," "mid," "hard") to initialize the parameters.
Here's the code that meets the given specifications:

```python
import chrono as chrono
import chrono.irrlicht as irrlicht
import numpy as np

# Initialize the PyChrono environment
chrono.Initialize()

# Create a new Chrono system
system = chrono.ChSystem()

# Create a ground body
ground = chrono.ChBody()
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
ground.SetMass(10000)
ground.SetCollisionShape(chrono.ChBoxD(100, 100, 0.1))
system.Add(ground)

# Create a Viper rover
rover = chrono.ChBody()
rover.SetPos(chrono.ChVectorD(0, 0, 0))
rover.SetMass(100)
rover.SetCollisionShape(chrono.ChBoxD(1, 1, 0.1))
rover.SetInertiaXX(chrono.ChVectorD(1, 1, 1))
rover.SetBodyFixed(False)
system.Add(rover)

# Create a driver for the rover
driver = chrono.ChDriver()
driver.SetBody(rover)
driver.SetForce(chrono.ChVectorD(0, 0, 0))
driver.SetTorque(chrono.ChVectorD(0, 0, 0))
driver.SetMaxForce(chrono.ChVectorD(100, 100, 100))
driver.SetMaxTorque(chrono.ChVectorD(100, 100, 100))
system.Add(driver)

# Create a real-time visualization using Irrlicht
irrlicht.Initialize()
device = irrlicht.IrrlichtDeviceCreateDevice(irrlicht.VideoMode(1024, 768, 32), irrlicht.VideoDriverCreationFlag.Hardware)
view = irrlicht.IrrlichtViewCreateDevice(device)
camera = irrlicht.IrrlichtCameraCreateDevice(view)
camera.SetTarget(chrono.ChVectorD(0, 0, 0))
camera.SetUp(chrono.ChVectorD(0, 1, 0))
camera.SetPosition(chrono.ChVectorD(0, 0, 10))
light = irrlicht.IrrlichtLightCreateDevice(view)
light.SetType(irrlicht.LT_DIRECTIONAL)
light.SetDiffuseColor(irrlicht.Color(1, 1, 1))
light.SetSpecularColor(irrlicht.Color(1, 1, 1))
light.SetPosition(chrono.ChVectorD(0, 0, 10))

# Set up the simulation loop
t = 0
dt = 0.01
steering = 0
while t < 10:
    # Update the driver's steering
    steering += 0.1
    driver.SetTorque(chrono.ChVectorD(0, steering, 0))

    # Update the simulation
    system.DoStepDynamics(dt)

    # Render the scene
    view.BeginScene(True, True, irrlicht.SCC_BLACK)
    view.DrawAll()
    view.EndScene()

    # Update the camera
    camera.SetTarget(rover.GetPos())
    camera.SetPosition(chrono.ChVectorD(0, 0, 10))

    # Update the light
    light.SetPosition(chrono.ChVectorD(0, 0, 10))

    # Update the time
    t += dt

# Clean up
chrono.Finalize()
irrlicht.Finalize()
```

This code initializes the PyChrono environment, creates a Chrono system with a ground body and a Viper rover, sets up a real-time visualization using Irrlicht, and implements a simulation loop where the rover's steering gradually changes over a specified time period.
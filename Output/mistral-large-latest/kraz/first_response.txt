Sure! Below is a PyChrono simulation script based on the provided instructions. This script sets up a Kraz vehicle with specified initial conditions, a rigid terrain with defined friction and restitution, a driver system for vehicle control, and real-time visualization using Irrlicht.

```python
import pychrono as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh

# ----------------------------
# Initialize the PyChrono environment
# ----------------------------
chrono.SetChronoDataPath('path/to/chrono/data/')
veh.SetDataPath('path/to/chrono/vehicle/data/')

# Create the Chrono system
system = chrono.ChSystemNSC()

# Set solver and integrator settings
system.SetSolverType(chrono.ChSolver.Type_SPARSE_LU)
system.SetSolverWarmStarting(True)
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# ----------------------------
# Create and initialize the rigid terrain
# ----------------------------
terrain = veh.RigidTerrain(system)
terrain.SetSoilFrictionCoefficient(0.9)
terrain.SetSoilRestitutionCoefficient(0.01)

# ----------------------------
# Create and initialize the Kraz vehicle
# ----------------------------
kraz = veh.Kraz()
kraz.SetContactMethod(chrono.ChContactMethod_NSC)
kraz.SetChassisFixed(False)
kraz.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.ChQuaternionD(1, 0, 0, 0)))
kraz.Initialize(system)

# ----------------------------
# Initialize the driver system
# ----------------------------
driver = veh.ChIrrGuiDriver(kraz.GetVehicle())
driver.SetSteeringDelta(0.1)
driver.SetThrottleDelta(0.1)
driver.SetBrakingDelta(0.1)
driver.Initialize()

# ----------------------------
# Create and initialize the visualization system
# ----------------------------
vis = irr.ChIrrApp(kraz.GetVehicle().GetSystem(), 'Kraz Simulation', irr.dimension2du(800, 600))
vis.AddTypicalSky()
vis.AddTypicalLogo(chrono.GetChronoDataPath() + 'logo_pychrono_alpha.png')
vis.AddTypicalCamera(irr.vector3df(0, 1.8, -3))
vis.AddLightWithShadow(irr.vector3df(1.5, 5.5, -2.5), irr.vector3df(0, 0, 0), 3, 2.2, 7.2, 50, 512, irr.SColorf(1, 1, 1))
vis.SetShowInfos(True)
vis.SetTimestep(0.01)

# ----------------------------
# Simulation loop
# ----------------------------
while vis.GetDevice().run():
    vis.BeginScene()
    vis.DrawAll()

    # Synchronize systems and advance simulation
    driver.Synchronize(vis.GetSystem().GetChTime())
    vis.DoStep()
    vis.EndScene()
```

### Explanation:
1. **Initialization**:
   - The script initializes the Chrono and Vehicle data paths.
   - Creates a `ChSystemNSC` system and sets solver type, warm starting, and gravity.

2. **Terrain Setup**:
   - A rigid terrain is created with specified friction and restitution coefficients.

3. **Vehicle Setup**:
   - A Kraz vehicle is created and initialized with specific initial conditions.

4. **Driver System**:
   - A driver system is set up for controlling the vehicle, including steering, throttle, and braking deltas.

5. **Visualization**:
   - An Irrlicht-based visualization system is created with camera settings, lighting, and typical sky and logo additions.

6. **Simulation Loop**:
   - The simulation loop synchronizes the driver system, advances the simulation, and renders the scene in real-time.

Make sure to replace `'path/to/chrono/data/'` and `'path/to/chrono/vehicle/data/'` with the actual paths to your Chrono data and vehicle data directories.

This script should give you a good starting point for your PyChrono simulation with the specified requirements.
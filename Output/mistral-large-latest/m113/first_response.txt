Sure, I will provide you with a PyChrono simulation script based on your instructions. This script will set up an M113 vehicle, create a rigid terrain, initialize a driver system, and create real-time visualization using Irrlicht. Here is the complete script:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath(chrono.GetChronoDataPath())

# Create the physical system and other core components
system = chrono.ChSystemNSC()

# Create the terrain
terrain = veh.RigidTerrain(system)
terrain.SetContactFrictionCoefficient(0.9)
terrain.SetContactRestitutionCoefficient(0.01)
system.Add(terrain)

# Create the M113 vehicle
m113 = veh.M113()
m113.Initialize(system, chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.QUNIT))
m113.SetInitWheelAngVel(-10)
m113.SetInitFwdVel(1)

# Create the driver system
driver = veh.ChDriver(m113.GetVehicle())
driver.Initialize()

# Create and attach the Irrlicht visualization system
app = chronoirr.ChIrrApp(m113.GetVehicle().GetSystem(), "M113 Vehicle Simulation", chrono.ChVectorD(2.5, 2.5, 2.5), 0.5)
app.AddTypicalSky(chrono.GetChronoDataPath() + 'skybox/')
app.AddTypicalLights()
app.AddTypicalCamera(chrono.ChVectorD(0, 2, -6))
app.SetShowInfos(True)
app.SetTimestep(0.01)
app.SetTryRealtime(True)

# Simulation loop
realtime_timer = chrono.ChRealtimeStepTimer()
app.SetTimer(realtime_timer)

while app.GetDevice().run():
    app.BeginScene()
    app.DrawAll()

    # Synchronize the systems
    driver.Synchronize(m113.GetVehicle())

    # Advance the simulation
    app.DoStep()

    # End the scene
    app.EndScene()
```

### Explanation:

1. **Initialize the PyChrono environment and core components**:
   - The script starts by importing the necessary modules and setting the Chrono data path.

2. **Add the required physical systems and objects as specified**:
   - A physical system (`ChSystemNSC`) is created.
   - A rigid terrain (`RigidTerrain`) is added to the system with specified friction and restitution coefficients.
   - An M113 vehicle is created and initialized with specific initial conditions.

3. **Set necessary default parameters**:
   - The terrain's contact friction and restitution coefficients are set.
   - Initial conditions for the M113 vehicle's wheel angular velocity and forward velocity are set.

4. **Initialize a driver system for vehicle control**:
   - A driver system (`ChDriver`) is created and initialized for the M113 vehicle.

5. **Create a real-time visualization using Irrlicht**:
   - An Irrlicht application (`ChIrrApp`) is created for real-time visualization.
   - Typical sky, lights, and camera settings are added to the visualization.
   - The application is set to attempt real-time execution.

6. **Implement a simulation loop**:
   - The simulation loop runs as long as the Irrlicht application is running.
   - Each iteration synchronizes the driver system with the vehicle, advances the simulation step, and handles the visualization.

This script should provide a real-time simulation of an M113 vehicle on a rigid terrain with the specified initial conditions and visualization settings.
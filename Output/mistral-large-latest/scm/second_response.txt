Certainly! Let's start by identifying potential errors in the original script and then modifying it according to the instructions.

### Review and Error Correction

1. **Initialization of Terrain Parameters**: The terrain parameters are directly set in the main script. We will encapsulate these parameters in a new class.
2. **Correct Method Names and Parameters**: Verify the method names and parameters are correct and consistent with the PyChrono API.

### New Class for SCM Terrain Parameters

We will create a class `SCMTerrainParams` to encapsulate the terrain parameters and provide predefined configurations.

### Modified Script

```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

# Define the class to manage SCM terrain parameters
class SCMTerrainParams:
    def __init__(self, config='mid'):
        self.config = config
        self.set_parameters()

    def set_parameters(self):
        if self.config == 'soft':
            self.bekker_Kphi = 2e6
            self.bekker_Kc = 0
            self.bekker_n = 1.1
            self.mohr_cohesive = 0
            self.mohr_friction = 30
            self.janosi_shear = 0.01
            self.elastic_stiffness = 2e8
            self.damping = 3e4
        elif self.config == 'mid':
            self.bekker_Kphi = 4e6
            self.bekker_Kc = 0
            self.bekker_n = 1.1
            self.mohr_cohesive = 0
            self.mohr_friction = 35
            self.janosi_shear = 0.02
            self.elastic_stiffness = 4e8
            self.damping = 5e4
        elif self.config == 'hard':
            self.bekker_Kphi = 6e6
            self.bekker_Kc = 0
            self.bekker_n = 1.1
            self.mohr_cohesive = 0
            self.mohr_friction = 40
            self.janosi_shear = 0.03
            self.elastic_stiffness = 6e8
            self.damping = 7e4

    def apply_parameters(self, terrain):
        terrain.SetSoilParameters(
            self.bekker_Kphi,
            self.bekker_Kc,
            self.bekker_n,
            self.mohr_cohesive,
            self.mohr_friction,
            self.janosi_shear,
            self.elastic_stiffness,
            self.damping
        )

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle location and orientation
initLoc = chrono.ChVector3d(-8, 0, 0.6)
initRot = chrono.ChQuaterniond(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_MESH

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
tire_model = veh.TireModelType_RIGID

# Rigid terrain
terrainHeight = 0      # terrain height
terrainLength = 100.0  # size in X direction
terrainWidth = 100.0   # size in Y direction

# Poon chassis tracked by the camera
trackPoint = chrono.ChVector3d(0.0, 0.0, 1.71)

# Contact method
contact_method = chrono.ChContactMethod_SMC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# Create the HMMWV vehicle, set parameters, and initialize
vehicle = veh.HMMWV_Full() # veh.HMMWV_Reduced()  could be another choice here
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)
vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the SCM deformable terrain patch
terrain = veh.SCMTerrain(vehicle.GetSystem())
scm_params = SCMTerrainParams(config='mid')
scm_params.apply_parameters(terrain)

# Optionally, enable moving patch feature (single patch around vehicle chassis)
terrain.AddMovingPatch(vehicle.GetChassisBody(), chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(5, 3, 1))

# Set plot type for SCM (false color plotting)
terrain.SetPlotType(veh.SCMTerrain.PLOT_SINKAGE, 0, 0.1)

# Initialize the SCM terrain (length, width, mesh resolution), specifying the initial mesh grid
terrain.Initialize(terrainLength, terrainWidth, 0.02)

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('HMMWV Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())

# Create the driver system
driver = veh.ChInteractiveDriverIRR(vis)

# Set the time response for steering and throttle keyboard inputs.
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1
driver.SetSteeringDelta(render_step_size / steering_time)
driver.SetThrottleDelta(render_step_size / throttle_time)
driver.SetBrakingDelta(render_step_size / braking_time)

driver.Initialize()

# ---------------
# Simulation loop
# ---------------

# output vehicle mass
print("VEHICLE MASS: ", vehicle.GetVehicle().GetMass())

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter s
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run():
    time = vehicle.GetSystem().GetChTime()

    # Render scene and output POV-Ray data
    if step_number % render_steps == 0:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs
    driver_inputs = driver.GetInputs()

    # Update modules (process inputs from other modules)
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)
```

### Explanation of Changes

1. **SCM Terrain Parameters Class**: Created a new class `SCMTerrainParams` to encapsulate the terrain parameters.
2. **Predefined Configurations**: Added predefined configurations (`soft`, `mid`, `hard`) for the SCM terrain parameters.
3. **Initialize Terrain Parameters**: Replaced the direct setting of terrain parameters with the `SCMTerrainParams` class and applied the parameters to the terrain.
4. **General Corrections**: Verified and corrected potential syntax and logical errors in the script.

This modified script should now meet the requirements and be free of errors.
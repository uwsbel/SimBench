Certainly! Below is a PyChrono simulation script that models the folding of a tablecloth using shell elements. The script includes the initialization of the PyChrono environment, the creation of the tablecloth with shell elements, setting up the Irrlicht visualization system, and using the PardisoMKL solver.

```python
import pychrono as chrono
import pychrono.fea as fea
import pychrono.irrlicht as irr
import pychrono.mkl as mkl
import numpy as np

# Initialize Chrono
chrono.SetChronoDataPath('path/to/chrono/data/')

# Create the physical system
mysystem = chrono.ChSystemNSC()

# Set the solver
mysystem.SetSolverType(chrono.ChSolver.Type_PARDISOMKL)
mysystem.SetSolverMaxIterations(150)

# Set the timestep
time_step = 0.001
mysystem.SetTimestep(time_step)

# Create the mesh for the tablecloth
mesh = fea.ChMesh()

# Dimensions of the tablecloth
length = 2.0  # Length in meters
width = 2.0   # Width in meters
nx = 20       # Number of elements along the length
ny = 20       # Number of elements along the width

# Material properties
rho = 1000    # Density in kg/m^3
E = 1e6       # Young's modulus in Pa
nu = 0.3      # Poisson's ratio
thickness = 0.01  # Thickness in meters

# Create the Kirchhoff material
material = fea.ChMaterialShellKirchhoff(rho, E, nu)

# Add nodes to the mesh
for i in range(nx + 1):
    for j in range(ny + 1):
        x = i * length / nx
        y = j * width / ny
        node = fea.ChNodeFEAxyzrot(chrono.ChVectorD(x, y, 0))
        node.SetMass(thickness * rho * (length / nx) * (width / ny))
        mesh.AddNode(node)

# Add elements to the mesh
for i in range(nx):
    for j in range(ny):
        n1 = i * (ny + 1) + j
        n2 = n1 + 1
        n3 = (i + 1) * (ny + 1) + j
        n4 = n3 + 1
        element = fea.ChElementShellANCF_3451()
        element.SetNodes(
            mesh.GetNode(n1),
            mesh.GetNode(n2),
            mesh.GetNode(n3),
            mesh.GetNode(n4)
        )
        element.SetMaterial(material)
        mesh.AddElement(element)

# Attach the mesh to the system
mesh.SetAutomaticGravity(True)
mysystem.Add(mesh)

# Create the Irrlicht visualization system
vis = irr.ChVisualSystemIrrlicht()
vis.AttachSystem(mysystem)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('Tablecloth Folding Simulation')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataPath() + 'logo_pychrono_alpha.png')
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(3, 3, 3))
vis.AddTypicalLights()

# Run the simulation
while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    mysystem.DoStepDynamics(time_step)

# Finalize the visualization system
vis.GetDevice().closeDevice()
```

### Explanation:
1. **Initialize Chrono:** Set the path to the Chrono data files.
2. **Create the Physical System:** Initialize `ChSystemNSC` and set the PardisoMKL solver with a maximum of 150 iterations.
3. **Set the Timestep:** Define a simulation timestep of 0.001 seconds.
4. **Create the Mesh:** Define the dimensions and material properties for the tablecloth. Add nodes and shell elements to the mesh.
5. **Attach the Mesh to the System:** Enable automatic gravity for the mesh and add it to the system.
6. **Create the Visualization System:** Use Irrlicht for visualization, setting up the window size, title, camera, and lights.
7. **Run the Simulation:** Execute the simulation loop, updating the visualization and the system dynamics at each step.

Ensure you have the Chrono libraries and dependencies correctly installed and configured in your environment to run this script successfully.
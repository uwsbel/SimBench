 Sure, here's a basic PyChrono script that follows your instructions. Please note that you may need to adjust the parameters and properties according to your specific needs.

```python
from pychrono import core, fea, irrlicht

# 1. Initialize the PyChrono environment and core components
my_system = core.ChSystemSMC()

# 2. Add the required physical systems and objects as specified

# Create a mesh
mesh = fea.ChMesh()
mesh.SetAutomaticGrids(True)
mesh.SetAutomaticNodes(True)

# Create beam section
section = fea.ChBeamSectionEuler()
section.SetDensity(7800)  # density [kg/m^3]
section.SetYoungModulus(2e11)  # young modulus [Pa]
section.SetPoissonRatio(0.3)  # poisson ratio
section.SetGshear(8e10)  # shear modulus [Pa]
section.SetInertiaXX(1e-6)  # area moment of inertia [m^4]
section.SetInertiaYY(1e-6)
section.SetInertiaZZ(1e-6)
section.SetInertiaXZ(0)
section.SetInertiaYZ(0)
section.SetInertiaXY(0)

# Create beam material
material = fea.ChMaterialSurfaceNSC()
material.SetFriction(0.4)  # friction coefficient
material.SetRestitution(0.1)  # restitution coefficient

# Create beam finite elements
beam_fe = fea.ChElementBeamEuler()
beam_fe.SetSection(section)
beam_fe.SetMaterialSurface(material)

# Add nodes and beams to the mesh
node1 = mesh.AddNode(core.ChVectorD(0, 0, 0), False)
node2 = mesh.AddNode(core.ChVectorD(1, 0, 0), False)
mesh.AddElement(beam_fe, [node1, node2])

# Add the mesh to the system
my_system.Add(mesh)

# 3. Set necessary default parameters such as positions, forces, and interactions

# Apply a force to the second node
Fx = 100  # [N]
Fy = 0
Fz = 0
node2.SetForce(core.ChVectorD(Fx, Fy, Fz))

# Fix the first node
node1.SetPos_dt(core.ChVectorD(0, 0, 0))
node1.SetWvel_par(core.ChVectorD(0, 0, 0))
node1.SetWvel_par(core.ChVectorD(0, 0, 0))

# Initialize the Irrlicht application for visualization
app = irrlicht.ChIrrApp(my_system, core.ChVectorD(0.0, 0.0, 0.0), false, false)
app.AssetBindAll();
app.AssetUpdateAll();
app.AddTypicalLights()
app.AddTypicalSky()
app.AddLogo()

# Run the simulation loop using the Irrlicht engine for real-time rendering
while app.GetDevice().run():
    app.BeginScene()
    app.DrawAll()
    app.DoStep()
    app.EndScene()
```

This script creates a simple beam finite element simulation with two nodes and one beam element. The first node is fixed, and a force is applied to the second node. The simulation is visualized using the Irrlicht engine.
 Sure, here's a basic PyChrono simulation script based on your instructions. Please note that you may need to adjust the script according to your specific requirements and environment setup.

```python
from chrono import ChSystemNSC
from chrono.vehicle import ChVehicleHMMWV
from chrono.vehicle.driver import ChDriver
from chrono.vehicle.terrain import RigidTerrain
from chrono.vehicle.sensors import ChImuSensor, ChGpsSensor
from chrono.irrlicht import ChIrrApp

# 1. Initialize the PyChrono environment and core components
system = ChSystemNSC.create()
system.Set_G_acc(ChVectorD(0, 0, -9.81))

# 2. Add the required physical systems and objects as specified

# Create the terrain
terrain = RigidTerrain(system)

# Create the HMMWV vehicle
vehicle = ChVehicleHMMWV(system)
vehicle.SetChassisFixed(False)
vehicle.Initialize()

# Create the driver system
driver = ChDriver(vehicle)

# Create the IMU and GPS sensors
imu_sensor = ChImuSensor(vehicle.GetChassis())
gps_sensor = ChGpsSensor(vehicle.GetChassis())

# 3. Set necessary default parameters such as positions, forces, and interactions

# Set initial vehicle position
vehicle.GetChassis().SetPos(ChVectorD(0, 0, 0.5))

# Set driver inputs
driver.steering_controller.set_steering_angle(0)
driver.throttle_controller.set_throttle_value(0)
driver.braking_controller.set_braking_force(0)

# Initialize Irrlicht application for visualization
app = ChIrrApp(system, 'HMMWV Simulation', core.get_chrono_data_file('chrono/vehicle/hmmwv/hmmwv.obj'), ChVectorD(0, 0, 0))
app.AddTypicalLights()
app.AddSkyBox()
app.AssetBindAll()
app.AssetUpdateAll()

# Simulation loop
while app.GetDevice().run():
    app.BeginScene()
    app.DrawAll()
    app.DoStep()

    # Update sensor data
    imu_data = imu_sensor.GetData()
    gps_data = gps_sensor.GetData()

    # Print vehicle mass
    print("Vehicle mass: ", vehicle.GetVehicleMass())

    app.EndScene()

# Clean up
del system
```

This script initializes a PyChrono environment, adds an HMMWV vehicle, terrain, driver, IMU and GPS sensors, and an Irrlicht visual interface. It then runs a simulation loop that updates the sensor data, prints the vehicle mass, and renders the scene at each step.
 Sure, here's a basic PyChrono simulation script based on your instructions. Please note that you may need to adjust the parameters and settings according to your specific requirements.

```python
from pychrono import core, vehicle, irrlicht
from pychrono.vehicle import ChVehicleModelData

# 1. Initialize the PyChrono environment and core components
my_system = core.ChSystemNSC()

# 2. Add the required physical systems and objects as specified

# Create the terrain
terrain = core.ChBodyEasyBox(10, 10, 0.5, 1000, True, True, core.ChMaterialSurfaceNSC())
terrain.SetPos(core.ChVectorD(0, 0, -0.5))
terrain.GetMaterialSurfaceNSC().SetFriction(0.5)
terrain.GetMaterialSurfaceNSC().SetRestitution(0.1)
my_system.Add(terrain)

# Create the Kraz vehicle
vehicle_data = ChVehicleModelData()
vehicle_data.SetEngineType(vehicle.ChVehicleModelData.ENG_TYPE_SIMPLEMAP)
vehicle_data.SetEngineMaxRpm(2000)
vehicle_data.SetEngineMaxTorque(200)
vehicle_data.SetEngineIdleRpm(1000)
vehicle_data.SetEngineIdleTorque(0.1)
vehicle_data.SetEngineInertia(0.1)
vehicle_data.SetTransmissionType(vehicle.ChVehicleModelData.TRANSMISSION_TYPE_SIMPLE)
vehicle_data.SetTransmissionGearRatios([4, 2, 1])
vehicle_data.SetTransmissionGearShifts([1000, 1500, 2000])
vehicle_data.SetDifferentialType(vehicle.ChVehicleModelData.DIFF_TYPE_LOCKED)
vehicle_data.SetDifferentialRatio(4)
vehicle_data.SetWheelType(vehicle.ChVehicleModelData.WHEEL_TYPE_SIMPLE)
vehicle_data.SetWheelMass(100)
vehicle_data.SetWheelRadius(0.5)
vehicle_data.SetWheelWidth(0.2)
vehicle_data.SetWheelInertia(1)
vehicle_data.SetWheelMaxSteer(0.5)
vehicle_data.SetWheelMaxTorque(200)
vehicle_data.SetWheelMaxBrakeTorque(500)
vehicle_data.SetWheelRollingFrictionCoeff(0.01)
vehicle_data.SetWheelSpindleFrictionCoeff(0.1)
vehicle_data.SetWheelTireFrictionCoeff(1)
vehicle_data.SetChassisMass(1000)
vehicle_data.SetChassisInertiaXX(100)
vehicle_data.SetChassisInertiaYY(100)
vehicle_data.SetChassisInertiaZZ(200)
vehicle_data.SetChassisInertiaXY(0)
vehicle_data.SetChassisInertiaXZ(0)
vehicle_data.SetChassisInertiaYZ(0)
vehicle_data.SetChassisPos(core.ChVectorD(0, 0, 0.5))
vehicle_data.SetChassisFront(core.ChVectorD(0, 1, 0))
vehicle_data.SetChassisUp(core.ChVectorD(0, 0, 1))
vehicle_data.SetChassisCollision(True)
vehicle_data.SetChassisCollisionFamily(1)
vehicle_data.SetChassisCollisionFamilyMaskNoContact(2)
vehicle_data.SetChassisVisualizationType(vehicle.ChVehicleModelData.VIS_TYPE_NONE)
vehicle_data.SetWheelVisualizationType(vehicle.ChVehicleModelData.VIS_TYPE_NONE)
vehicle_data.Initialize()

kraz = vehicle.ChVehicle(my_system, vehicle_data)
my_system.Add(kraz)

# Initialize a driver system for vehicle control
driver = vehicle.ChDriver()
driver.Initialize(kraz)
my_system.Add(driver)

# 3. Set necessary default parameters such as positions, forces, and interactions

# Set initial conditions for the vehicle
kraz.SetPos(core.ChVectorD(0, 0, 1))
kraz.SetPos_dt(core.ChVectorD(0, 0, 0))
kraz.SetRot(core.ChQuaternionD(1, 0, 0, 0))
kraz.SetWvel_par(core.ChVectorD(0, 0, 0))

# Create a real-time visualization using Irrlicht with camera settings and lighting
vis_system = irrlicht.ChIrrApp(my_system, "Kraz Simulation", core.ChVectorD(800, 600), False, False)
vis_system.AddTypicalLights()
vis_system.AddTypicalSky()
vis_system.AddCamera(core.ChVectorD(0, 10, 10), core.ChVectorD(0, 0, 0))

# Implement a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep, maintaining real-time execution
while vis_system.GetDevice().run():
    vis_system.BeginScene()
    vis_system.DrawAll()
    vis_system.DoStep()
    vis_system.EndScene()
```

This script should create a basic simulation of a Kraz vehicle on a rigid terrain. The vehicle is controlled by a driver system, and the simulation is visualized in real-time using Irrlicht. The simulation loop advances the vehicle, terrain, driver, and visual system at each timestep.
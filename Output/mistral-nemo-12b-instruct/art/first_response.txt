Here's a Python script using PyChrono to simulate an ARTcar vehicle on a rigid terrain with Irrlicht visualization, following the given instructions:

```python
import pychrono as chrono
import numpy as np

# Initialize PyChrono environment and core components
sim = chrono.ChSimulation()
sim.SetTimestep(0.01)  # Set timestep to 0.01 seconds for 100 Hz simulation
sim.SetMaxPenetrationDepth(1e-3)  # Set maximum penetration depth

# Create a RigidTerrain with defined dimensions and add a custom texture
terrain = chrono.ChTerrain()
terrain.SetPlane(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0))  # Set terrain plane
terrain.SetMaterial(chrono.ChMaterialSurfaceNSC())  # Set terrain material
terrain.SetTexture(chrono.ChTexture("path/to/terrain_texture.png"))  # Set terrain texture
sim.Add(terrain)

# Initialize the ARTcar vehicle with specific parameters
vehicle = chrono.ArticulatedVehicle()
vehicle.SetChassisBody(chrono.ChBodyEasyBox(1, 2, 3, 100, chrono.ChMaterialSurfaceNSC()))  # Set chassis body
vehicle.SetChassisLocation(chrono.ChVectorD(0, 1, 0))  # Set chassis location
vehicle.SetChassisOrientation(chrono.Q_from_AngX(chrono.CH_C_PI / 2))  # Set chassis orientation
vehicle.SetContactMethod(chrono.ChContactMethod_NSC)  # Set contact method
vehicle.SetVisualizationType(chrono.ChVisualizationType_MESH)  # Set visualization type

# Add wheels to the vehicle
wheel = chrono.ChWheel()
wheel.SetSpokeRadius(0.2)
wheel.SetTireRadius(0.3)
wheel.SetTireWidth(0.2)
wheel.SetSuspensionRestLength(0.5)
wheel.SetSuspensionStiffness(20000)
wheel.SetSuspensionDamping(2000)
vehicle.AddWheel(wheel, chrono.ChVectorD(1, 1, 1), chrono.ChVectorD(0, -1, 0), True)  # Front left wheel
vehicle.AddWheel(wheel, chrono.ChVectorD(-1, 1, 1), chrono.ChVectorD(0, -1, 0), True)  # Front right wheel
vehicle.AddWheel(wheel, chrono.ChVectorD(1, 1, -1), chrono.ChVectorD(0, -1, 0), False)  # Rear left wheel
vehicle.AddWheel(wheel, chrono.ChVectorD(-1, 1, -1), chrono.ChVectorD(0, -1, 0), False)  # Rear right wheel

# Set up an interactive driver system to control the vehicle's steering, throttle, and braking
driver = chrono.ChVehicleDriver()
driver.SetSteering(0.5)  # Set initial steering value (between -1 and 1)
driver.SetThrottle(0.5)  # Set initial throttle value (between 0 and 1)
driver.SetBrake(0)  # Set initial brake value (between 0 and 1)

# Add the vehicle and driver to the simulation
sim.Add(vehicle)
sim.Add(driver)

# Set up Irrlicht for visualization
app = chrono.ChIrrApp(sim, "ARTcar Simulation")
app.SetTimestep(0.01)  # Set timestep to 0.01 seconds for 50 FPS simulation
app.AddTypicalSky(chrono.ChColor(0.6, 0.6, 0.6))  # Add typical sky for visualization
app.AddTypicalLights(chrono.ChVectorD(4, 4, 4))  # Add typical lights for visualization
app.Add(terrain)  # Add terrain to the visualization
app.Add(vehicle)  # Add vehicle to the visualization

# Simulation loop that updates vehicle dynamics and visualization in real time
while app.GetDevice().run():
    sim.DoStep()
    app.BeginScene(True, True, chrono.ChColor(0.9, 0.9, 0.9))  # Begin scene for visualization
    app.DrawAll()  # Draw all objects in the scene
    app.EndScene()  # End scene for visualization
    app.GetDevice().driver.sleep(1)  # Sleep for a short period to limit FPS
```

Make sure to replace `"path/to/terrain_texture.png"` with the actual path to your custom texture file.

This script initializes the PyChrono environment, creates a RigidTerrain with a custom texture, initializes an ARTcar vehicle with specific parameters, sets up an interactive driver system, and implements a simulation loop that updates the vehicle dynamics and visualization in real time, displaying the simulation at 50 frames per second.
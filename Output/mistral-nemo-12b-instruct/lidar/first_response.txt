Here's a Python script using PyChrono to simulate the described scenario. Make sure you have PyChrono and the required libraries installed (`numpy`, `pywavefront`, `pybullet`).

```python
import numpy as np
import pybullet as p
import pywavefront
import pychrono as pc
from pychrono.sensors import LidarSensor, SensorManager
from pychrono.utils import add_noise, visualize_lidar_data

# Initialize PyChrono environment and core components
pc.init()
physics = pc.PhysicsClient(p.GUI)
scene = pc.Scene(physics)

# Load triangular mesh from Wavefront .obj file
mesh = pywavefront.Wavefront('path/to/your/mesh.obj', collect_faces=True)
body = scene.add_fixed_body(mesh.vertices, mesh.faces, mass=0)

# Set default parameters
body.set_position([0, 0, 0])
body.set_orientation(p.getQuaternionFromEuler([0, 0, 0]))

# Create a lidar sensor and add it to the sensor manager
lidar = LidarSensor(0, 0, 0, 360, 10, 10, 10, 0.1)
sensor_manager = SensorManager()
sensor_manager.add_sensor(lidar)

# Add lidar sensor to the body
body.add_sensor(sensor_manager)

# Set lidar data saving options
lidar.set_save_data(True)
lidar.set_save_path('lidar_data.npy')

# Set lidar noise filter parameters
lidar.set_noise_filter(add_noise, 0.1)

# Set lidar visualization parameters
lidar.set_visualization(True)
lidar.set_visualization_range(10)

# Initialize lidar orbit parameters
orbit_radius = 5
orbit_angle = 0

# Simulation parameters
dt = 0.01
sim_time = 10

# Simulation loop
for t in np.arange(0, sim_time, dt):
    # Update lidar position in orbit around the mesh
    lidar.set_position([orbit_radius * np.cos(orbit_angle), orbit_radius * np.sin(orbit_angle), 2])
    lidar.set_orientation(p.getQuaternionFromEuler([0, orbit_angle, 0]))
    orbit_angle += dt * 0.5  # Adjust orbit speed

    # Simulate one step
    scene.step(dt)

    # Print lidar buffer data at each simulation step
    print(f"Time: {t:.2f} s - Lidar buffer data:\n{lidar.get_buffer_data()}")

    # Visualize lidar data
    visualize_lidar_data(lidar.get_buffer_data(), lidar.get_position(), lidar.get_orientation())

# Save lidar data to file
lidar.save_data()

# Disconnect from the physics server
pc.disconnect()
```

Replace `'path/to/your/mesh.obj'` with the path to your Wavefront .obj file. This script loads the mesh, adds a lidar sensor to it, and simulates the system while updating the lidar's position in an orbit around the mesh. It prints the lidar buffer data at each simulation step and visualizes the lidar data. The lidar data is also saved to a file named 'lidar_data.npy'.
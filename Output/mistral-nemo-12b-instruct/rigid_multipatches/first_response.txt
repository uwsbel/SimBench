Here's a Python script using PyChrono to simulate an HMMWV on a complex rigid terrain with Irrlicht for visualization. This script assumes you have the necessary meshes and textures for the vehicle and terrain patches.

```python
import pychrono as pc
import pychrono.irrlicht as irc
import pychrono.vehicle as vehicle
import pychrono.terrain as terrain
import numpy as np

# Initialize PyChrono environment and core components
pc.set_log_level(pc.LogLevel.INFO)
sim = pc.Simulation()
viewer = irc.Viewer(sim)
sim.set_max_steps(1000)
sim.set_dt(0.01)  # Set timestep to 0.01 seconds

# Initialize the vehicle with specific parameters
hmmwv = vehicle.HMMWV(sim)
hmmwv.set_position(np.array([0, 0, 0.5]))  # Set initial position
hmmwv.set_engine_type(vehicle.EngineType.ICE)  # Internal Combustion Engine
hmmwv.set_drivetrain_type(vehicle.DrivetrainType.FOUR_WHEEL_DRIVE)  # 4WD
hmmwv.set_mesh_visualization(True)  # Enable mesh visualization for all vehicle components

# Construct a terrain with diverse surface types
terrain_manager = terrain.TerrainManager(sim)

# Flat patch with different textures
flat_patch = terrain.StaticPlane(terrain_manager)
flat_patch.set_position(np.array([0, -5, 0]))
flat_patch.set_size(10, 10)
flat_patch.set_texture("path/to/texture1.png")
flat_patch.set_roughness(0.8)
flat_patch.set_friction(0.7)

# Mesh-based patch for a bump
bump_patch = terrain.StaticMesh(terrain_manager)
bump_patch.set_position(np.array([5, -5, 0]))
bump_patch.set_mesh("path/to/bump_mesh.obj")
bump_patch.set_texture("path/to/bump_texture.png")
bump_patch.set_roughness(0.9)
bump_patch.set_friction(0.6)

# Heightmap-based patch for varying elevations
heightmap_patch = terrain.Heightmap(terrain_manager)
heightmap_patch.set_position(np.array([-5, -5, 0]))
heightmap_patch.set_size(10, 10)
heightmap_patch.set_heightmap("path/to/heightmap.png")
heightmap_patch.set_texture("path/to/heightmap_texture.png")
heightmap_patch.set_roughness(0.85)
heightmap_patch.set_friction(0.75)

# Incorporate an interactive driver system
driver = vehicle.Driver(hmmwv)
driver.set_steering(0)  # Neutral steering
driver.set_throttle(0.5)  # Medium throttle
driver.set_brake(0)  # No braking

# Simulation loop
while not viewer.is_closed():
    sim.step()
    viewer.render()
    driver.update()  # Update driver controls

# Clean up
sim.stop()
viewer.close()
```

Make sure to replace `"path/to/texture1.png"`, `"path/to/bump_mesh.obj"`, `"path/to/bump_texture.png"`, `"path/to/heightmap.png"`, and `"path/to/heightmap_texture.png"` with the actual paths to your textures and meshes.

This script initializes the HMMWV with the specified parameters, constructs a complex terrain with diverse surface types, and incorporates an interactive driver system to control the vehicle. The simulation updates at a consistent timestep (0.01 seconds) and renders the scene in real-time using Irrlicht.
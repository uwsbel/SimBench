Here's a Python script using PyChrono to simulate a Jeffcott rotor using an Isogeometric Analysis (IGA) beam. This script assumes you have PyChrono and its dependencies installed. If not, you can install them using `pip install pychrono`.

```python
import pychrono as pc
import numpy as np

# Initialize PyChrono environment and core components
pc.set_log_level(pc.LogLevel.INFO)
sim = pc.Simulation()
scene = pc.Scene()
sim.set_active_scene(scene)

# Create a beam using IGA
beam = pc.IGABeam(
    name="beam",
    points=np.array([[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0]]),
    cross_sections=[pc.CrossSection.rectangular(0.1, 0.05)],
    material=pc.Material(YoungModulus=1e6, PoissonRatio=0.3, Density=1000),
)
scene.add(beam)

# Attach a flywheel at the center of the beam
flywheel = pc.Sphere(
    name="flywheel",
    radius=0.2,
    material=pc.Material(YoungModulus=1e6, PoissonRatio=0.3, Density=1000),
    pos=[1.5, 0, 0],
)
beam.attach(flywheel, [1.5, 0, 0], [0, 0, 0])

# Add a rotational motor that drives one end of the beam
motor = pc.Motor(
    name="motor",
    pos=[0, 0, 0],
    axis=[1, 0, 0],
    max_torque=100,
    target_omega=10,
)
scene.add(motor)
motor.connect(beam, [0, 0, 0], [1, 0, 0])

# Set necessary default parameters
beam.set_default_parameters(
    gravity=[0, -9.81, 0],
    time_step=0.01,
    max_steps=1000,
)

# Add FEM visualization
fem_vis = pc.FEMVisualizer(beam)
scene.add(fem_vis)

# Add Irrlicht window to observe the dynamics
irrlicht = pc.IrrlichtVisualizer()
scene.add(irrlicht)

# Run the simulation
sim.run()

# Save the simulation to a file (optional)
sim.save("jeffcott_rotor.pcd")
```

This script creates a Jeffcott rotor system with an IGA beam, a flywheel at its center, and a rotational motor driving one end of the beam. The script also includes FEM visualization and an Irrlicht window to observe the dynamics of the beam and flywheel system. The simulation is run for 1000 time steps with a time step of 0.01 seconds.
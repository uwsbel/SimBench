Here is a basic example of a PyChrono simulation using beam finite elements:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.SetChronoDataPath("/path/to/chrono/data")

# Create a physical system
my_system = chrono.ChSystemNSC()

# Create a mesh composed of beams and nodes
num_beams = 10
beam_length = 1.0
beam_radius = 0.1
beam_density = 1000.0
beam_young_modulus = 2.1e11
beam_poisson_ratio = 0.3

# Create nodes
nodes = []
for i in range(num_beams + 1):
    node = chrono.ChNodeFEAxyz(chrono.ChVectorD(i * beam_length, 0, 0))
    my_system.Add(node)
    nodes.append(node)

# Create beams
beams = []
for i in range(num_beams):
    beam = chrono.ChElementBeamEuler()
    beam.SetNodes(nodes[i], nodes[i + 1])
    beam.SetLength(beam_length)
    beam.SetRadius(beam_radius)
    beam.SetDensity(beam_density)
    beam.SetYoungModulus(beam_young_modulus)
    beam.SetPoissonRatio(beam_poisson_ratio)
    my_system.Add(beam)
    beams.append(beam)

# Add visualization
my_visualization = chronoirr.ChVisualSystemIrrlicht()
my_visualization.SetWindowSize(800, 600)
my_visualization.SetWindowTitle("PyChrono Beam Finite Elements")
my_visualization.Initialize()
my_visualization.AddLogo(chrono.GetChronoDataFile("logo_pychrono_alpha.png"))
my_visualization.AddSkyBox()
my_visualization.AddCamera(chrono.ChVectorD(0, 0, 5))
my_visualization.AddTypicalLights()

# Add visualization assets for nodes and beams
for node in nodes:
    my_visualization.AddSphere(node, beam_radius * 2)
for beam in beams:
    my_visualization.AddTube(beam, beam_radius, 16)

# Run the simulation loop
my_timer = chrono.ChRealtimeStepTimer()
while my_visualization.Run():
    my_timer.Advance()
    my_system.DoStepDynamics(my_timer.GetTimeStep())
    my_visualization.Render()

# Close the visualization
my_visualization.CloseWindow()
```

This script creates a physical system with a mesh composed of 10 beams and 11 nodes. The beams have specific properties such as length, radius, density, Young's modulus, and Poisson's ratio. The script also adds visualization using the Irrlicht engine for real-time rendering. The simulation loop runs until the visualization window is closed.
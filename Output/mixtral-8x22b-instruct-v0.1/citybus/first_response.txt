To create a simulation script based on the given instructions, we will use PyChrono and Irrlicht for visualization. Here's a step-by-step breakdown of the code:

1. Import the required libraries:
```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np
```

2. Initialize the PyChrono environment and core components:
```python
# Create a Chrono::Engine instance
my_application = chronoirr.ChIrrApp(chronoirr.NullMaterial(), chronoirr.COREDLL_AUTODETECT, "CityBus Simulation")

# Set the window size and position
my_application.SetWindowSize(800, 600)
my_application.SetWindowPosition(50, 50)

# Create a Chrono::Engine instance
my_system = chrono.ChSystemNSC()
```

3. Add the required physical systems and objects:
```python
# Create a CityBus vehicle
bus = chrono.ChBodyEasyCylinder(1.5, 3, 1000, True, True)
bus.SetPos(chrono.ChVectorD(0, 0, 1))
bus.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))
my_system.Add(bus)

# Create a tire model
tire = chrono.ChTire()
tire.SetTireType(chrono.ChTire::Type::CYLINDER)
tire.SetTireRadius(0.5)
tire.SetTireWidth(0.2)
tire.SetTireSteering(0)
tire.SetTireFriction(0.9)
tire.SetTireGrip(0.9)
tire.SetTireDamping(0.1)
tire.SetTireStiffness(10000)

# Create a RigidTerrain with a custom texture
terrain = chrono.ChRigidTerrain(my_system.GetGroundBody())
terrain.SetTexture(chrono.GetChronoDataFile("terrain/textures/grass.png"))
terrain.Add(chrono.ChBoxShape(chrono.ChVectorD(10, 10, 1), chrono.ChVectorD(0, 0, 0)))
terrain.Initialize()

# Add the tire to the vehicle
bus.AddAsset(tire)
```

4. Set necessary default parameters such as positions, forces, and interactions:
```python
# Set the camera to follow the vehicle
my_application.AddTypicalCamera(chronoirr.Vec(0, 0, 5), chronoirr.Vec(0, 0, 0))

# Create an interactive driver system
driver = chrono.ChDriver::Inputs()
driver.SetSteeringDelay(0.1)
driver.SetThrottle(0.5)
driver.SetBraking(0)
```

5. Implement the simulation loop:
```python
# Set the simulation step size
my_system.SetTimestep(0.01)

# Run the simulation loop at 50 frames per second
while my_application.GetDevice().run():
    # Update the vehicle dynamics
    my_system.DoStepDynamics(0.02)

    # Update the driver inputs
    driver.SetSteering(my_application.GetKeyboard().GetKeyState(chronoirr.KEY_KEY_A) - my_application.GetKeyboard().GetKeyState(chronoirr.KEY_KEY_D))
    driver.SetThrottle(my_application.GetKeyboard().GetKeyState(chronoirr.KEY_KEY_W))
    driver.SetBraking(my_application.GetKeyboard().GetKeyState(chronoirr.KEY_KEY_S))

    # Render the scene in real time
    my_application.BeginScene()
    my_application.DrawAll()
    my_application.DoStep()
    my_application.EndScene()
```

This code sets up a basic simulation of a CityBus vehicle on a rigid terrain using PyChrono and Irrlicht for visualization. The vehicle is initialized with a tire model and a custom texture for the terrain. The simulation loop runs at 50 frames per second, updating the vehicle dynamics and rendering the scene in real time. The driver system allows for control of the vehicle's steering, throttle, and braking using keyboard inputs.
Here is a basic script that follows your instructions. Please note that you may need to adjust the parameters and paths to fit your specific needs.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import numpy as np

# 1. Initialize the PyChrono environment and core components
chrono.SetChronoDataPath("/path/to/chrono/data")
chrono.SetChronoDataPath("/path/to/irrlicht/data")

chrono.SetChronoDataPath("/path/to/vehicle/data")
chrono.SetChronoDataPath("/path/to/feda/data")

chrono.SetChronoDataPath("/path/to/terrain/data")

chrono.SetChronoDataPath("/path/to/hdf5/data")

chrono.SetChronoDataPath("/path/to/mesh/data")

chrono.SetChronoDataPath("/path/to/driver/data")

# 2. Add the required physical systems and objects
my_system = chrono.ChSystemNSC()

# Create the vehicle
my_vehicle = veh.ChVehicle()

# Set the location, orientation, contact method, and tire model
my_vehicle.SetContactMethod(veh.ChVehicle::CONTACT_METHOD_FEA)
my_vehicle.SetTireType(veh.ChVehicle::TireType::FEDA)
my_vehicle.SetChassisFixed(False)
my_vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0.5), chrono.Q_from_AngX(chrono.CH_C_PI_2)))

# Add the vehicle to the system
my_system.Add(my_vehicle)

# Create the terrain
my_terrain = veh.ChRigidTerrain(my_system)

# Set the terrain texture
my_terrain.SetTexture(chrono.GetChronoDataFile("terrain/textures/tile4.jpg"), 200, 200)

# Add the terrain to the system
my_system.Add(my_terrain)

# 3. Set necessary default parameters
# Set the camera to follow the vehicle
my_visualization = chronoirr.ChIrrApp(my_system, "Vehicle Demo", chronoirr.dimension2du(800, 600), False, True)
my_visualization.AddTypicalSky()
my_visualization.AddTypicalLogo(chrono.GetChronoDataFile("logo_pychrono_alpha.png"))
my_visualization.AddTypicalCamera(chrono.ChVectorD(0, -30, 1.5), chrono.ChVectorD(0, 0, 0))
my_visualization.AddTypicalLights()

# Set the mesh visualization type for all vehicle parts
my_vehicle.SetVisualizationType(veh.VisualizationType::MESH)

# Integrate an interactive driver system
my_driver = veh.ChIrrGuiDriver(my_visualization, my_vehicle)

# 4. Run the simulation loop
my_visualization.SetTimestep(0.02)
my_visualization.SetTryRealtime(True)

while my_visualization.Run():
    my_system.DoStepDynamics(my_visualization.GetTimestep())
    my_visualization.BeginScene()
    my_visualization.DrawAll()
    my_visualization.EndScene()
```

This script initializes a PyChrono environment, creates a FEDA vehicle and a rigid terrain, sets the camera to follow the vehicle, and integrates an interactive driver system. The simulation loop runs at 50 frames per second, updating the vehicle dynamics and rendering the scene in real time.
To create a PyChrono simulation integrated with ROS, follow the steps below:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.robot as robot
import rospy
import tf

# Initialize PyChrono
chrono.SetChronoDataPath("/path/to/chrono/data")
chrono.SetChronoDataPath("/path/to/chrono/data")

# Initialize ROS node
rospy.init_node("pychrono_ros_node")

# Create Chrono system
my_system = chrono.ChSystemNSC()

# Set gravitational acceleration
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
```

2. Add the required physical systems and objects:

```python
# Define physical material properties
my_material = chrono.ChMaterialSurfaceNSC()
my_material.SetFriction(0.5)
my_material.SetRestitution(0.1)

# Add a fixed floor
floor_geometry = chrono.ChBoxGeometry(chrono.ChVectorD(5, 5, 0.1))
floor_body = chrono.ChBodyEasyBox(5, 5, 0.1, 1000, True, True, my_material)
floor_body.SetPos(chrono.ChVectorD(0, 0, -0.05))
floor_body.SetBodyFixed(True)
my_system.Add(floor_body)

# Add a movable box
box_geometry = chrono.ChBoxGeometry(chrono.ChVectorD(0.5, 0.5, 0.5))
box_body = chrono.ChBodyEasyBox(0.5, 0.5, 0.5, 10, True, True, my_material)
box_body.SetPos(chrono.ChVectorD(0, 0, 1))
my_system.Add(box_body)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set initial velocities or forces if needed
box_body.SetPos_dt(chrono.ChVectorD(0, 0, -1))

# Add contact material between the floor and the box
my_system.AddContactMaterial(my_material, my_material, 0.5, 0.1)
```

4. Create a custom ROS handler to publish integer messages to a specified topic:

```python
class CustomROSHandler:
    def __init__(self, topic_name):
        self.publisher = rospy.Publisher(topic_name, Int32, queue_size=10)

    def publish_message(self, message):
        self.publisher.publish(message)
```

5. Configure the ROS manager with clock, body, and transform handlers, and register the custom handler:

```python
# Create ROS manager
my_ros_manager = robot.ChRosManager(my_system)

# Add clock handler
my_ros_manager.AddHandler(robot.ChRosClockHandler())

# Add body handler
my_ros_manager.AddHandler(robot.ChRosBodyHandler(my_system))

# Add transform handler
my_ros_manager.AddHandler(robot.ChRosTransformHandler(my_system))

# Register custom handler
custom_handler = CustomROSHandler("/my_custom_topic")
my_ros_manager.AddHandler(custom_handler)
```

6. Run a simulation loop, advancing the system and updating ROS communication at each timestep, while maintaining real-time execution:

```python
# Set simulation timestep
timestep = 0.01

# Set simulation duration
simulation_duration = 10

# Run simulation loop
while rospy.Time.now().to_sec() < simulation_duration:
    # Advance the system
    my_system.DoStepDynamics(timestep)

    # Update ROS communication
    my_ros_manager.Update()

    # Publish custom message
    custom_handler.publish_message(Int32(data=123))

    # Sleep to maintain real-time execution
    rospy.sleep(timestep)
```

This script will create a PyChrono simulation integrated with ROS, with a fixed floor and a movable box. The custom ROS handler will publish integer messages to the specified topic. The simulation will run for the specified duration, advancing the system and updating ROS communication at each timestep, while maintaining real-time execution.
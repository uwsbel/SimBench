To create a PyChrono simulation of a full HMMWV on a flat rigid terrain using Irrlicht for visualization, follow these steps:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Create the Chrono::Engine physical system
chrono.SetChronoDataPath("path/to/chrono/data")
my_system = chrono.ChSystemNSC()

# Create the Irrlicht visualization
my_application = chronoirr.ChIrrApp(my_system, "HMMWV Simulation", chronoirr.Dimensions(800, 600))
```

2. Add the required physical systems and objects:

```python
# Create the HMMWV vehicle
my_vehicle = veh.HMMWV()

# Set the vehicle location, orientation, and contact method
my_vehicle.SetChassisPosition(chrono.ChVectorD(0, 0, 0))
my_vehicle.SetChassisOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
my_vehicle.SetContactMethod(veh.ChContactMethod_FEA)

# Set the TMEASY tire model
my_vehicle.SetTireType(veh.ChVehicleTire_TMeasy)

# Add the vehicle to the physical system
my_system.Add(my_vehicle)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the vehicle's initial speed
my_vehicle.SetInitSpeed(10)

# Set the vehicle's initial steering angle
my_vehicle.SetSteeringValue(0.1)

# Set the vehicle's initial throttle and braking
my_vehicle.SetThrottle(0.5)
my_vehicle.SetBraking(0.2)
```

4. Set up a RigidTerrain with defined dimensions and texture:

```python
# Create the RigidTerrain
my_terrain = veh.RigidTerrain(my_system)

# Set the terrain dimensions
my_terrain.SetTexture(chronoirr.GetDataFile("terrain/textures/tile4.jpg"))
my_terrain.SetContactMaterial(veh.ChMaterialSurfaceNSC(0.9, 0.9, 0.01))
my_terrain.Initialize(chrono.ChVectorD(-100, 0, -100), chrono.ChVectorD(100, 0, 100))

# Add the terrain to the physical system
my_system.Add(my_terrain)
```

5. Configure an interactive driver system for steering, throttle, and braking:

```python
# Create the interactive driver system
my_driver = veh.ChIrrGuiDriver(my_application, my_vehicle)

# Set the driver's steering, throttle, and braking
my_driver.SetSteeringDelta(0.05)
my_driver.SetThrottleDelta(0.1)
my_driver.SetBrakingDelta(0.1)
```

6. Ensure the simulation loop runs in real time at 50 frames per second, updating the vehicle dynamics and rendering the scene:

```python
# Set the simulation step size
my_system.SetTimestepperType(chrono.ChTimestepper::Type::EULER_IMPLICIT_LINEARIZED)
my_system.SetSolverType(chrono.ChSolver::Type::MINRES)
my_system.SetSolverMaxIterations(100)
my_system.SetSolverTolerance(1e-10)
my_system.SetStep(0.01)

# Run the simulation loop
my_application.SetTimestep(0.02)
my_application.SetTryRealtime(True)
my_application.SetFPS(50)
my_application.Run()
```

This script will create a PyChrono simulation of a full HMMWV on a flat rigid terrain using Irrlicht for visualization, with the specified parameters and interactive driver system.
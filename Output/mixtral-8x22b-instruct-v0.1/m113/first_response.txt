To create a PyChrono simulation with the specified requirements, you can follow the steps below:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Create the Chrono::Engine physical system
physics_system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
visualization_system = chronoirr.ChIrrApp(physics_system, 'PyChrono Vehicle Simulation', chronoirr.Dim3d(800, 600))

# Enable contact visualization
visualization_system.AddTypicalLogo(chronoirr.GetChronoDataFile('logo_pychrono_alpha.png'))
visualization_system.AddTypicalSky(chronoirr.GetChronoDataFile('skybox/dawnmountain_ft.jpg'))
visualization_system.AddTypicalLights()
visualization_system.AddTypicalCamera(chronoirr.vector3df(0, 10, -20))
visualization_system.SetChaseCamera(chronoirr.vector3df(0, 0, 0), 10, 0.1)
visualization_system.SetTryRealtime(True)
```

2. Add the required physical systems and objects:

```python
# Create the M113 vehicle
vehicle = veh.ChVehicleM113()

# Set the initial position and orientation of the vehicle
vehicle.SetPos(chrono.ChVectorD(0, 0, 0))
vehicle.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))

# Add the vehicle to the physical system
physics_system.Add(vehicle)

# Create the rigid terrain
terrain = veh.ChVehicleTerrain()
terrain.SetContactFriction(0.9)
terrain.SetContactRestitution(0.01)
terrain.SetPlane(chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 1))

# Add the terrain to the physical system
physics_system.Add(terrain)

# Create the driver system
driver = veh.ChVehicleDriver()

# Set the driver's initial steering and throttle values
driver.SetSteering(0)
driver.SetThrottle(0)

# Add the driver to the vehicle
vehicle.AddDriver(driver)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the initial position and orientation of the vehicle
vehicle.SetPos(chrono.ChVectorD(0, 0, 0))
vehicle.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))

# Set the initial steering and throttle values for the driver
driver.SetSteering(0)
driver.SetThrottle(0)
```

4. Implement a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep, maintaining real-time execution:

```python
# Set the simulation step size
step_size = 0.01

# Run the simulation loop
while visualization_system.Run():
    # Advance the physical system
    physics_system.DoStepDynamics(step_size)

    # Update the visualization system
    visualization_system.BeginScene()
    visualization_system.DrawAll()
    visualization_system.EndScene()

    # Update the driver's steering and throttle values
    driver.SetSteering(0.5 * chronoirr.GetAsyncKeyState('A') - 0.5 * chronoirr.GetAsyncKeyState('D'))
    driver.SetThrottle(0.5 * chronoirr.GetAsyncKeyState('W') - 0.5 * chronoirr.GetAsyncKeyState('S'))
```

This script sets up a PyChrono simulation with an M113 vehicle, a rigid terrain, a driver system, and real-time visualization using Irrlicht. The simulation loop synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep, maintaining real-time execution.
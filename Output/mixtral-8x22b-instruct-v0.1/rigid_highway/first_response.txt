To create a PyChrono simulation of a full HMMWV on a custom mesh terrain using Irrlicht for visualization, follow these steps:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Create the Chrono::Engine physical system
physics_system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
visualization_system = chronoirr.ChIrrApp(physics_system, 'HMMWV Simulation', chronoirr.Dim3d(800, 600))

# Enable contact visualization
visualization_system.AddTypicalLogo(chronoirr.GetChronoDataFile('logo_pychrono_alpha.png'))
visualization_system.AddTypicalSky(chronoirr.GetChronoDataFile('skybox/dawnmountain_ft.jpg'))
visualization_system.AddTypicalLights()
visualization_system.AddTypicalCamera(chronoirr.vector3df(0, 10, -20))
visualization_system.AddTypicalFPS()
visualization_system.SetChaseCamera(chronoirr.ChTrackballWin(visualization_system.GetSystem(), visualization_system.GetVideoDriver()))
visualization_system.SetTryRealtime(True)
```

2. Add the required physical systems and objects:

```python
# Create the HMMWV vehicle
vehicle = veh.ChVehicle(veh.ChassisHMMWV())

# Set the vehicle's location, orientation, and contact method
vehicle.SetContactMethod(chrono.ChContactMethod_NSC)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0.5), chrono.Q_from_AngX(chrono.CH_C_PI_2)))

# Add the TMEASY tire model
vehicle.AddTire(veh.Tire_TMeasy())
vehicle.AddTire(veh.Tire_TMeasy())
vehicle.AddTire(veh.Tire_TMeasy())
vehicle.AddTire(veh.Tire_TMeasy())

# Add the vehicle to the physical system
physics_system.Add(vehicle)

# Create the custom terrain using collision and visual meshes
terrain = veh.ChTerrain(veh.Terrain_Mesh())
terrain.SetMeshFile('Highway_col.obj', 'Highway_vis.obj')
terrain.SetContactMethod(chrono.ChContactMethod_NSC)
terrain.SetFriction(0.9)
terrain.SetRestitution(0.01)
terrain.SetCompliance(0.001)
terrain.SetComplianceT(0.001)
terrain.SetDampingF(0.2)
terrain.SetDampingT(0.8)

# Add the terrain to the physical system
physics_system.Add(terrain)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the vehicle's initial speed
vehicle.SetInitSpeed(chrono.ChVectorD(0, 0, 0))

# Set the vehicle's steering, throttle, and braking control
vehicle.SetSteeringValue(0, 0)
vehicle.SetThrottleValue(0, 0.5)
vehicle.SetBrakingValue(0, 0)
```

4. Implement a custom driver system for steering, throttle, and braking control:

```python
# Create a custom driver system
class CustomDriver:
    def __init__(self, vehicle):
        self.vehicle = vehicle

    def Update(self, time):
        # Update steering, throttle, and braking control based on user input or custom logic
        pass

# Create an instance of the custom driver system
driver = CustomDriver(vehicle)
```

5. Ensure the simulation loop runs in real time at 50 frames per second, updating vehicle dynamics and rendering the scene:

```python
# Set the simulation step size
physics_system.SetTimestep(0.02)

# Run the simulation loop
while visualization_system.Run():
    # Update the vehicle dynamics
    physics_system.DoStepDynamics(0.02)

    # Update the custom driver system
    driver.Update(physics_system.GetChTime())

    # Render the scene
    visualization_system.BeginScene()
    visualization_system.DrawAll()
    visualization_system.EndScene()
```

This script initializes the PyChrono environment, adds the required physical systems and objects, sets necessary default parameters, and implements a custom driver system for steering, throttle, and braking control. The simulation loop runs in real time at 50 frames per second, updating vehicle dynamics and rendering the scene.
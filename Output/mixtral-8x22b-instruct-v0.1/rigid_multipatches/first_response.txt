To create a PyChrono simulation of an HMMWV on a complex rigid terrain with Irrlicht visualization, follow these steps:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# Create the Chrono::Engine physical system
physics = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
visualization = chronoirr.ChVisualSystemIrrlicht()

# Attach the visualization system to the physical system
physics.SetVisualSystem(visualization)

# Set the Irrlicht device to render the scene
visualization.SetWindowSize(800, 600)
visualization.SetWindowTitle("HMMWV on Complex Terrain")
visualization.Initialize()
```

2. Add the required physical systems and objects:

```python
# Create the HMMWV vehicle
vehicle = chrono.ChVehicle()

# Set the vehicle parameters
vehicle.SetChassisPosition(chrono.ChVectorD(0, 0, 0))
vehicle.SetEngineType(chrono.ChVehicle::EngineType::ENGINE_SIMPLE)
vehicle.SetDrivetrainType(chrono.ChVehicle::DrivetrainType::DRIVETRAIN_SIMPLE)

# Add mesh visualization to all vehicle components
vehicle.AddVisualizationAssets()

# Add the vehicle to the physical system
physics.Add(vehicle)

# Create the complex terrain
terrain = chrono.ChTerrain()

# Add flat patches with different textures
terrain.AddPatch(chrono.ChTerrainPatch(chrono.ChVectorD(-10, -10, 0), chrono.ChVectorD(10, -10, 0), chrono.ChVectorD(-10, 10, 0), chrono.ChVectorD(10, 10, 0), "terrain_texture1.png"))
terrain.AddPatch(chrono.ChTerrainPatch(chrono.ChVectorD(-10, 10, 0), chrono.ChVectorD(10, 10, 0), chrono.ChVectorD(-10, 20, 0), chrono.ChVectorD(10, 20, 0), "terrain_texture2.png"))

# Add a mesh-based patch for a bump
bump_mesh = chrono.ChTriangleMeshConnected()
bump_mesh.LoadWavefrontMesh("bump.obj")
terrain.AddPatch(chrono.ChTerrainPatch(bump_mesh, chrono.ChVectorD(0, 0, 0), chrono.ChQuaternionD(1, 0, 0, 0)))

# Add a heightmap-based patch for varying elevations
heightmap = chrono.ChHeightmap()
heightmap.LoadFromFile("heightmap.png")
terrain.AddPatch(chrono.ChTerrainPatch(heightmap, chrono.ChVectorD(-20, -20, 0), chrono.ChVectorD(20, -20, 0), chrono.ChVectorD(-20, 20, 0), chrono.ChVectorD(20, 20, 0)))

# Add the terrain to the physical system
physics.Add(terrain)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the initial position of the vehicle
vehicle.SetChassisPosition(chrono.ChVectorD(0, 0, 1))

# Set the initial steering angle
vehicle.SetSteeringValue(0)

# Set the initial throttle value
vehicle.SetThrottleValue(0)

# Set the initial braking value
vehicle.SetBrakingValue(0)

# Set the interaction between the vehicle and the terrain
vehicle.SetTerrain(terrain)
```

4. Incorporate an interactive driver system to control steering, throttle, and braking:

```python
# Create an interactive driver system
driver = chrono.ChIrrGuiDriver()

# Set the driver system to control the vehicle
driver.SetVehicle(vehicle)

# Set the driver system to render the scene in real time
driver.SetTimestep(0.01)
```

5. Ensure the simulation updates at a consistent timestep:

```python
# Set the simulation timestep
physics.SetTimestep(0.01)

# Run the simulation
while visualization.Run():
    physics.DoStepDynamics(0.01)
    visualization.BeginScene()
    visualization.DrawAll()
    visualization.EndScene()
```

This script creates a PyChrono simulation of an HMMWV on a complex rigid terrain with Irrlicht visualization. The vehicle is initialized with specific parameters, including position, engine type, and drivetrain type, and mesh visualization is added to all vehicle components. The terrain is constructed with diverse surface types, including flat patches with different textures, a mesh-based patch for a bump, and a heightmap-based patch for varying elevations. An interactive driver system is incorporated to control steering, throttle, and braking, ensuring the simulation updates at a consistent timestep while rendering the scene in real time.
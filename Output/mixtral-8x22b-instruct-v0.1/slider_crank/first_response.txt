To create a PyChrono simulation of a simple crank-slider mechanism, follow the steps below:

1. Import the required libraries:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np
```

2. Initialize the PyChrono environment and core components:

```python
# Create a Chrono::Engine instance
my_application = chronoirr.ChIrrApp(chronoirr.ChIrrApp.Type.CHRONO, "Crank Slider Mechanism", chronoirr.dimension2du(800, 600))

# Create a Chrono::System instance
my_system = chrono.ChSystemNSC()

# Set the gravity vector
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
```

3. Add the required physical systems and objects:

```python
# Create the floor (truss)
floor_thickness = 0.1
floor_size = 2.0
floor_material = chrono.ChMaterialSurfaceNSC()
floor_geometry = chrono.ChBoxGeometry(chrono.ChVectorD(floor_size, floor_thickness, floor_size))
floor_body = chrono.ChBodyEasyBox(floor_material, floor_size, floor_thickness, floor_size)
floor_body.SetPos(chrono.ChVectorD(0, -floor_thickness, 0))
floor_body.SetBodyFixed(True)
my_system.Add(floor_body)

# Create the crankshaft
crank_radius = 0.1
crank_length = 0.5
crank_material = chrono.ChMaterialSurfaceNSC()
crank_geometry = chrono.ChCylinderGeometry(crank_radius, crank_length)
crank_body = chrono.ChBodyEasyCylinder(crank_material, crank_radius, crank_length)
crank_body.SetPos(chrono.ChVectorD(0, crank_length / 2, 0))
my_system.Add(crank_body)

# Create the connecting rod
rod_length = 1.0
rod_radius = 0.05
rod_material = chrono.ChMaterialSurfaceNSC()
rod_geometry = chrono.ChCylinderGeometry(rod_radius, rod_length)
rod_body = chrono.ChBodyEasyCylinder(rod_material, rod_radius, rod_length)
rod_body.SetPos(chrono.ChVectorD(0, rod_length / 2, crank_radius + rod_radius))
my_system.Add(rod_body)

# Create the piston
piston_radius = 0.1
piston_length = 0.2
piston_material = chrono.ChMaterialSurfaceNSC()
piston_geometry = chrono.ChCylinderGeometry(piston_radius, piston_length)
piston_body = chrono.ChBodyEasyCylinder(piston_material, piston_radius, piston_length)
piston_body.SetPos(chrono.ChVectorD(0, piston_length / 2, rod_length + rod_radius + piston_radius))
my_system.Add(piston_body)
```

4. Set necessary default parameters such as positions, forces, and interactions:

```python
# Create a revolute joint between the crankshaft and the floor
crank_joint = chrono.ChLinkLockRevolute()
crank_joint.Initialize(floor_body, crank_body, chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.Q_from_AngX(np.pi / 2)))
my_system.Add(crank_joint)

# Create a revolute joint between the connecting rod and the crankshaft
rod_joint = chrono.ChLinkLockRevolute()
rod_joint.Initialize(crank_body, rod_body, chrono.ChCoordsysD(chrono.ChVectorD(0, crank_length / 2, crank_radius), chrono.Q_from_AngX(np.pi / 2)))
my_system.Add(rod_joint)

# Create a revolute joint between the piston and the connecting rod
piston_joint = chrono.ChLinkLockRevolute()
piston_joint.Initialize(rod_body, piston_body, chrono.ChCoordsysD(chrono.ChVectorD(0, rod_length / 2, rod_length), chrono.Q_from_AngX(np.pi / 2)))
my_system.Add(piston_joint)

# Create a motor to spin the crankshaft at a constant angular speed
motor_speed = 10.0  # rad/s
motor = chrono.ChLinkMotorRotationSpeed()
motor.Initialize(floor_body, crank_body, chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.Q_from_AngX(np.pi / 2)))
motor.Set_speed_reference(motor_speed)
my_system.Add(motor)
```

5. Visualize the simulation using the Irrlicht visualization system with customizable camera settings, lighting, and additional visual elements like textures and logos:

```python
# Set the camera position and orientation
my_application.SetCamera(chrono.ChVectorD(1, 1, 0.5), chrono.ChVectorD(0, 0, 0))

# Set the lighting
my_application.SetLight(chrono.ChVectorD(1, 1, 1), chrono.ChVectorD(0, 0, 0))

# Add visual elements like textures and logos (optional)
# ...

# Run the simulation
my_application.AddSystem(my_system)
my_application.Run()
```

This script creates a PyChrono simulation of a simple crank-slider mechanism with a floor, a crankshaft, a connecting rod, and a piston. The crankshaft is driven by a motor to spin at a constant angular speed. The simulation is visualized using the Irrlicht visualization system with customizable camera settings, lighting, and additional visual elements like textures and logos.
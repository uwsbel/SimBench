To create a PyChrono simulation with a Turtlebot robot on a rigid terrain, follow these steps:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Create the Chrono::Engine physical system
chrono.SetChronoDataPath("/path/to/chrono/data")
my_system = chrono.ChSystemNSC()

# Set gravity
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
```

2. Add the required physical systems and objects:

```python
# Create the ground body
ground = chrono.ChBodyEasyBox(20, 1, 20, 1000, True, True)
ground.SetPos(chrono.ChVectorD(0, -1, 0))
ground.SetBodyFixed(True)
my_system.Add(ground)

# Create the Turtlebot robot
turtlebot = chrono.ChBodyEasyBox(0.2, 0.1, 0.2, 10, True, True)
turtlebot.SetPos(chrono.ChVectorD(0, 0, 0))
turtlebot.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))
my_system.Add(turtlebot)
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the Turtlebot's initial position and orientation
turtlebot.SetPos(chrono.ChVectorD(0, 0, 0))
turtlebot.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))

# Set the Turtlebot's motor control
left_motor = chrono.ChLinkMotorRotationSpeed()
right_motor = chrono.ChLinkMotorRotationSpeed()

# Connect the motors to the Turtlebot's wheels
left_motor.Initialize(turtlebot, None, chrono.ChVectorD(0.1, 0, 0), chrono.ChVectorD(0, 1, 0))
right_motor.Initialize(turtlebot, None, chrono.ChVectorD(-0.1, 0, 0), chrono.ChVectorD(0, 1, 0))

my_system.Add(left_motor)
my_system.Add(right_motor)
```

4. Create a real-time visualization using Irrlicht with camera settings and lighting:

```python
# Create the Irrlicht application
application = chronoirr.ChIrrApp(my_system, "Turtlebot Simulation", chronoirr.dimension2du(800, 600), False, True)

# Set the camera position and orientation
application.GetCamera()->SetPosition(chrono.ChVectorD(0, 5, -5))
application.GetCamera()->SetFocalPoint(chrono.ChVectorD(0, 0, 0))

# Set the lighting
application.AddLightWithShadow(chrono.ChVectorD(5, 5, -5), chrono.ChVectorD(0, -1, 0), 10, 50, 50, 512, 2048)
application.AddTypicalLights()
```

5. Implement a simulation loop where the Turtlebot's motors control left and right turns at specified times, updating and rendering the robot at each timestep:

```python
# Set the simulation timestep
timestep = 0.01

# Set the motor speeds
left_speed = 10
right_speed = 10

# Set the turn times
turn_start = 2
turn_end = 4

# Run the simulation loop
while application.GetDevice().run():
    if application.GetDevice().isWindowActive():
        # Update the motor speeds based on the turn times
        if application.GetSystem()->GetChTime() >= turn_start and application.GetSystem()->GetChTime() <= turn_end:
            left_speed = 10
            right_speed = -10
        else:
            left_speed = 10
            right_speed = 10

        # Set the motor speeds
        left_motor.Set_speed_dt(left_speed * timestep)
        right_motor.Set_speed_dt(right_speed * timestep)

        # Update and render the simulation
        my_system.DoStepDynamics(timestep)
        application.BeginScene()
        application.DrawAll()
        application.EndScene()
```

This script will create a PyChrono simulation with a Turtlebot robot on a rigid terrain, using Irrlicht for real-time visualization. The Turtlebot's motors will control left and right turns at specified times, updating and rendering the robot at each timestep.
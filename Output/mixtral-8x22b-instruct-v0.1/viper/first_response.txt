To create a PyChrono simulation with a Viper rover on a rigid terrain, follow these steps:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Create a Chrono::Engine physical system
chrono.SetChronoDataPath("/path/to/chrono/data")  # Replace with the actual path
my_system = chrono.ChSystemNSC()

# Set gravity
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))
```

2. Add the required physical systems and objects:

```python
# Create a ground body
ground = chrono.ChBodyEasyBox(20, 0.1, 20, 1000, True, True)
ground.SetPos(chrono.ChVectorD(0, -0.1, 0))
ground.SetBodyFixed(True)
my_system.Add(ground)

# Initialize the Viper rover
viper = chrono.ChBodyEasyBox(1, 0.2, 2, 10, True, True)
viper.SetPos(chrono.ChVectorD(0, 0.1, 0))
my_system.Add(viper)

# Initialize the Viper rover's driver
driver = chrono.ChIrrGuiDriver(my_system, chronoirr.ChIrrApp(my_system, "Viper Rover Simulation", chronoirr.dimension2du(800, 600), False, False))
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the initial steering angle
steering_angle = 0

# Set the time period for the steering angle change
time_period = 10  # in seconds

# Set the steering angle change rate
steering_change_rate = np.pi / (2 * time_period)
```

4. Create a real-time visualization using Irrlicht with camera settings and lighting:

```python
# Set camera position and target
driver.GetCameraSystem().SetFar(100)
driver.GetCameraSystem().SetPos(chrono.ChVectorD(0, 5, -10))
driver.GetCameraSystem().SetTarget(chrono.ChVectorD(0, 0, 0))

# Set lighting
driver.GetLightSystem().SetLightDirection(chrono.ChVectorD(1, -1, -1))
driver.GetLightSystem().SetLightIntensity(1.5)
```

5. Implement a simulation loop where the rover's steering gradually changes over a specified time period, updating and rendering the rover at each timestep:

```python
# Simulation loop
while driver.Run():
    # Update the steering angle
    steering_angle += steering_change_rate * driver.GetTimestep()

    # Apply the steering angle to the rover
    # (Assuming you have a function to apply the steering angle to the rover)
    apply_steering_angle(viper, steering_angle)

    # Update and render the rover
    my_system.DoStepDynamics(driver.GetTimestep())
    driver.BeginScene()
    driver.DrawAll()
    driver.EndScene()
```

This script sets up a PyChrono simulation with a Viper rover on a rigid terrain, initializes the Chrono system with gravity and ground body, and creates a real-time visualization using Irrlicht with camera settings and lighting. The simulation loop gradually changes the rover's steering angle over a specified time period, updating and rendering the rover at each timestep.
```python
import chrono
import irrlicht

# Initialize PyChrono environment and core components
chrono.ChSystemSolver_MLS(chrono.ChSystem())
chrono.ChVisualSystemIrrlicht(my_application)

# Add the required physical systems and objects
floor = create_floor_truss(10, 1, 1)  # 10m length, 1m width, 1m height
crankshaft = create_cylinder(0.1, 0.5, 1)  # 0.1m radius, 0.5m length, 1kg mass
connecting_rod = create_cylinder(0.1, 1, 2)  # 0.1m radius, 1m length, 2kg mass
piston = create_box(0.1, 0.1, 0.5, 3)  # 0.1m width, 0.1m height, 0.5m length, 3kg mass

# Add joints and motor
create_revolute_joint(floor, crankshaft)
create_revolute_joint(crankshaft, connecting_rod)
create_spherical_joint(connecting_rod, piston)
motor = create_motor(crankshaft, [0, 0, 1], 10)  # Spin crankshaft at 10 rad/s

# Set necessary default parameters
set_default_positions(floor, connecting_rod, piston)
set_default_forces(motor)
set_interactions(floor, crankshaft, connecting_rod, piston)

# Visualization settings
my_application.set_camera_settings(distance=15, elevation=30)
my_application.set_ambient_lighting(0.2, 0.2, 0.2)
my_application.set_directional_lighting(0.5, 0.5, -1, 0.5, 0.5, -0.5)
add_textures_and_logos(floor, crankshaft, connecting_rod, piston)

def create_floor_truss(length, width, height):
    truss = chrono.ChBody()
    truss.SetBox(chrono.ChVectorD(length / 2, width / 2, height / 2), length, width, height)
    truss.SetPos(chrono.ChVectorD(0, 0, 0))
    truss.SetMass(0)
    truss.SetInertiaXX(chrono.ChVectorD(1, 1, 1))
    truss.SetCollide(False)
    return truss

def create_cylinder(radius, length, mass):
    cylinder = chrono.ChBody()
    cylinder.SetCylinder(chrono.ChVectorD(radius, radius, length / 2), radius, length)
    cylinder.SetPos(chrono.ChVectorD(0, 0, 0))
    cylinder.SetMass(mass)
    cylinder.SetInertiaXX(chrono.ChVectorD(1, 1, 1))
    return cylinder

def create_box(width, height, length, mass):
    box = chrono.ChBody()
    box.SetBox(chrono.ChVectorD(width / 2, height / 2, length / 2), width, height, length)
    box.SetPos(chrono.ChVectorD(0, 0, 0))
    box.SetMass(mass)
    box.SetInertiaXX(chrono.ChVectorD(1, 1, 1))
    return box

def create_revolute_joint(body1, body2):
    joint = chrono.ChLinkRevolute()
    joint.Initialize(body1, body2)
    system.AddLink(joint)

def create_spherical_joint(body1, body2):
    joint = chrono.ChLinkSpherical()
    joint.Initialize(body1, body2)
    system.AddLink(joint)

def create_motor(body, axis, speed):
    motor = chrono.ChLinkMotor()
    motor.Initialize(body, chrono.ChFrameD(chrono.ChVectorD(0, 0, 0), axis))
    motor.SetAngSpeed(speed)
    system.AddLink(motor)

def set_default_positions(floor, connecting_rod, piston):
    # Set initial positions of the bodies
    pass

def set_default_forces(motor):
    # Set forces and torques
    motor.SetForce(chrono.ChVectorD(0, 0, 0))
    motor.SetTorque(chrono.ChVectorD(0, 0, 5))

def set_interactions(floor, crankshaft, connecting_rod, piston):
    # Set collision detection and response
    pass

def add_textures_and_logos(floor, crankshaft, connecting_rod, piston):
    # Add textures and logos to the bodies
    pass

# Run the simulation
my_application.simulate()
```

This script initializes the PyChrono environment, creates the required physical systems and objects, sets necessary default parameters, and configures the visualization settings. You can customize the camera settings, lighting, and additional visual elements like textures and logos according to your preferences. The `create_floor_truss`, `create_cylinder`, `create_box`, `create_revolute_joint`, `create_spherical_joint`, `create_motor`, `set_default_positions`, `set_default_forces`, `set_interactions`, and `add_textures_and_logos` functions should be implemented according to the specific details of your crank-slider mechanism.
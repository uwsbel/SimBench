To create the PyChrono simulation based on your instructions, follow the script below. This script initializes the PyChrono environment, adds the required physical systems and objects, sets necessary default parameters, and implements a real-time simulation loop.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# 1. Initialize the PyChrono environment and core components
chrono.ChSystemSMC()

# 2. Add the required physical systems and objects

# Create the rigid terrain
terrain = chrono.ChBodyEasyBox(200, 1, 200, 1000, True, True)
terrain.SetPos(chrono.ChVectorD(0, -1, 0))
terrain.SetBodyFixed(True)
terrain.GetMaterialSurface().SetFriction(0.9)
terrain.GetMaterialSurface().SetRestitution(0.0)
chrono.GetSystem().Add(terrain)

# Create the M113 vehicle
vehicle = veh.ChVehicleM113()
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.Q_from_AngAxis(chrono.CH_C_PI, chrono.VECT_X)))
chrono.GetSystem().Add(vehicle.GetChassisBody())

# Initialize the driver system
driver = veh.ChIrrGuiDriver(vehicle, chronoirr.GetDevice())

# 3. Set necessary default parameters such as positions, forces, and interactions
vehicle.GetChassisBody().SetPos(chrono.ChVectorD(0, 0.5, 0))
vehicle.GetChassisBody().SetWvel_par(chrono.ChVectorD(0, 0, 0))

# Create a real-time visualization using Irrlicht with camera settings and lighting
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(chrono.GetSystem())
vis.SetWindowSize(1280, 720)
vis.SetWindowTitle("M113 Vehicle Simulation")
vis.AddCamera(chrono.ChVectorD(0, 2, -5), chrono.ChVectorD(0, 0.5, 0))
vis.AddLight(chrono.ChVectorD(10, 10, 10), chrono.ChColor(1.0, 1.0, 1.0))
vis.Initialize()

# Implement a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep
step_size = 0.01
sim_time = 0

while vis.Run():
    vis.BeginScene()
    vis.Render()

    # Synchronize and advance the vehicle, terrain, driver, and visual system
    driver.Synchronize(sim_time)
    vehicle.Synchronize(sim_time, chrono.GetSystem())
    chrono.GetSystem().DoStepDynamics(step_size)
    sim_time += step_size

    vis.EndScene()
```

This script creates a PyChrono simulation featuring an M113 vehicle with specific initial conditions and visualization settings, a rigid terrain with defined friction and restitution, and a real-time simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system at each timestep.

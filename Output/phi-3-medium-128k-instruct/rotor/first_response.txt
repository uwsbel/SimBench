 ```python

import Chrono

import chrono

import pychrono

import pychrono.Isocurve

import pychrono.ChLinkFast

import pychrono.ChSystemSparse

import pychrono.ChSystemNSC

import pychrono.ChIr

import pychrono.fea


# Initialize PyChrono environment

chrono.ChSystemNSC()


# Create an Isogeometric Analysis (IGA) beam

beam = pychrono.Isocurve.CreateCircle(1.0)

beam.SetDensity(1.0)

beam.SetYoungsModulus(210e9)

beam.SetPoissonsRatio(0.3)


# Create a flywheel and attach it to the center of the beam

flywheel = pychrono.ChBody()

flywheel.SetMass(10.0)

flywheel.SetInertiaXXY(pychrono.ChVectorD(&0.0, &0.0, &0.0))

flywheel.SetPos(pychrono.ChVectorD(0.0, 0.0, 0.0))

beam.AddRigidBody(flywheel)


# Create a motor and attach it to one end of the beam

motor = pychrono.ChBody()

motor.SetMass(5.0)

motor.SetInertiaXXY(pychrono.ChVectorD(&0.0, &0.0, &0.0))

motor.SetPos(pychrono.ChVectorD(0.0, 0.0, -1.0))

beam.AddRigidBody(motor)


# Set up the motor's rotational force

motor.AddForce(pychrono.ChVectorD(0.0, 0.0, 100.0))


# Create the system and add the beam

system = pychrono.ChSystemSparse()

system.AddBody(beam)


# Set up the Irrlicht visualization

irr_options = pychrono.ChIr.Options()

irr_options.SetUseBumpMapping(True)

irr_window = pychrono.ChIr.CreateIrrlichtWindow(irr_options, 800, 600)


# Set up the FEM visualization

fem_visualizer = pychrono.fea.ChFemVisualizer(irr_window)

fem_visualizer.AddBody(beam)


# Run the simulation

system.Set_Frozen(False)

system.DoStep(0.01)


# Main loop

while irr_window.GetDevice()->UserHasQuit() == False:

    irr_window.DoStep()

    system.DoStep(0.01)


# Clean up

irr_window.Close()

```
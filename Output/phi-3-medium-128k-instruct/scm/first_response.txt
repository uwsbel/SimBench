```python

import pychrono

import pychrono.irrlicht as chrono

import pychrono.utils as utils

import numpy as np


# Initialize PyChrono environment and core components

chrono.init()


# Create a visualization window using Irrlicht

window = chrono.ChIrWindow(1024, 768, "HMMWV on SCM Terrain")


# Add a SCM terrain with custom soil parameters

soil_params = {

    "friction": 0.5,

    "cohesion": 0.1,

    "density": 1500,

    "angle_of_repose": 30,

    "sinkage_factor": 0.05

}

terrain = chrono.ChLoadTerrain("SCM", soil_params)

terrain.SetVisualization(chrono.ChTerrainVisualization(chrono.ChTerrainVisualization.FALSE_COLOR))


# Create a moving patch feature that follows the vehicle chassis

moving_patch = chrono.ChMovingPatch(terrain)

moving_patch.SetFollow(True)

moving_patch.SetVehicle(vehicle)


# Initialize the HMMWV vehicle with specific parameters

vehicle = chrono.ChVehicle("HMMWV", chrono.ChVehicleType.TANK)

vehicle.SetChassis(chrono.ChBody())

vehicle.SetTireModel(chrono.ChTireModel.RIM_TREAD)

vehicle.SetTireParameters(0.3, 0.01, 0.005)

vehicle.SetMass(3000)

vehicle.SetInertia(chrono.ChBoxInertia(1.0, 1.0, 1.0, chrono.Vec3(1.0, 1.0, 1.0)))


# Add vehicle components and apply mesh visualization

chassis = chrono.ChBody()

chassis.SetPos(chrono.ChVector(0, 0, 0))

chassis.SetMass(1000)

chassis.SetInertia(chrono.ChBoxInertia(0.5, 0.5, 0.5, chrono.Vec3(0.5, 0.5, 0.5)))

vehicle.AddBody(chassis)


tire = chrono.ChBody()

tire.SetPos(chrono.ChVector(0, 0, 0))

tire.SetMass(10)

tire.SetInertia(chrono.ChBoxInertia(0.1, 0.1, 0.1, chrono.Vec3(0.1, 0.1, 0.1)))

vehicle.AddBody(tire)


# Set up the interactive driver system

driver = chrono.ChDriverUNIKOM()

driver.SetSteeringGain(0.1)

driver.SetThrottleGain(0.1)

driver.SetBrakingGain(0.1)

vehicle.SetDriver(driver)


# Set up the simulation

chrono.SetChTerrainVisualization(chrono.ChTerrainVisualization.FALSE_COLOR)

chrono.SetChSolverIterations(10)

chrono.SetChSolverTolerance(1e-6)

chrono.SetChTimeStep(0.01)


# Run the simulation

while window.GetDevice()->run():

    chrono.DoStepDynamics(window.GetDevice(), 0.01)

    window.SetCamera(chrono.ChVector(0, 0, 10), chrono.ChVector(0, 0, 0), chrono.ChVector(0, 1, 0))

    window.Display()


# Clean up

chrono.reset()

```


This script initializes the PyChrono environment, creates a SCM terrain with custom soil parameters, and sets up a moving patch feature. It then initializes an HMMWV vehicle with a rigid tire model and applies mesh visualization to all components. The interactive driver system is configured to control steering, throttle, and braking. The simulation runs in real time, updating vehicle dynamics and rendering the scene at 50 frames per second.
 ```python

import pychrono

import pychrono.features as fea

import pychrono.Irrlicht as irr


# Initialize PyChrono environment

chrono = pychrono.ChSystemNSC()


# Add gravity to the system

chrono.AddGravity(pychrono.ChVectorD(0, -9.81, 0))


# Create beam finite elements

beam_length = 1.0

beam_height = 0.1

beam_width = 0.1

beam_density = 7800


# Define the material properties

material = pychrono.ChMaterialEE(pychrono.ChMaterial_Aluminum)

material.SetDensity(beam_density)

material.SetYoungsModulus(70e9)

material.SetPoissonsRatio(0.33)


# Create nodes

node1 = chrono.CreateNode(pychrono.ChVectorD(0, 0, 0))

node2 = chrono.CreateNode(pychrono.ChVectorD(beam_length, 0, 0))


# Create beam elements

beam1 = chrono.CreateBeamD1Element(node1, node2, beam_width, beam_height, material)


# Add beam to the system

chrono.AddBody(beam1)


# Set up visualization

visualization = irr.IVVisualSystem()

chrono.SetVisualization(visualization)


# Set up Irrlicht engine for real-time rendering

irrlicht_renderer = irr.IVideoDriverSceneNodeRenderBridge(chrono.GetVisualization(), chrono.GetTimeStep())


# Run the simulation loop

while(chrono.GetChTime() < 10.0):

    chrono.DoStepDynamics(0.01)

    irrlicht_renderer.Render()


# Clean up

chrono.Destroy()

```


This script initializes the PyChrono environment, adds a beam finite element to the physical system, and sets up visualization using the Irrlicht engine. The simulation runs for 10 seconds with a time step of 0.01 seconds.
```python

import pychrono as chrono

import pychrono.visualization as visual

import pychrono.core as core

import pychrono.fea as fea

import pychrono.analytical_solvers as analytical

import pychrono.compiler as compiler

import pychrono.compiler.gmsh as gmsh

import pychrono.compiler.irrlicht as irrlicht


# Initialize the PyChrono environment

core.Initialize()


# Create a physical system

my_system = core.System_Create()


# Create a mesh composed of beams and nodes

# Define beam properties

beam_props = fea.Beam_Create()

beam_props.SetElasticModulus(210e9)  # Elastic modulus in Pascals

beam_props.SetPoissonsRatio(0.3)     # Poisson's ratio

beam_props.SetDensity(7800)          # Density in kg/m^3

beam_props.SetLength(2.0)            # Length in meters

beam_props.SetMassPerLength(100)     # Mass per length in kg/m


# Define node properties

node_props = fea.Node_Create()

node_props.SetPosition(chrono.ChVectorD(0, 0, 0))  # Position in meters

node_props.SetMass(10)                           # Mass in kg


# Create beams and nodes

beam1 = fea.Beam_Create()

beam1.SetProperties(beam_props)

node1 = fea.Node_Create()

node1.SetProperties(node_props)

beam1.SetNodes(node1)


# Add the beam to the system

my_system.Add(beam1)


# Set default parameters such as forces and interactions

# For demonstration, let's apply a force at the end of the beam

force = chrono.ChVectorD(0, 0, -1000)  # Force in Newtons

beam1.AddForce(force)


# Set up visualization

vis = visual.Visualization_Create()

vis.SetGlOptions("-w 1280 -h 720 -t 2")


# Compile the system for real-time rendering

compiler.Compile(my_system, "beam_simulation", "irrlicht")


# Run the simulation loop

while core.GetCondition() == core.Conditions.ITERATIVE:

    core.DoStep(1e-3, 1e-3)

    vis.Draw()


# Clean up

core.End()

```


This script initializes the PyChrono environment, creates a physical system with a beam and a node, sets default parameters such as the beam's material properties and a force applied at the end of the beam, and runs the simulation loop with real-time visualization using the Irrlicht engine.
```python

import pychrono as chrono

import numpy as np


# Initialize the PyChrono environment

chrono.ChSystemAtom()


# Add a rigid body representing a satellite

satellite = chrono.ChBody()

satellite.SetName('Satellite')

satellite.SetPos(chrono.ChVectorD(0, 0, 1000))  # Initial position (x, y, z)

satellite.SetMass(1000)  # Mass in kg

satellite.SetInertiaXX(100)  # Inertia around x-axis

satellite.SetInertiaXY(10)  # Inertia around y-axis

satellite.SetInertiaXYZ(1)  # Inertia around z-axis


# Add a rigid body representing Earth

earth = chrono.ChBody()

earth.SetName('Earth')

earth.SetPos(chrono.ChVectorD(0, 0, 0))  # Earth is at the origin

earth.SetMass(5.972e24)  # Mass in kg

earth.SetInertiaXX(0.33011)  # Inertia around x-axis

earth.SetInertiaXY(2.557e38)  # Inertia around y-axis

earth.SetInertiaXYZ(1.309e38)  # Inertia around z-axis


# Add a gravitational force between Earth and the satellite

earth_grav_force = chrono.ChVectorD(0, 0, -6.67430e-11 * earth.GetMass() * satellite.GetMass() / (satellite.GetPos().Length() ** 2))

satellite.AddForce(earth_grav_force)


# Set up the simulation

chrono.ChCollisionAlgorithmLCG(12345)

chrono.ChCollisionFrequencyAlgorithmDefault()

chrono.ChCollisionDispatchAlgorithmQuick()


# Add collision detection between Earth and the satellite

earth.AddCollisionAlgorithm(chrono.ChCollisionAlgorithm(chrono.ChCollisionAlgorithmLCG(12345)))

satellite.AddCollisionAlgorithm(chrono.ChCollisionAlgorithm(chrono.ChCollisionAlgorithmLCG(12345)))


# Set up the integrator

integrator = chrono.ChIntegrator_New(chrono.ChIntegration_New(chrono.ChIntegration_LeapFrog, 1e-3))

chrono.ChSystem_AddIntegrator(chrono.ChSystem(), integrator)


# Run the simulation for a certain number of steps

for step in range(1000):

    chrono.ChStepManager.Update()


# Print the final position of the satellite

print('Final position of the satellite:', satellite.GetPos())

```


This script initializes a PyChrono simulation with a satellite and Earth. It sets up the gravitational force between them and runs the simulation for 1000 steps. The final position of the satellite is printed at the end.
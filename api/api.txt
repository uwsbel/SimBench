# PyChrono Comprehensive API Documentation

## Overview
This guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.

## Table of Contents

1. [Library Imports](#library-imports)
2. [Contact and Collision Settings](#contact-and-collision-settings)
3. [Visualization Settings](#visualization-settings)
4. [Body Initialization](#body-initialization)
5. [Joints and Links](#joints-and-links)
6. [Simulation Loop](#simulation-loop)
7. [Additional Utilities](#additional-utilities)
8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)
9. [Example Simulations](#example-simulations)

---

## Library Imports

### Libraries and Modules Imported

- **`os`**: Standard Python library for interacting with the operating system.
- **`math`**: Standard Python library for mathematical functions.
- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.
- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.
- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.
- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.
- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.

---

## Contact and Collision Settings

### System Initialization

- **`chrono.ChSystemNSC()`**
  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.
  - **Example**:
    ```python
    my_system = chrono.ChSystemNSC()
    ```

- **`chrono.ChSystemSMC()`**
  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.
  - **Example**:
    ```python
    my_system = chrono.ChSystemSMC()
    ```

- **`chrono.SetChronoDataPath(path)`**
  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.
  - **Example**:
    ```python
    chrono.SetChronoDataPath('/path/to/data')
    ```

### Contact Materials

- **`chrono.ChContactMaterialNSC()`**
  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.
  - **Example**:
    ```python
    material_nsc = chrono.ChContactMaterialNSC()
    ```

- **`chrono.ChContactMaterialSMC()`**
  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.
  - **Example**:
    ```python
    material_smc = chrono.ChContactMaterialSMC()
    ```

- **`material.SetFriction(value)`**
  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.
  - **Example**:
    ```python
    material.SetFriction(0.5)
    ```

- **`material.SetDampingF(value)`**
  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.
  - **Example**:
    ```python
    material.SetDampingF(0.1)
    ```

- **`material.SetCompliance(value)`**
  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.
  - **Example**:
    ```python
    material.SetCompliance(0.01)
    ```

### Collision Models

- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**
  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.
  - **Example**:
    ```python
    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)
    ```

- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**
  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.
  - **Example**:
    ```python
    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)
    ```

---

## Visualization Settings

### Visualization System Setup

- **`chronoirr.ChVisualSystemIrrlicht()`**
  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.
  - **Example**:
    ```python
    vis = chronoirr.ChVisualSystemIrrlicht()
    ```

- **`vis.AttachSystem(sys)`**
  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.
  - **Example**:
    ```python
    vis.AttachSystem(my_system)
    ```

- **`vis.SetWindowSize(width, height)`**
  - **Usage**: Configures the size of the visualization window.
  - **Example**:
    ```python
    vis.SetWindowSize(1024, 768)
    ```

- **`vis.SetWindowTitle(title)`**
  - **Usage**: Sets the title of the visualization window.
  - **Example**:
    ```python
    vis.SetWindowTitle('Simulation Window')
    ```

- **`vis.Initialize()`**
  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.
  - **Example**:
    ```python
    vis.Initialize()
    ```

- **`vis.AddLogo(path)`**
  - **Usage**: Adds a logo to the window, often used for branding or identification.
  - **Example**:
    ```python
    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
    ```

- **`vis.AddSkyBox()`**
  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.
  - **Example**:
    ```python
    vis.AddSkyBox()
    ```

- **`vis.AddCamera(position)`**
  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.
  - **Example**:
    ```python
    vis.AddCamera(chrono.ChVector3d(0, 3, 6))
    ```

- **`vis.AddTypicalLights()`**
  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.
  - **Example**:
    ```python
    vis.AddTypicalLights()
    ```

### Visual Shapes

- **`chrono.ChVisualShapeBox(size)`**
  - **Usage**: Defines a box shape for visualization.
  - **Example**:
    ```python
    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))
    ```

- **`chrono.ChVisualShapeSphere(radius)`**
  - **Usage**: Defines a sphere for visualization, with radius controlling the size.
  - **Example**:
    ```python
    sphere_shape = chrono.ChVisualShapeSphere(1.0)
    ```

- **`chrono.ChVisualShapeCylinder(radius, height)`**
  - **Usage**: Defines a cylindrical shape with specified radius and height.
  - **Example**:
    ```python
    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)
    ```

- **`shape.SetColor(color)`**
  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.
  - **Example**:
    ```python
    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color
    ```

---

## Body Initialization

### General Body Initialization

- **`chrono.ChBody()`**
  - **Usage**: Basic rigid body with default properties, customizable through additional settings.
  - **Example**:
    ```python
    body = chrono.ChBody()
    ```

- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**
  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.
  - **Example**:
    ```python
    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)
    ```

- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**
  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.
  - **Example**:
    ```python
    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)
    ```

- **`chrono.ChBodyAuxRef()`**
  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.
  - **Example**:
    ```python
    body_aux = chrono.ChBodyAuxRef()
    ```

- **`sys.Add(body)`**
  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.
  - **Example**:


    ```python
    sys.Add(body)
    ```

### Body Properties

- **`body.SetPos(position)`**
  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.
  - **Example**:
    ```python
    body.SetPos(chrono.ChVector3d(0, 0, 0))
    ```

- **`body.SetMass(mass)`**
  - **Usage**: Defines the mass, influencing the body's response to forces.
  - **Example**:
    ```python
    body.SetMass(100)
    ```

- **`body.SetInertiaXX(inertia)`**
  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.
  - **Example**:
    ```python
    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))
    ```

- **`body.SetFixed(fixed)`**
  - **Usage**: Fixes the body in space, preventing it from moving or rotating.
  - **Example**:
    ```python
    body.SetFixed(True)
    ```

- **`body.EnableCollision(enable)`**
  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.
  - **Example**:
    ```python
    body.EnableCollision(True)
    ```

---

## Joints and Links

### Revolute Joints

- **`chrono.ChLinkLockRevolute()`**
  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.
  - **Example**:
    ```python
    rev_joint = chrono.ChLinkLockRevolute()
    ```

- **`joint.Initialize(body1, body2, frame)`**
  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.
  - **Example**:
    ```python
    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))
    ```

### Prismatic Joints

- **`chrono.ChLinkLockPrismatic()`**
  - **Usage**: Allows relative linear motion along one axis between two bodies.
  - **Example**:
    ```python
    pris_joint = chrono.ChLinkLockPrismatic()
    ```

- **`joint.Initialize(body1, body2, frame)`**
  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.
  - **Example**:
    ```python
    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))
    ```

### Spherical Joints

- **`chrono.ChLinkLockSpherical()`**
  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.
  - **Example**:
    ```python
    spher_joint = chrono.ChLinkLockSpherical()
    ```

- **`joint.Initialize(body1, body2, frame)`**
  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.
  - **Example**:
    ```python
    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))
    ```

### Universal Joints

- **`chrono.ChLinkUniversal()`**
  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.
  - **Example**:
    ```python
    univ_joint = chrono.ChLinkUniversal()
    ```

- **`joint.Initialize(body1, body2, frame)`**
  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.
  - **Example**:
    ```python
    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))
    ```

### Motor Joints

- **`chrono.ChLinkMotorRotationSpeed()`**
  - **Usage**: Controls the rotational speed between two bodies.
  - **Example**:
    ```python
    motor = chrono.ChLinkMotorRotationSpeed()
    ```

- **`motor.Initialize(body1, body2, frame)`**
  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.
  - **Example**:
    ```python
    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))
    ```

- **`motor.SetSpeedFunction(func)`**
  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.
  - **Example**:
    ```python
    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed
    ```

---

## Simulation Loop

### Execution

- **`sys.DoStepDynamics(time_step)`**
  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.
  - **Example**:
    ```python
    sys.DoStepDynamics(0.01)
    ```

- **`vis.Run()`**
  - **Usage**: Checks if the visualization should continue running, essential for loop control.
  - **Example**:
    ```python
    while vis.Run():
        ...
    ```

- **`vis.BeginScene()`**
  - **Usage**: Begins rendering a new frame, preparing the scene for updates.
  - **Example**:
    ```python
    vis.BeginScene()
    ```

- **`vis.Render()`**
  - **Usage**: Renders the current state of the scene, displaying all visual elements.
  - **Example**:
    ```python
    vis.Render()
    ```

- **`vis.EndScene()`**
  - **Usage**: Ends the frame, completing the rendering cycle.
  - **Example**:
    ```python
    vis.EndScene()
    ```

---

## Additional Utilities

### Contact Reporting and Callbacks

- **`chrono.ReportContactCallback`**
  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.

- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**
  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.

### Miscellaneous

- **`chrono.GetChronoDataFile(filename)`**
  - **Usage**: Retrieves the full path to a data file, often used for loading assets.
  - **Example**:
    ```python
    path = chrono.GetChronoDataFile('somefile.dat')
    ```

- **`sys.GetNumContacts()`**
  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.
  - **Example**:
    ```python
    num_contacts = sys.GetNumContacts()
    ```

- **`sys.GetContactContainer.ReportAllContacts(callback)`**
  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.
  - **Example**:
    ```python
    sys.GetContactContainer().ReportAllContacts(my_rep)
    ```

- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**
  - **Usage**: Registers a callback for modifying contact properties as they are added.
  - **Example**:
    ```python
    sys.GetContactContainer().RegisterAddContactCallback(my_callback)
    ```

---

## Pipeline for Generating New Simulations

1. **Define the Simulation Requirements**
   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.

2. **Generate the Initial Code Snippet**
   - Use prompt engineering to generate the initial PyChrono code snippet.

3. **Validate the Generated Code**
   - Ensure that the generated code aligns with the latest API changes and runs correctly.

4. **Add Detailed Comments and Documentation**
   - Include comments in the code to explain each step and function used.

5. **Run the Simulation**
   - Execute the simulation and verify the results.

6. **Iterate and Refine**
   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.

---

## Example Simulations

### FEA Example: Beam Simulation

```python
sys = chrono.ChSystemSMC()
mesh = fea.ChMesh()
msection = fea.ChBeamSectionEulerAdvanced()
msection.SetAsRectangularSection(beam_wy, beam_wz)
msection.SetYoungModulus(0.01e9)
msection.SetShearModulus(0.01e9 * 0.3)
msection.SetRayleighDamping(0.000)
hnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))
hnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))
mesh.AddNode(hnode1)
mesh.AddNode(hnode2)
belement1 = fea.ChElementBeamEuler()
belement1.SetNodes(hnode1, hnode2)
belement1.SetSection(msection)
mesh.AddElement(belement1)
```

### MBS Example: Shaking Table Simulation

```python
sys = chrono.ChSystemNSC()
sys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
body_table = chrono.ChBody()
body_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))
body_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)
body_table.AddVisualShape(body_table_shape)
sys.Add(body_table)
link_shaker =

 chrono.ChLinkLockLock()
link_shaker.Initialize(body_table, body_floor, chrono.ChFramed())
sys.Add(link_shaker)
mfunY = chrono.ChFunctionSine(0.001, 1.5)
link_shaker.SetMotionY(mfunY)
```

### Robotics Example: RoboSimian Initialization

```python
sys = chrono.ChSystemSMC()
robot = robosimian.RoboSimian(sys, True, True)
robot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))
driver = robosimian.RS_Driver(..., ..., ..., True)
robot.SetDriver(driver)
```

### Vehicle Example: ARTcar Simulation

```python
car = veh.ARTcar()
car.SetContactMethod(contact_method)
car.SetChassisCollisionType(chassis_collision_type)
car.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
car.Initialize()
terrain = veh.RigidTerrain(car.GetSystem())
patch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)
terrain.Initialize()
```

---

This comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.
{
    "instruction": "You are a PyChrono expert tasked with generating a simulation script based on the following instructions. Make sure to:\n        1. Initialize the PyChrono environment and core components.\n        2. Add the required physical systems and objects as specified.\n        3. Set necessary default parameters such as positions, forces, and interactions.\n\n        Instructions:\n        Create a PyChrono simulation that models the gravitational attraction between particles. Implement a particle emitter to generate particles with random shapes, positions, velocities, and orientations. Visualize the simulation using Irrlicht, applying custom gravitational forces to simulate particle attraction dynamically.\n        ",
    "input": "",
    "output": "```python\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\nfrom itertools import combinations\n\n\nclass MyCreatorForAll(chrono.ChRandomShapeCreator_AddBodyCallback):\n    def __init__(self, vis, coll):\n        super().__init__()\n        self.vis = vis\n        self.coll = coll\n\n    def OnAddBody(self, body, coords, creator):\n        body.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile(\"textures/bluewhite.png\"))\n        self.vis.BindItem(body)\n        self.coll.BindItem(body)\n        body.SetUseGyroTorque(False)\n\n\n# Create a Chrono physical system\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\ncoll = sys.GetCollisionSystem()\n\n# Create a sphere body\nsphere_mat = chrono.ChContactMaterialNSC()\nsphere_mat.SetFriction(0.2)\nmsphereBody = chrono.ChBodyEasySphere(2.1, 1800, True, True, sphere_mat)\nmsphereBody.SetPos(chrono.ChVector3d(1, 1, 0))\nmsphereBody.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile(\"textures/concrete.jpg\"))\nsys.Add(msphereBody)\n\n# Create a particle emitter\nemitter = chrono.ChParticleEmitter()\nemitter.SetParticlesPerSecond(2000)\nemitter.SetUseParticleReservoir(True)\nemitter.SetParticleReservoirAmount(200)\n\n# Randomizers for particle properties\nemitter_positions = chrono.ChRandomParticlePositionOnGeometry()\nemitter_positions.SetGeometry(chrono.ChBox(50, 50, 50), chrono.ChFramed())\nemitter.SetParticlePositioner(emitter_positions)\n\nemitter_rotations = chrono.ChRandomParticleAlignmentUniform()\nemitter.SetParticleAligner(emitter_rotations)\n\nmvelo = chrono.ChRandomParticleVelocityAnyDirection()\nmvelo.SetModulusDistribution(chrono.ChUniformDistribution(0.0, 0.5))\nemitter.SetParticleVelocity(mvelo)\n\nmangvelo = chrono.ChRandomParticleVelocityAnyDirection()\nmangvelo.SetModulusDistribution(chrono.ChUniformDistribution(0.0, 0.2))\nemitter.SetParticleAngularVelocity(mangvelo)\n\nmcreator_hulls = chrono.ChRandomShapeCreatorConvexHulls()\nmcreator_hulls.SetNpoints(15)\nmcreator_hulls.SetChordDistribution(chrono.ChZhangDistribution(1.3, 0.4))\nmcreator_hulls.SetDensityDistribution(chrono.ChConstantDistribution(1600))\nemitter.SetParticleCreator(mcreator_hulls)\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('Particle emitter demo')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 14, -20))\nvis.AddTypicalLights()\n\n# Attach callback to the emitter\nmcreation_callback = MyCreatorForAll(vis, coll)\nemitter.RegisterAddBodyCallback(mcreation_callback)\n\n# Simulation settings\nsys.SetSolverType(chrono.ChSolver.Type_PSOR)\nsys.GetSolver().AsIterative().SetMaxIterations(40)\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, 0))\n\n# Simulation loop\nstepsize = 1e-2\nG_constant = 6.674e-3  # Modified gravitational constant\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n\n    emitter.EmitParticles(sys, stepsize)\n\n    for body in sys.GetBodies():\n        body.EmptyAccumulators()\n\n    mlist = list(combinations(sys.GetBodies(), 2))\n    for abodyA, abodyB in mlist:\n        D_attract = abodyB.GetPos() - abodyA.GetPos()\n        r_attract = D_attract.Length()\n        f_attract = G_constant * (abodyA.GetMass() * abodyB.GetMass()) / (r_attract ** 2)\n        F_attract = (D_attract / r_attract) * f_attract\n        abodyA.AccumulateForce(F_attract, abodyA.GetPos(), False)\n        abodyB.AccumulateForce(-F_attract, abodyB.GetPos(), False)\n\n    sys.DoStepDynamics(stepsize)\n\n```"
}
```python
import pychrono.core as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import os

# ---------------------------------------------------------------------
# Create the Chrono system and set default parameters
# ---------------------------------------------------------------------
system = chrono.ChSystemNSC()
system.Set_GToLocal(chrono.ChVectorD(0, -9.81, 0))

# Set the simulation step size
time_step = 1e-3

# ---------------------------------------------------------------------
# Create the FEDA vehicle
# ---------------------------------------------------------------------
vehicle = veh.FEDAVehicle(system)
vehicle.SetContactMethod(chrono.ChContactMethod_SMC)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 1, 0)))
vehicle.SetTireType("TMeasy")
vehicle.Initialize()

# Set vehicle specific parameters
# ... (add parameters like suspension, steering settings, etc.)

# ---------------------------------------------------------------------
# Create the terrain
# ---------------------------------------------------------------------
terrain = chrono.ChTerrain(system)
terrain.Initialize(chrono.ChCoordsysD(), chrono.GetChronoDataFile("terrain/height_map.bmp"))
terrain.SetTexture(chrono.GetChronoDataFile("textures/grass.jpg"))

# ---------------------------------------------------------------------
# Create the visualization application
# ---------------------------------------------------------------------
application = irr.ChIrrApp(system)
application.SetWindowSize(1280, 720)
application.SetCameraPos(chrono.ChVectorD(10, 5, 10))
application.SetCameraTarget(vehicle.GetVehiclePos())
application.SetSkyBox()
application.AddTypicalLights()
application.AddShadowAll()
application.AssetBindAll()
application.AssetUpdateAll()

# Set mesh visualization for all vehicle parts
vehicle.SetChassisVisualizationType(veh.VisualizationType_MESH)
vehicle.SetSuspensionVisualizationType(veh.VisualizationType_MESH)
vehicle.SetSteeringVisualizationType(veh.VisualizationType_MESH)
vehicle.SetWheelVisualizationType(veh.VisualizationType_MESH)
vehicle.SetTireVisualizationType(veh.VisualizationType_MESH)

# ---------------------------------------------------------------------
# Initialize the interactive driver system
# ---------------------------------------------------------------------
driver = veh.ChInteractiveDriverIRR(application)
driver.SetSteeringDelta(0.1)
driver.SetThrottleDelta(0.1)
driver.SetBrakingDelta(0.1)
vehicle.SetDriver(driver)

# ---------------------------------------------------------------------
# Simulation loop
# ---------------------------------------------------------------------
application.SetTimestep(time_step)
application.SetTryRealtime(True)

while application.GetDevice().run():
    time = system.GetChTime()

    # Update the vehicle and driver
    vehicle.Update(time)
    driver.Synchronize(time)

    # Update the camera position
    application.SetCameraTarget(vehicle.GetVehiclePos())

    # Advance simulation by one step
    application.BeginScene(True, True, irr.SColor(255, 140, 161, 192))
    application.DrawAll()
    application.EndScene()
    application.GetVideoDriver().endScene()

    system.DoStepDynamics(time_step)

```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `chrono`, `veh`, and `irr`.
   - Create a Chrono system (`ChSystemNSC`) and set gravity.
   - Define the simulation step size (`time_step`).

2. **FEDA Vehicle:**
   - Create a `FEDAVehicle` object, set contact method, allow chassis movement, set initial position, choose tire model ("TMeasy"), and initialize the vehicle.
   - Placeholder comment for setting vehicle-specific parameters (e.g., suspension, steering).

3. **Terrain:**
   - Create a `ChTerrain` object.
   - Initialize it with a heightmap and a texture.

4. **Visualization:**
   - Create an `irr.ChIrrApp` for visualization.
   - Set window size, camera initial position, and target (vehicle).
   - Add skybox, lights, and shadows.
   - Bind and update assets for rendering.
   - Set mesh visualization for all vehicle parts using `Set...VisualizationType(veh.VisualizationType_MESH)`.

5. **Interactive Driver:**
   - Create a `ChInteractiveDriverIRR` object, linking it to the application.
   - Configure steering, throttle, and braking sensitivity.
   - Assign the driver to the vehicle.

6. **Simulation Loop:**
   - Set the application's time step and enable real-time simulation.
   - Inside the loop:
     - Get current simulation time.
     - Update vehicle and driver states.
     - Update camera target to follow the vehicle.
     - Render the scene using `application.BeginScene()`, `DrawAll()`, `EndScene()`.
     - Advance the Chrono simulation by one step using `system.DoStepDynamics()`.

**Notes:**

- This script assumes you have a heightmap file named "height_map.bmp" in a "terrain" folder and a texture file "grass.jpg" in a "textures" folder within your working directory. 
- Remember to replace the placeholder comments with your desired vehicle parameters.
- You can customize camera behavior, terrain properties, and add more elements to the simulation as needed. 

```python
import pychrono.core as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import os

# ---------------------------------------------------------------------
# Create the simulation system and set default parameters
# ---------------------------------------------------------------------
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))  # Set gravitational acceleration

# Set default contact method
chrono.SetChronoDataPath(os.environ['CHRONO_DATA_DIR'])
contact_method = chrono.ChContactMethod_NSC
chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.005)
chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)

# ---------------------------------------------------------------------
# Create the vehicle and set its parameters
# ---------------------------------------------------------------------
vehicle = veh.GatorVehicle(system)
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisFixed(False)
vehicle.SetChassisCollisionType(veh.ChassisCollisionType_MESH)
vehicle.SetChassisMeshFilename(chrono.GetChronoDataFile("vehicle/gator/obj/gator.obj"))
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1), chrono.ChQuaternionD(1, 0, 0, 0)))
vehicle.Initialize()

# Set tire model to TMEasy
tire_model = veh.TMeasyTire()
tire_model.LoadTireData(chrono.GetChronoDataFile("vehicle/gator/tire/HMMWV_RadialTire.tir"))
for axle in vehicle.GetAxles():
    axle.SetTireModel(tire_model)

# ---------------------------------------------------------------------
# Create the terrain and set its parameters
# ---------------------------------------------------------------------
terrain = veh.RigidTerrain(system)
patch = terrain.AddPatch(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT), 
                        chrono.ChVectorD(100, 100, 1))  # Terrain dimensions
patch.SetContactFrictionCoefficient(0.8)
patch.SetContactRestitutionCoefficient(0.01)
patch.SetContactMaterialProperties(2e7, 0.3)  # Young's modulus, Poisson ratio
# Set custom texture (replace with your texture file)
patch.SetTexture(chrono.GetChronoDataFile("textures/concrete.jpg"))
terrain.Initialize()

# ---------------------------------------------------------------------
# Create the driver system
# ---------------------------------------------------------------------
driver = veh.ChInteractiveDriverIRR(vehicle)
driver.Initialize()

# ---------------------------------------------------------------------
# Create the visualization application
# ---------------------------------------------------------------------
application = irr.ChIrrApp(system, "Gator Simulation", irr.dimension2du(1000, 800))
application.AddTypicalSky()
application.AddTypicalLights()
application.SetChaseCamera(vehicle.GetChassisBody(), 6.0, 0.5)
application.AssetBindAll()
application.AssetUpdateAll()

# ---------------------------------------------------------------------
# Simulation loop
# ---------------------------------------------------------------------
application.SetTimestep(0.02)  # Set time step for 50 fps

while application.GetDevice().run():
    time = system.GetChTime()

    # Update driver inputs
    driver.Synchronize(time)

    # Advance simulation by one step
    system.DoStepDynamics(application.GetTimestep())

    # Update visualization
    application.BeginScene()
    application.DrawAll()
    application.EndScene()
```

**Explanation:**

1. **Initialization:** The script begins by importing necessary modules, creating a `ChSystemNSC` object, and setting gravity. It defines the contact method and sets default parameters for collision detection.
2. **Vehicle Setup:** A `GatorVehicle` object is instantiated, and its properties like contact method, chassis type, mesh file, and initial position are configured. The TMEasy tire model is loaded and assigned to the vehicle's axles.
3. **Terrain Creation:** A `RigidTerrain` object represents the ground. A patch is added with specific dimensions and material properties. A custom texture is applied to the terrain patch.
4. **Driver System:** An interactive driver system (`ChInteractiveDriverIRR`) is created, allowing the user to control the vehicle using keyboard inputs.
5. **Visualization:** An `ChIrrApp` object sets up the Irrlicht visualization environment. A skybox, lighting, and a chase camera are added for enhanced visual fidelity.
6. **Simulation Loop:** The main simulation loop runs as long as the Irrlicht window is active. Inside the loop:
   - The driver inputs are synchronized at each time step.
   - The simulation advances by one time step using `DoStepDynamics`.
   - The visualization is updated with `BeginScene`, `DrawAll`, and `EndScene`.

This script provides a basic framework for simulating a Gator vehicle on a flat terrain with user interaction. Remember to adjust parameters, file paths, and potentially add further elements or functionalities based on your specific simulation requirements. 

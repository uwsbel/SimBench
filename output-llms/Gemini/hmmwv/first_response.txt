```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# ---------------------------------------------------------------------
# Create the Chrono system and set default parameters
# ---------------------------------------------------------------------
system = chrono.ChSystemSMC()
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))
chrono.SetChronoDataPath('./chrono_data/')

# ---------------------------------------------------------------------
# Create the HMMWV vehicle and set parameters
# ---------------------------------------------------------------------
vehicle = veh.HMMWV_Full('./hmmwv/hmmwv_chassis.obj', system)
vehicle.SetChassisCollisionType(veh.ChassisCollisionType_PRIMITIVES)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 1.6), chrono.QUNIT))
vehicle.SetContactMethod(chrono.ChContactMethod_SMC)
vehicle.SetTireType(veh.TireModelType_TMEASY)
vehicle.Initialize()

# ---------------------------------------------------------------------
# Create the terrain and set parameters
# ---------------------------------------------------------------------
terrain = veh.RigidTerrain(system)
patch = terrain.AddPatch(chrono.ChMaterialSurfaceSMC(), 
                       chrono.CSYSNORM, 
                       200, 200)
patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 20, 20)
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

# ---------------------------------------------------------------------
# Create the interactive driver system
# ---------------------------------------------------------------------
driver = veh.ChInteractiveDriverIRR(vehicle)
driver.Initialize()

# ---------------------------------------------------------------------
# Create the Irrlicht application and set parameters
# ---------------------------------------------------------------------
application = chronoirr.ChIrrApp(system, 'HMMWV Simulation', chronoirr.dimension2du(1024,768))
application.AddTypicalLights()
application.AddSkyBox()
application.AddTypicalCamera(chronoirr.vector3df(20, -20, 5), chronoirr.vector3df(0, 0, 1))
application.AssetBindAll()
application.AssetUpdateAll()

# ---------------------------------------------------------------------
# Simulation loop
# ---------------------------------------------------------------------
application.SetTimestep(0.02) # 50 fps

while application.GetDevice().run():
    time = system.GetChTime()
    
    # Update driver inputs
    driver.Synchronize(time)
    
    # Advance simulation by one step
    system.DoStepDynamics(application.GetTimestep())
    
    # Update the visualization
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary PyChrono modules (core, irrlicht, vehicle).
   - Creates a Chrono simulation system (`system`).
   - Sets gravity and data path.

2. **HMMWV Vehicle:**
   - Creates a full HMMWV vehicle object (`vehicle`) using an OBJ file for the chassis.
   - Configures collision shape, initial position, contact method, and tire model.
   - Calls `Initialize()` to finalize vehicle setup.

3. **Terrain:**
   - Creates a rigid terrain object (`terrain`).
   - Adds a textured terrain patch with material properties.
   - Initializes the terrain.

4. **Interactive Driver:**
   - Creates an interactive driver (`driver`) using Irrlicht for user input (steering, throttle, brakes).
   - Initializes the driver, linking it to the vehicle.

5. **Irrlicht Visualization:**
   - Creates an Irrlicht application (`application`) for rendering the simulation.
   - Sets up basic lighting, skybox, and a default camera view.
   - Binds and updates assets for visualization.

6. **Simulation Loop:**
   - Sets the simulation timestep to 0.02 seconds (50 fps).
   - Enters the main simulation loop.
   - Inside the loop:
     - Gets the current simulation time.
     - Synchronizes the driver (reads user inputs).
     - Performs a simulation step using `DoStepDynamics()`.
     - Updates the Irrlicht visualization by clearing, drawing, and rendering the scene.

**Key Points:**

- This script sets up a basic but functional simulation of a HMMWV driving on a flat, textured terrain.
- It uses primitive collision shapes for the vehicle for simplicity, but you could use more detailed meshes.
- The interactive driver allows real-time control of the vehicle.
- The visualization is handled by Irrlicht, providing a 3D view of the simulation.

**To Run:**

1. Make sure you have PyChrono installed with the `vehicle` module and Irrlicht support.
2. Save the code as a Python file (e.g., `hmmwv_sim.py`).
3. Run the script from your Python environment: `python hmmwv_sim.py`

This will start the simulation and open an Irrlicht window where you can control the HMMWV.

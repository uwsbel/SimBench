```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle location and orientation
initLoc = chrono.ChVector3d(0, 0, 0.5)
initRot = chrono.ChQuaterniond(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_PRIMITIVES

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
tire_model = veh.TireModelType_TMEASY

# Rigid terrain
# terrain_model = veh.RigidTerrain.BOX
terrainHeight = 0      # terrain height
terrainLength = 100.0  # size in X direction
terrainWidth = 100.0   # size in Y direction

# Point on chassis tracked by the camera
trackPoint = chrono.ChVector3d(-3.0, 0.0, 1.1)

# Contact method
contact_method = chrono.ChContactMethod_NSC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# *** Custom Driver Class ***
class MyDriver(veh.ChDriver):
    def __init__(self, delay):
        veh.ChDriver.__init__(self)
        self.delay = delay

    def Synchronize(self, time):
        # Apply delay to driver inputs
        if time < self.delay:
            self.SetThrottle(0)
            self.SetSteering(0)
            self.SetBraking(0)
        else:
            # Gradually increase throttle to 0.7 after 0.2 seconds
            if time < self.delay + 0.2:
                self.SetThrottle((time - self.delay) * 3.5)  # 0.7 / 0.2 = 3.5
            else:
                self.SetThrottle(0.7)

            # Apply sinusoidal steering pattern starting at 2 seconds
            if time > self.delay + 2:
                self.SetSteering(0.5 * math.sin(time - self.delay - 2))
            else:
                self.SetSteering(0)

            # Braking is not used in this example
            self.SetBraking(0)

# Create the HMMWV vehicle, set parameters, and initialize
vehicle = veh.HMMWV_Full()  # veh.HMMWV_Reduced() could be another choice here
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)
vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the terrain
patch_mat = chrono.ChContactMaterialNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
terrain = veh.RigidTerrain(vehicle.GetSystem())
patch = terrain.AddPatch(patch_mat,chrono.ChCoordsysd(chrono.ChVector3d(0, 0, terrainHeight), chrono.QUNIT),terrainLength, terrainWidth)
patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 200, 200)
patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('HMMWV Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())

# Create and initialize the custom driver
driver = MyDriver(delay=0.5)
driver.Initialize()

# Output vehicle mass
print("VEHICLE MASS: ", vehicle.GetVehicle().GetMass())

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run():
    time = vehicle.GetSystem().GetChTime()

    # End simulation at 4 seconds
    if time >= 4:
        break

    # Render scene
    if step_number % render_steps == 0:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs (not used because inputs are handled within MyDriver)
    driver_inputs = driver.GetInputs()

    # Update modules
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    vis.Synchronize(time, driver_inputs)

    # Advance simulation for one timestep for all modules
    driver.Advance(step_size)
    terrain.Advance(step_size)
    vehicle.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)
```

**Explanation of Changes:**

1. **Custom Driver Class:**
   - A custom driver class `MyDriver` is defined, inheriting from `veh.ChDriver`.
   - It includes a constructor (`__init__`) to initialize the delay parameter.
   - The `Synchronize` method is overridden to control throttle, steering, and braking based on time and the defined delay.

2. **Driver System Replacement:**
   - The `ChInteractiveDriverIRR` is replaced with an instance of the custom `MyDriver` class.
   - The delay is set to 0.5 seconds during initialization: `driver = MyDriver(delay=0.5)`.

3. **Simulation End Condition:**
   - Inside the main simulation loop, a condition is added to check if the simulation time (`time`) reaches 4 seconds. If it does, the loop breaks, ending the simulation.

**Key Improvements:**

- **Customizable Driver Behavior:** The custom driver class allows for flexible control over vehicle inputs, enabling more complex and realistic simulations.
- **Time-Based Control:** The `Synchronize` method uses simulation time to determine driver inputs, providing precise control over the vehicle's actions.
- **Simulation Duration Control:** The added condition to end the simulation at 4 seconds ensures the simulation runs for the desired duration.
- **Improved Code Structure:** Defining a separate driver class improves code organization and readability.

These changes make the code more versatile, allowing for a wider range of simulated scenarios and easier modification for specific simulation needs.

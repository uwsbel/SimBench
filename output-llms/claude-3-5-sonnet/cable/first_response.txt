Here's a PyChrono script that implements the simulation as per your instructions:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the ChSystem
system = chrono.ChSystemNSC()

# Set gravity
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the ground
ground = chrono.ChBodyEasyBox(1, 0.1, 1, 1000, True)
ground.SetBodyFixed(True)
system.Add(ground)

# Parameters for the beam
beam_length = 1.0
beam_diameter = 0.01
num_elements = 10
density = 1000

# Create the beam using ANCF cable elements
beam_nodes = []
beam_elements = []

for i in range(num_elements + 1):
    node = chrono.ChNodeFEAxyzD(chrono.ChVectorD(i * beam_length / num_elements, 0, 0))
    beam_nodes.append(node)
    system.Add(node)

    if i > 0:
        element = chrono.ChElementCableANCF()
        element.SetNodes(beam_nodes[i-1], beam_nodes[i])
        element.SetDensity(density)
        element.SetSection(np.pi * beam_diameter**2 / 4)
        element.SetYoungModulus(1e7)
        beam_elements.append(element)
        system.Add(element)

# Fix the first node (hinge)
beam_nodes[0].SetFixed(True)

# Create the visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle("ANCF Beam Simulation")
vis.Initialize()
vis.AddCamera(chrono.ChVectorD(0.5, 0.5, 2))
vis.AddTypicalLights()

# Simulation loop
time_step = 0.001
while vis.Run():
    system.DoStepDynamics(time_step)
    
    # Visualize beam nodes
    for node in beam_nodes:
        vis.GetDevice().drawSphere(node.GetPos(), 0.01, chronoirr.SColor(255, 0, 0, 255))
    
    # Visualize beam elements
    for element in beam_elements:
        start = element.GetNodeA().GetPos()
        end = element.GetNodeB().GetPos()
        vis.GetDevice().drawLine(start, end, chronoirr.SColor(255, 255, 0, 0))
    
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

vis.GetDevice().closeDevice()
```

This script does the following:

1. Initializes the PyChrono environment and core components, including the ChSystem and gravity.

2. Creates a ground body using an easy-to-create box shape.

3. Sets up parameters for the beam, including length, diameter, number of elements, and material properties.

4. Creates the beam using ANCF (Absolute Nodal Coordinate Formulation) cable elements. It creates nodes and elements, connecting them to form the beam.

5. Fixes the first node to act as a hinge, anchoring the beam to the ground.

6. Sets up the Irrlicht visualization system for rendering the simulation.

7. Implements a simulation loop that:
   - Advances the physical simulation
   - Visualizes the beam nodes as small spheres
   - Visualizes the beam elements as lines connecting the nodes
   - Renders the scene

This simulation will show a beam composed of ANCF cable elements, hinged at one end and deforming under gravity. The beam's nodes are visualized as blue spheres, and the elements connecting them are shown as red lines. You can observe the beam's deformation and nodal positions as the simulation progresses.
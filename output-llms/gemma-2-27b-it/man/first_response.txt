```python
import pychrono as chrono
import pychrono.postprocess as postprocess
import pychrono.irrlicht as chronoirr

# 1. Initialize the PyChrono environment and core components
my_system = chrono.ChSystemNSC()
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))  # Set gravity

# Create a material for the objects
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.3)
material.SetRestitution(0.2)

# 2. Add the required physical systems and objects
# Example: Create a ground body
ground = chrono.ChBodyEasyBox(10, 1, 10, 1000, True, True, material)
ground.SetPos(chrono.ChVectorD(0, -1, 0))
my_system.Add(ground)

# Example: Create a sphere
sphere = chrono.ChBodyEasySphere(1, 100, True, True, material)
sphere.SetPos(chrono.ChVectorD(0, 2, 0))
my_system.Add(sphere)

# 3. Set necessary default parameters
# Example: Apply a force to the sphere
force = chrono.ChForce(chrono.ChForceType_FORCE)
force.SetDir(chrono.ChVectorD(0, -1, 0))
force.SetMforce(10)
sphere.AddForce(force)

# Example: Set a contact method for collisions
my_system.SetContactMethod(chrono.ChContactMethod.ChContactMethodNSC)

# 4. Visualization (optional)
# Create an Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('PyChrono Simulation')
vis.Initialize()
vis.Run()

# 5. Simulation loop
while vis.Run():
    my_system.DoStepDynamics(0.01)
    vis.Render()

```

**Explanation:**

1. **Initialization:**
   - We import necessary PyChrono modules.
   - A `ChSystemNSC` object is created to represent the physical system.
   - Gravity is set using `Set_G_acc`.

2. **Adding Objects:**
   - A ground body is created using `ChBodyEasyBox` and added to the system.
   - A sphere is created using `ChBodyEasySphere` and added to the system.

3. **Setting Parameters:**
   - A force is applied to the sphere using `ChForce`.
   - The contact method for collisions is set to `ChContactMethodNSC`.

4. **Visualization (Optional):**
   - An Irrlicht visualization system is created using `ChVisualSystemIrrlicht`.
   - It's attached to the system, window size and title are set, and it's initialized.

5. **Simulation Loop:**
   - The simulation runs in a loop until the Irrlicht window is closed.
   - In each iteration:
     - The system is advanced by a time step using `DoStepDynamics`.
     - The scene is rendered using `vis.Render()`.

**Remember:**

- This is a basic template. You need to modify it according to your specific simulation requirements.
- Add more objects, forces, constraints, and other elements as needed.
- Explore PyChrono's documentation for a complete list of available features and options: [https://pychrono.org/](https://pychrono.org/)
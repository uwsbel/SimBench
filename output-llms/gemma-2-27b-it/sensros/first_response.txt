```python
import pychrono as chrono
import pychrono.sensor as sensor
import pychrono.postprocess as postprocess
import pychrono.ros as ros

# 1. Initialize PyChrono environment and core components
my_system = chrono.ChSystemNSC()
my_system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))  # Set gravity

# 2. Add ground body and mesh for visualization
ground = chrono.ChBodyEasyBox(100, 1, 100, 1000, True, True)
ground.SetPos(chrono.ChVectorD(0, -1, 0))
ground.SetBodyFixed(True)
my_system.Add(ground)

# Add visualization mesh
ground_mesh = chrono.ChTriangleMeshConnected()
ground_mesh.LoadFromFile("path/to/ground_mesh.obj")
ground.AddAsset(chrono.ChVisualShapeAsset(ground_mesh))

# 3. Configure ground body movement (example: sinusoidal motion)
ground_motion = chrono.ChFunction_Sine(0.1, 0.5, 0)  # Amplitude, frequency, phase
ground.SetPos_dt(chrono.ChVectorD(0, 0, ground_motion.Get_y(my_system.GetChTime())))

# 4. Integrate sensors using Sensor Manager
sensor_manager = sensor.ChSensorManager(my_system)

# Camera
camera = sensor.ChCameraSensor(sensor_manager)
camera.SetPos(chrono.ChVectorD(5, 5, 5))
camera.SetLookAt(chrono.ChVectorD(0, 0, 0))
camera.SetFOV(60)
sensor_manager.AddSensor(camera)

# Lidar
lidar = sensor.ChLidarSensor(sensor_manager)
lidar.SetPos(chrono.ChVectorD(0, 2, 0))
lidar.SetRot(chrono.Q_from_AngAxis(chrono.CH_C_PI / 4, chrono.ChVectorD(0, 1, 0)))
lidar.SetRange(50)
sensor_manager.AddSensor(lidar)

# GPS
gps = sensor.ChGPSSensor(sensor_manager)
gps.SetPos(chrono.ChVectorD(0, 1, 0))
sensor_manager.AddSensor(gps)

# Accelerometer, Gyroscope, Magnetometer
imu = sensor.ChIMUSensor(sensor_manager)
imu.SetPos(chrono.ChVectorD(0, 1.5, 0))
sensor_manager.AddSensor(imu)

# 5. Register sensors with ROS Manager
ros_manager = ros.ChROSManager(my_system)

ros_manager.RegisterSensor(camera, "/camera/image")
ros_manager.RegisterSensor(lidar, "/lidar/scan")
ros_manager.RegisterSensor(gps, "/gps/data")
ros_manager.RegisterSensor(imu, "/imu/data")

# 6. Simulation loop
while my_system.GetChTime() < 10:  # Run for 10 seconds
    my_system.DoStepDynamics(0.01)  # Time step

    # Update sensor data
    sensor_manager.Update()

    # Publish sensor data to ROS topics
    ros_manager.PublishData()

    # Optional: Visualization
    postprocess.ChPovRay(my_system).ExportData("output/frame_" + str(int(my_system.GetChTime() * 100)) + ".pov")

# Cleanup
my_system.Clear()
```

**Explanation:**

1. **Initialization:** Sets up the Chrono system, gravity, and a ground body with visualization.
2. **Ground Body Movement:** Defines a sinusoidal motion for the ground body.
3. **Sensor Integration:** Creates instances of various sensors (camera, lidar, GPS, IMU) and configures their positions, orientations, and parameters.
4. **ROS Manager:** Registers the sensors with the ROS manager to publish data to specific ROS topics.
5. **Simulation Loop:**

   - Advances the simulation using `DoStepDynamics`.
   - Updates sensor data using `sensor_manager.Update()`.
   - Publishes sensor data to ROS topics using `ros_manager.PublishData()`.
   - Optionally exports visualization data using `ChPovRay`.

**Important Notes:**

- Replace `"path/to/ground_mesh.obj"` with the actual path to your ground mesh file.
- Adjust sensor parameters (position, orientation, range, etc.) as needed for your specific application.
- Ensure you have ROS installed and configured correctly.
- This script provides a basic framework. You may need to add more complex logic, sensor processing, and data handling based on your requirements.
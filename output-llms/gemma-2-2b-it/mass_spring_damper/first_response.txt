```python
import pychrono as chrono
import pychrono.irr as irr
import pychrono.irr.core as core
import pychrono.irr.scene as scene

# Initialize PyChrono
chrono.init()

# Create the Irrlicht scene
scene_manager = irr.SceneManager()
scene_manager.setCamera(core.Camera(
    position=(0, 0, 5),
    target=(0, 0, 0),
    up=(0, 1, 0),
    fov=45
))

# Create the Irrlicht world
world = scene_manager.createWorld()

# Create the mass
mass = chrono.ChBody(
    mass=1.0,
    position=(0, 0, 0),
    name="Mass"
)

# Create the spring
spring = chrono.ChLinkTSDA(
    mass=mass,
    position=(0, 0, 0),
    name="Spring"
)

# Connect the mass to the ground
chrono.ChLinkTSDA.connect(mass, spring, 
    damping=0.1,
    stiffness=1000.0,
    length=1.0
)

# Add the mass and spring to the world
world.addBody(mass)
world.addLink(spring)

# Create the Irrlicht visualization
irr_scene = scene.IrrScene(world)

# Set the Irrlicht lighting
irr_scene.setAmbientLight(irr.core.irr_color.Color(0.2, 0.2, 0.2))
irr_scene.setDirectionalLight(irr.core.irr_color.Color(1, 1, 1), irr.core.irr_vector.Vector3(0, 1, 0))

# Render the scene
irr_scene.render()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irr`, `pychrono.irr.core`, `pychrono.irr.scene`.
   - Initialize PyChrono using `chrono.init()`.

2. **Irrlicht Setup:**
   - Create an `IrrSceneManager` to manage the Irrlicht scene.
   - Set the camera position, target, and other camera properties.
   - Create a `IrrWorld` to hold the scene elements.

3. **Mass and Spring Creation:**
   - Create a `ChBody` for the mass with a mass of 1.0 and position (0, 0, 0).
   - Create a `ChLinkTSDA` for the spring with a mass, position, and name.
   - Connect the mass and spring using `ChLinkTSDA.connect()`.

4. **World and Visualization:**
   - Add the mass and spring to the world using `world.addBody()` and `world.addLink()`.
   - Create an `IrrScene` object from the world.
   - Set the Irrlicht lighting using `setAmbientLight()` and `setDirectionalLight()`.
   - Render the scene using `render()`.

**Key Points:**

- **`ChLinkTSDA`:** This is a type of connection in PyChrono that connects a mass to a ground or another object.
- **`damping`:** Controls the resistance of the spring to motion.
- **`stiffness`:** Controls the spring's resistance to deformation.
- **`length`:** The length of the spring.
- **Irrlicht Visualization:** This library provides tools for creating 3D graphics and rendering them.


This script provides a basic framework for simulating a mass-spring-damper system in PyChrono with Irrlicht visualization. You can customize the parameters and add more objects to create more complex simulations.
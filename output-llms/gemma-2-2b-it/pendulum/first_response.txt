```python
import pychrono as chrono
import pychrono.irrlicht as irr
import numpy as np

# Initialize PyChrono
chrono.init()

# Create the Irrlicht engine
engine = irr.IrrlichtEngine()

# Create the world
world = chrono.World()

# Create the ground body
ground = chrono.Body(chrono.BodyType.GROUND)
ground.setMass(1000)
ground.setInertia(chrono.Inertia(1000, 0, 0))
ground.setPosition(chrono.Vec3(0, 0, 0))
world.addBody(ground)

# Create the pendulum
pendulum = chrono.Body(chrono.BodyType.RIGID_BODY)
pendulum.setMass(1)
pendulum.setInertia(chrono.Inertia(0.1, 0, 0))
pendulum.setPosition(chrono.Vec3(0, 1, 0))
pendulum.setAngularVelocity(chrono.Vec3(0, 0, 0))

# Create the revolute joint
joint = chrono.RevoluteJoint(pendulum, ground)
world.addBody(pendulum)
world.addBody(ground)
world.addJoint(joint)

# Set the simulation parameters
dt = 0.01
time_step = chrono.TimeStep(dt)

# Set the visualization parameters
irr.setCamera(chrono.Vec3(0, 0, 10), chrono.Vec3(0, 0, 0), chrono.Vec3(0, 1, 0))

# Start the simulation
world.run(time_step)

# Log the pendulum's position and velocity
while True:
    # Get the pendulum's position and velocity
    position = pendulum.getPosition()
    velocity = pendulum.getVelocity()

    # Log the data
    print("Position:", position)
    print("Velocity:", velocity)

    # Update the simulation
    world.update(time_step)

# Clean up
world.destroy()
engine.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries: `pychrono`, `pychrono.irrlicht`, and `numpy`.
   - Initialize PyChrono using `chrono.init()`.
   - Create an Irrlicht engine using `irr.IrrlichtEngine()`.

2. **World and Bodies:**
   - Create a `chrono.World` object to represent the simulation environment.
   - Create a `chrono.Body` for the ground with a mass and inertia.
   - Create a `chrono.Body` for the pendulum with a mass and inertia.
   - Set the initial position and velocity of the pendulum.

3. **Revolute Joint:**
   - Create a `chrono.RevoluteJoint` connecting the pendulum to the ground.
   - Add the pendulum and ground bodies to the world.
   - Add the joint to the world.

4. **Simulation Parameters:**
   - Set the time step (`dt`) for the simulation.
   - Create a `chrono.TimeStep` object.

5. **Visualization Parameters:**
   - Set the camera position, direction, and target.

6. **Simulation Loop:**
   - Run the simulation using `world.run(time_step)`.
   - Get the pendulum's position and velocity.
   - Log the data to the console.
   - Update the simulation using `world.update(time_step)`.

7. **Cleanup:**
   - Destroy the world and the Irrlicht engine.

**Notes:**

- This script provides a basic framework for a simple pendulum simulation.
- You can customize the parameters (mass, inertia, etc.) to adjust the pendulum's behavior.
- The visualization system in Irrlicht can be used to render the simulation.
- The `while True` loop ensures the simulation runs continuously.
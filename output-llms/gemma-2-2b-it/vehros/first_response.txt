```python
import pychrono as chrono
import pychrono.physics as physics
import pychrono.ros as ros
import pychrono.vehicle as vehicle
import pychrono.terrain as terrain
import pychrono.driver as driver

# Initialize PyChrono
chrono.init()

# Create the simulation environment
world = chrono.World()

# Define the HMMWV vehicle
vehicle_model = vehicle.HMMWV(
    # Contact method: 
    contact_method=chrono.ContactMethod.CONTACT_POINT,
    # Engine type:
    engine_type=chrono.EngineType.GASOLINE,
    # Tire model:
    tire_model=chrono.TireModel.TIRE_MODEL_HYBRID
)

# Define the terrain
terrain_model = terrain.Terrain(
    # Friction coefficient:
    friction=0.5,
    # Restitution coefficient:
    restitution=0.8
)

# Create the driver system
driver_system = driver.DriverSystem(
    # Driver control:
    control_method=driver.ControlMethod.JOYSTICK
)

# Initialize ROS manager
ros_manager = ros.ROSManager(
    # ROS node name:
    node_name="HMMWV_Simulation"
)

# Register ROS handlers
ros_manager.register_handler(
    chrono.ClockSynchronizationHandler(
        # Clock synchronization frequency:
        frequency=100
    )
)
ros_manager.register_handler(
    chrono.DriverInputHandler(
        # Driver input source:
        source=driver_system
    )
)
ros_manager.register_handler(
    chrono.VehicleStateHandler(
        # Vehicle state data:
        data=vehicle_model.get_state()
    )
)

# Create a simulation loop
def simulation_loop():
    # Initialize simulation time
    time = 0

    # Main simulation loop
    while True:
        # Update vehicle state
        vehicle_model.update_state(time)

        # Update terrain state
        terrain_model.update_state(time)

        # Update driver system
        driver_system.update_state(time)

        # Synchronize and advance systems
        world.update(time)

        # Publish vehicle state data to ROS
        ros_manager.publish_data()

        # Increment simulation time
        time += 1 / 100

# Start the simulation
simulation_loop()

# Clean up PyChrono
chrono.finalize()
```

**Explanation:**

1. **Initialization:**
   - Import necessary modules from PyChrono and ROS.
   - Initialize PyChrono using `chrono.init()`.
   - Create a `World` object to represent the simulation environment.

2. **Vehicle and Terrain:**
   - Define the HMMWV vehicle using `vehicle.HMMWV()`.
   - Define the terrain using `terrain.Terrain()`.
   - Set parameters like friction and restitution for the terrain.

3. **Driver System:**
   - Create a `DriverSystem` object using `driver.DriverSystem()`.
   - Set the control method to `driver.ControlMethod.JOYSTICK`.

4. **ROS Manager:**
   - Create a `ROSManager` object to handle ROS communication.
   - Register handlers for clock synchronization, driver inputs, and vehicle state.

5. **Simulation Loop:**
   - Define a `simulation_loop()` function to run the simulation.
   - Inside the loop:
     - Update the vehicle, terrain, and driver systems.
     - Synchronize and advance the systems using `world.update()`.
     - Publish vehicle state data to ROS using `ros_manager.publish_data()`.
     - Increment the simulation time.

6. **Execution:**
   - Start the simulation by calling `simulation_loop()`.
   - Clean up PyChrono using `chrono.finalize()`.

**Key Points:**

- **Contact Method:** The `contact_method` parameter in the `HMMWV` object determines how the vehicle interacts with the terrain (e.g., contact point, point-to-point).
- **Engine Type:** The `engine_type` parameter defines the type of engine used in the vehicle (e.g., gasoline, electric).
- **Tire Model:** The `tire_model` parameter specifies the type of tire model used (e.g., hybrid, all-season).
- **Friction and Restitution:** The `friction` and `restitution` parameters define the friction and restitution properties of the terrain.
- **ROS Communication:** The ROS manager handles communication between PyChrono and ROS, allowing for data exchange and synchronization.
- **Clock Synchronization:** The `ClockSynchronizationHandler` ensures that all systems in the simulation are synchronized with a common clock.
- **Driver Inputs:** The `DriverInputHandler` allows for the driver's inputs to be received and processed by the driver system.
- **Vehicle State:** The `VehicleStateHandler` provides access to the vehicle's state data, which can be published to ROS.



This script provides a basic framework for a PyChrono simulation of an HMMWV vehicle. You can customize it further by adding more complex systems, physics, and interactions.
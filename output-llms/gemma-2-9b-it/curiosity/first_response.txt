```python
import pychrono as chrono

# 1. Initialize the PyChrono environment
chrono.SetChronoDataPath("path/to/chrono/data")  # Replace with your Chrono data path
system = chrono.ChSystemNSC()

# 2. Add physical systems and objects
# Example: Add a rigid body sphere
sphere = chrono.ChBodyEasySphere(1.0, 1.0)  # Radius = 1.0 m, mass = 1.0 kg
sphere.SetPos(chrono.ChVectorD(0, 0, 1))  # Initial position
system.Add(sphere)

# Example: Add a rigid body box
box = chrono.ChBodyEasyBox(0.5, 0.5, 1.0, 2.0)  # Dimensions (x, y, z), mass = 2.0 kg
box.SetPos(chrono.ChVectorD(0, 0, 0))  # Initial position
system.Add(box)

# 3. Set default parameters
# Example: Apply a gravitational force
system.Set_G_acc(chrono.ChVectorD(0, 0, -9.81))

# Example: Define contact material properties
contact_mat = chrono.ChMaterialSurfaceNSC()
contact_mat.SetFriction(0.5)
contact_mat.SetRestitution(0.1)

# Apply contact material to objects
sphere.GetMaterialSurface().SetMaterial(contact_mat)
box.GetMaterialSurface().SetMaterial(contact_mat)



# ... Add more objects, systems, and parameters as needed ...

# Start the simulation
system.DoStepDynamics(0.01)  # Time step = 0.01 seconds



```

**Explanation:**

1. **Initialization:**
   - `chrono.SetChronoDataPath()`: Sets the path to the Chrono data directory, which contains models and other resources.
   - `system = chrono.ChSystemNSC()`: Creates a new Chrono simulation system.

2. **Adding Objects:**
   - **Sphere:**
     - `chrono.ChBodyEasySphere()`: Creates a sphere object with specified radius and mass.
     - `SetPos()`: Sets the initial position of the sphere.
   - **Box:**
     - `chrono.ChBodyEasyBox()`: Creates a box object with specified dimensions and mass.
     - `SetPos()`: Sets the initial position of the box.
   - `system.Add()`: Adds the created objects to the simulation system.

3. **Default Parameters:**
   - `Set_G_acc()`: Applies a gravitational acceleration to the system.
   - **Contact Material:**
     - `chrono.ChMaterialSurfaceNSC()`: Creates a contact material object.
     - `SetFriction()`: Sets the friction coefficient.
     - `SetRestitution()`: Sets the restitution coefficient (bounciness).
   - `SetMaterial()`: Applies the contact material to the sphere and box.

4. **Simulation:**
   - `system.DoStepDynamics(0.01)`: Performs one simulation step with a time step of 0.01 seconds.

**Remember:**

- Replace `"path/to/chrono/data"` with the actual path to your Chrono data directory.
- Customize the object properties (size, mass, position), contact material parameters, and other settings according to your specific simulation requirements.
```python
import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math

chrono.SetChronoDataPath(chrono.GetChronoDataPath())
veh.SetDataPath(chrono.GetChronoDataPath() + 'vehicle/')

# Initial vehicle locations and orientations
initTruckLoc = chrono.ChVector3d(0, 0, 0.5)
initTruckRot = chrono.ChQuaterniond(1, 0, 0, 0)
initSedanLoc = chrono.ChVector3d(10, 0, 0.5)
initSedanRot = chrono.ChQuaterniond(1, 0, 0, 0)

# Visualization type for vehicle parts (PRIMITIVES, MESH, or NONE)
vis_type = veh.VisualizationType_MESH

# Collision type for chassis (PRIMITIVES, MESH, or NONE)
chassis_collision_type = veh.CollisionType_NONE

# Type of tire model (RIGID, TMEASY)
truck_tire_model = veh.TireModelType_RIGID
sedan_tire_model = veh.TireModelType_TMEASY

# Rigid terrain
terrain_model = veh.RigidTerrain.MESH
terrainHeight = 0
terrainLength = 100.0
terrainWidth = 100.0
terrainFile = "terrain/highway.obj"  # Replace with your highway mesh file

# Poon chassis tracked by the camera
trackPoint = chrono.ChVector3d(0, 0, 2.1)

# Contact method
contact_method = chrono.ChContactMethod_NSC
contact_vis = False

# Simulation step sizes
step_size = 1e-3
tire_step_size = step_size

# Time interval between two render frames
render_step_size = 1.0 / 50  # FPS = 50

# Create the kraz vehicle, set parameters, and initialize
truck = veh.Kraz()
truck.SetContactMethod(contact_method)
truck.SetChassisCollisionType(chassis_collision_type)
truck.SetChassisFixed(False)
truck.SetInitPosition(chrono.ChCoordsysd(initTruckLoc, initTruckRot))
truck.Initialize()

truck.SetChassisVisualizationType(vis_type, vis_type)
truck.SetSteeringVisualizationType(vis_type)
truck.SetSuspensionVisualizationType(vis_type, vis_type)
truck.SetWheelVisualizationType(vis_type, vis_type)
truck.SetTireVisualizationType(vis_type, vis_type)

truck.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the sedan vehicle
sedan = veh.Sedan()
sedan.SetContactMethod(contact_method)
sedan.SetChassisCollisionType(chassis_collision_type)
sedan.SetChassisFixed(False)
sedan.SetInitPosition(chrono.ChCoordsysd(initSedanLoc, initSedanRot))
sedan.Initialize()

sedan.SetChassisVisualizationType(vis_type, vis_type)
sedan.SetSteeringVisualizationType(vis_type)
sedan.SetSuspensionVisualizationType(vis_type, vis_type)
sedan.SetWheelVisualizationType(vis_type, vis_type)
sedan.SetTireVisualizationType(vis_type, vis_type)

sedan.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)

# Create the terrain
patch_mat = chrono.ChContactMaterialNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
terrain = veh.RigidTerrain(truck.GetSystem())
patch = terrain.AddPatchFromMesh(patch_mat, 
    chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), 
    terrainFile, terrainLength, terrainWidth)

patch.SetColor(chrono.ChColor(0.8, 0.8, 0.5))
terrain.Initialize()

# Create the vehicle Irrlicht interface
vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('Kraz Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 25.0, 1.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(truck.GetTractor())
vis.AttachVehicle(sedan.GetTractor())

# Create the driver systems
truck_driver = veh.ChInteractiveDriverIRR(vis)
sedan_driver = veh.ChInteractiveDriverIRR(vis)

# Set the time response for steering and throttle keyboard inputs.
steering_time = 1.0  # time to go from 0 to +1 (or from 0 to -1)
throttle_time = 1.0  # time to go from 0 to +1
braking_time = 0.3   # time to go from 0 to +1
truck_driver.SetSteeringDelta(render_step_size / steering_time)
truck_driver.SetThrottleDelta(render_step_size / throttle_time)
truck_driver.SetBrakingDelta(render_step_size / braking_time)

sedan_driver.SetSteeringDelta(render_step_size / steering_time)
sedan_driver.SetThrottleDelta(render_step_size / throttle_time)
sedan_driver.SetBrakingDelta(render_step_size / braking_time)

truck_driver.Initialize()
sedan_driver.Initialize()

# Store truck state
truck_state = {}

# Set sedan to move forward
sedan_driver.SetThrottle(1.0)
sedan_driver.SetSteering(0.0)

# output vehicle mass
print( "VEHICLE MASS: ",  truck.GetTractor().GetMass())

# Number of simulation steps between miscellaneous events
render_steps = math.ceil(render_step_size / step_size)

# Initialize simulation frame counter s
realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run() :
    time = truck.GetSystem().GetChTime()

    # Render scene and output POV-Ray data
    if (step_number % render_steps == 0) :
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    # Get driver inputs
    truck_inputs = truck_driver.GetInputs()
    sedan_inputs = sedan_driver.GetInputs()

    # Update modules (process inputs from other modules)
    truck_driver.Synchronize(time)
    terrain.Synchronize(time)
    truck.Synchronize(time, truck_inputs, terrain)
    sedan_driver.Synchronize(time)
    terrain.Synchronize(time)
    sedan.Synchronize(time, sedan_inputs, terrain)
    vis.Synchronize(time, truck_inputs, sedan_inputs)

    # Advance simulation for one timestep for all modules
    truck_driver.Advance(step_size)
    terrain.Advance(step_size)
    truck.Advance(step_size)
    sedan_driver.Advance(step_size)
    terrain.Advance(step_size)
    sedan.Advance(step_size)
    vis.Advance(step_size)

    # Increment frame number
    step_number += 1

    # Spin in place for real time to catch up
    realtime_timer.Spin(step_size)

```

**Explanation of Changes:**

1. **Vehicle Initialization:**
   - Added initialization for the sedan vehicle with its own `veh.Sedan()` object.
   - Set the initial location and orientation for the sedan.
   - Set the tire model for the sedan to `veh.TireModelType_TMEASY`.

2. **Terrain Modification:**
   - Changed the terrain type to `veh.RigidTerrain.MESH`.
   - Added a `terrainFile` variable to specify the path to your highway mesh file.
   - Used `terrain.AddPatchFromMesh()` to load the highway mesh.

3. **Driver Systems:**
   - Created a second `veh.ChInteractiveDriverIRR()` object for the sedan.
   - Initialized both driver systems.

4. **Sedan Control:**
   - Set the sedan's throttle to `1.0` to make it move forward.
   - Set the sedan's steering to `0.0` for straight movement.

5. **Truck State Storage:**
   - Added a dictionary `truck_state` to store the state of the truck's tractor during the simulation. You can add specific attributes you want to track.

6. **Output Vehicle Mass:**
   - Printed the mass of the truck's tractor using `truck.GetTractor().GetMass()`.



**Important Notes:**

- Make sure to replace `"terrain/highway.obj"` with the actual path to your highway mesh file.
- You can customize the sedan's movement by adjusting the `sedan_inputs` in the simulation loop.
- The `truck_state` dictionary can be used to access and analyze the truck's state at different points in the simulation.
```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# Initialize Chrono system
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))  # Set gravity

# Create ground body
ground = chrono.ChBodyEasyBox(10, 10, 0.1)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(ground)

# Initialize Turtlebot
turtlebot = chrono.ChBodyEasySphere(0.2, 0.1)
turtlebot.SetPos(chrono.ChVectorD(0, 0, 0.1))
turtlebot.SetRot(chrono.Q_from_Euler(chrono.ChVectorD(0, 0, 0)))  # Initial orientation
system.Add(turtlebot)

# Create visualization
vis = chronoirr.ChIrrApp(system, 'Turtlebot Simulation')
vis.AddCamera(chrono.ChVectorD(5, 5, 5), chrono.ChVectorD(0, 0, 0))
vis.SetSunLight(chrono.ChVectorD(1, 1, 1), chrono.ChVectorD(0, 0, 0))

# Motor control parameters
motor_speed = 0.1
turn_time = 2.0

# Simulation loop
while vis.Run():
    # Control Turtlebot motors
    current_time = vis.GetChTime()
    if current_time % turn_time < turn_time / 2:
        turtlebot.SetBodyFixed(True)
        turtlebot.AddTorque(chrono.ChVectorD(0, 0, motor_speed))
    else:
        turtlebot.SetBodyFixed(True)
        turtlebot.AddTorque(chrono.ChVectorD(0, 0, -motor_speed))

    # Update and render
    vis.BeginScene()
    system.DoStepDynamics(1/240.0)  # Update simulation at 240 Hz
    vis.DrawAll()
    vis.EndScene()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary libraries: `pychrono` for physics simulation and `pychrono.irrlicht` for visualization.
   - Creates a `ChSystemNSC` object to represent the Chrono simulation environment.
   - Sets gravity using `Set_G_acc`.
   - Creates a ground body using `ChBodyEasyBox` and positions it at the origin.
   - Initializes the Turtlebot as a sphere using `ChBodyEasySphere` and sets its initial position and orientation.

2. **Visualization:**
   - Creates an `ChIrrApp` object to set up the Irrlicht visualization with the Chrono system.
   - Adds a camera to the scene and positions it for a good view.
   - Sets the sun light direction and color.

3. **Motor Control:**
   - Defines `motor_speed` and `turn_time` variables to control the Turtlebot's turning behavior.
   - In the simulation loop, it checks the current time and applies torque to the Turtlebot's body to turn left or right based on the `turn_time`.

4. **Simulation Loop:**
   - Uses a `while` loop to run the simulation until the user closes the visualization window.
   - Inside the loop:
     - Controls the Turtlebot's motors based on the time.
     - Updates the simulation using `DoStepDynamics` with a timestep of 1/240.0 seconds (240 Hz).
     - Renders the scene using `DrawAll` and `EndScene`.



**To run this script:**

1. Make sure you have PyChrono and Irrlicht installed.
2. Save the code as a Python file (e.g., `turtlebot_simulation.py`).
3. Run the script from your terminal: `python turtlebot_simulation.py`

This will open a window displaying the Turtlebot simulation. You should see the Turtlebot rotating back and forth as controlled by the motor parameters.
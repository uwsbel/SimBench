Certainly! Below is a Python script that sets up a PyChrono simulation for a Jeffcott rotor using an Isogeometric Analysis (IGA) beam, with a flywheel attached at its center and a rotational motor driving one end of the beam. The script also includes FEM visualization and an Irrlicht window to observe the dynamics.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.fea as fea

# Initialize the PyChrono environment
chrono.SetChronoDataPath("path/to/chrono/data")

# Create the physical system
system = chrono.ChSystemNSC()

# Create the ground body
ground = chrono.ChBody()
ground.SetBodyFixed(True)
system.Add(ground)

# Create the IGA beam
beam = fea.ChMesh()

# Define beam properties
length = 1.0  # Length of the beam
n_elements = 10  # Number of elements
beam_section = fea.ChBeamSectionAdvanced()
beam_section.SetAsRectangularSection(0.01, 0.01)
beam_section.SetYoungModulus(210e9)
beam_section.SetGshearModulus(80.77e9)
beam_section.SetDensity(7800)

# Create nodes and elements
nodes = []
for i in range(n_elements + 1):
    x = i * (length / n_elements)
    node = fea.ChNodeFEAxyzrot(chrono.ChFrameD(chrono.ChVectorD(x, 0, 0)))
    nodes.append(node)
    beam.AddNode(node)

for i in range(n_elements):
    element = fea.ChElementBeamIGA()
    element.SetNodes(nodes[i], nodes[i + 1])
    element.SetSection(beam_section)
    beam.AddElement(element)

system.Add(beam)

# Attach a flywheel at the center of the beam
flywheel = chrono.ChBodyEasyCylinder(0.05, 0.01, 7800)
flywheel.SetPos(chrono.ChVectorD(length / 2, 0, 0))
system.Add(flywheel)

# Create a constraint to attach the flywheel to the beam
constraint = chrono.ChLinkMateGeneric()
constraint.Initialize(nodes[n_elements // 2], flywheel, False, nodes[n_elements // 2].Frame(), flywheel.GetFrame())
system.Add(constraint)

# Create a rotational motor to drive one end of the beam
motor = chrono.ChLinkMotorRotationSpeed()
motor.Initialize(ground, nodes[0], chrono.ChFrameD(nodes[0].Frame().GetPos()))
motor.SetSpeedFunction(chrono.ChFunction_Const(chrono.CH_C_PI / 2))  # Constant angular speed
system.Add(motor)

# Visualization
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle('Jeffcott Rotor Simulation')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0.5, 0.5, -1))
vis.AddTypicalLights()

# FEM visualization
visualize_beam = fea.ChVisualizationFEAmesh(beam)
visualize_beam.SetFEMglyphType(fea.ChVisualizationFEAmesh.E_GLYPH_NODE_DOT_POS)
visualize_beam.SetFEMdataType(fea.ChVisualizationFEAmesh.E_PLOT_SURFACE)
visualize_beam.SetWireframe(True)
beam.AddAsset(visualize_beam)

# Simulation loop
while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    system.DoStepDynamics(1e-3)
```

### Explanation:
1. **Initialization**: The script initializes the PyChrono environment and core components.
2. **Physical System**: A physical system (`system`) is created, along with a ground body that is fixed.
3. **Beam Creation**: An IGA beam is created with specified properties (length, number of elements, section properties). Nodes and elements are added to the beam.
4. **Flywheel Attachment**: A flywheel is created and attached at the center of the beam using a constraint.
5. **Rotational Motor**: A rotational motor is created to drive one end of the beam with a constant angular speed.
6. **Visualization**: The Irrlicht visualization system is set up to observe the dynamics of the beam and flywheel system. FEM visualization is also added to visualize the beam's deformation.

Make sure to replace `"path/to/chrono/data"` with the actual path to your Chrono data directory. This script should provide a comprehensive simulation of the Jeffcott rotor system as specified.
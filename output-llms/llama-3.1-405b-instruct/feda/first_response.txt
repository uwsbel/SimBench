Here's a sample script that adheres to the provided instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
application = chronoirr.ChIrrApp(my_system, 'FEDA Vehicle Simulation', chronoirr.dimension2du(800, 600))

# Set the simulation time step and the simulation end time
application.SetTimestep(0.02)
application.SetTryRealtime(True)

# Create the FEDA vehicle
vehicle = chrono.ChPart('FEDA_Vehicle')
vehicle.SetMass(1500)
vehicle.SetInertiaXX(chrono.ChVectorD(1000, 1000, 1000))
vehicle.SetPos(chrono.ChVectorD(0, 1.5, 0))
vehicle.SetRot(chrono.Q_from_AngZ(0))
my_system.Add(vehicle)

# Create the vehicle's chassis
chassis = chrono.ChPart('Chassis')
chassis.SetMass(500)
chassis.SetInertiaXX(chrono.ChVectorD(500, 500, 500))
chassis.SetPos(chrono.ChVectorD(0, 1, 0))
chassis.SetRot(chrono.Q_from_AngZ(0))
vehicle.AddChild(chassis)

# Create the vehicle's wheels
left_front_wheel = chrono.ChPart('Left_Front_Wheel')
left_front_wheel.SetMass(50)
left_front_wheel.SetInertiaXX(chrono.ChVectorD(20, 20, 20))
left_front_wheel.SetPos(chrono.ChVectorD(-1.5, 0.5, 1.5))
left_front_wheel.SetRot(chrono.Q_from_AngZ(0))
vehicle.AddChild(left_front_wheel)

right_front_wheel = chrono.ChPart('Right_Front_Wheel')
right_front_wheel.SetMass(50)
right_front_wheel.SetInertiaXX(chrono.ChVectorD(20, 20, 20))
right_front_wheel.SetPos(chrono.ChVectorD(1.5, 0.5, 1.5))
right_front_wheel.SetRot(chrono.Q_from_AngZ(0))
vehicle.AddChild(right_front_wheel)

left_rear_wheel = chrono.ChPart('Left_Rear_Wheel')
left_rear_wheel.SetMass(50)
left_rear_wheel.SetInertiaXX(chrono.ChVectorD(20, 20, 20))
left_rear_wheel.SetPos(chrono.ChVectorD(-1.5, 0.5, -1.5))
left_rear_wheel.SetRot(chrono.Q_from_AngZ(0))
vehicle.AddChild(left_rear_wheel)

right_rear_wheel = chrono.ChPart('Right_Rear_Wheel')
right_rear_wheel.SetMass(50)
right_rear_wheel.SetInertiaXX(chrono.ChVectorD(20, 20, 20))
right_rear_wheel.SetPos(chrono.ChVectorD(1.5, 0.5, -1.5))
right_rear_wheel.SetRot(chrono.Q_from_AngZ(0))
vehicle.AddChild(right_rear_wheel)

# Create the RigidTerrain
terrain = chrono.ChBodyEasyBox(my_system,  # use the EASY-box shortcut
                               10, 1, 10,  # x,y,z size
                               1000,       # density
                               True,       # visualization?
                               True,       # collide?
                               chrono.ChVectorD(0, -2, 0),  # initial position
                               chrono.QUNIT)  # initial rotation
terrain.SetBodyFixed(True)
my_system.Add(terrain)

# Set the terrain's texture
terrain_texture = chronoirr.ChIrrNodeAsset(terrain)
terrain_texture.SetTexture(chronoirr.GetSystemTexture('rock.jpg'))
application.AssetBind(terrain_texture)
application.AssetUpdate(terrain_texture)

# Create the vehicle's tire model
tire_model = chrono.ChTireModel()
tire_model.SetLongitudinalStiffness(100000)
tire_model.SetLateralStiffness(100000)
tire_model.SetCamberStiffness(10000)
vehicle.AddTire(tire_model, left_front_wheel)
vehicle.AddTire(tire_model, right_front_wheel)
vehicle.AddTire(tire_model, left_rear_wheel)
vehicle.AddTire(tire_model, right_rear_wheel)

# Create the driver system
driver = chrono.ChIrrNodeAsset(vehicle)
driver.SetSteeringDelta(0.1)
driver.SetThrottleDelta(0.1)
driver.SetBrakingDelta(0.1)
application.AssetBind(driver)
application.AssetUpdate(driver)

# Create the camera and set its position
camera = chronoirr.ChIrrNodeAsset(application.GetSceneManager(), chronoirr.SManager())
camera.SetPos(chrono.ChVectorD(0, 5, -10))
camera.SetTarget(vehicle)
application.AssetBind(camera)
application.AssetUpdate(camera)

# Simulation loop
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()
```

This script creates a PyChrono simulation of a FEDA vehicle on a rigid terrain using Irrlicht for visualization. The vehicle is initialized with specific parameters such as location, orientation, contact method, and tire model. The camera is set to follow the vehicle from a designated position, and an interactive driver system is implemented to control the vehicle's steering, throttle, and braking. The simulation loop runs at 50 frames per second, updating the vehicle dynamics and rendering the scene in real time.
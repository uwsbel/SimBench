Here's a sample PyChrono script based on the provided instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the ground body
ground = chrono.ChBodyEasyBox(my_system,  # parent system
                              100, 100, 2,  # dimensions
                              1000,  # density
                              True,  # visualization
                              True,  # collision
                              chrono.ChMaterialSurfaceNSC()  # material
                              )
ground.SetBodyFixed(True)
my_system.Add(ground)

# Create the Gator vehicle
gator = chrono.ChPart(chrono.ChVectorD(0, 0, 0.5))  # initial position
gator.SetMass(1000)  # mass
gator.SetInertiaXX(chrono.ChVectorD(100, 100, 100))  # inertia

# Add visualization mesh for vehicle components
gator.AddAsset(chrono.ChVisualShape(chrono.ChVectorD(0, 0, 0),  # position
                                    chrono.ChQuaternionD(1, 0, 0, 0),  # rotation
                                    chrono.ChVectorD(1, 1, 1),  # scale
                                    chrono.ChColor(1, 0, 0),  # color
                                    chrono.ChVisualShape.SHAPE_MESH,  # type
                                    '/path/to/gator/mesh.obj'  # mesh file
                                    ))

# Set vehicle contact method and tire model
contact_method = chrono.ChMaterialSurfaceNSC()
contact_method.SetFriction(0.8)
contact_method.SetRestitution(0.2)
gator.GetCollisionModel().ClearModel()
gator.GetCollisionModel().AddBox(contact_method, 1, 1, 1)
gator.GetCollisionModel().BuildModel()
gator.SetTireModel(chrono.ChTireModelEasy())

# Add vehicle to system
my_system.Add(gator)

# Create the RigidTerrain
terrain = chrono.ChRigidTerrain(my_system,  # parent system
                                100, 100,  # dimensions
                                '/path/to/terrain/mesh.obj',  # mesh file
                                '/path/to/terrain/texture.png'  # texture file
                                )
my_system.Add(terrain)

# Create an interactive driver system
driver = chrono.ChIrrNodeApplication(gator)

# Set up simulation loop
application = chronoirr.ChIrrApp(my_system, 'Gator Vehicle Simulation', chronoirr.dimension2du(800, 600))
application.AddTypicalSky()
application.AddTypicalCamera(chronoirr.vector3df(0, 0, 1))
application.AddTypicalLights()
application.AssetBindAll()
application.AssetUpdateAll()

# Simulation loop
while application.GetDevice().run():
    # Update vehicle dynamics
    my_system.DoStepDynamics(1 / 50.0)

    # Update rendering
    application.BeginScene()
    application.DrawAll()
    application.EndScene()

    # Update interactive driver system
    driver.Synchronize()
```

This script creates a PyChrono simulation of a Gator vehicle on a flat rigid terrain using Irrlicht for visualization. It initializes the vehicle with parameters such as location, orientation, contact method, and TMEASY tire model. The script also sets up a RigidTerrain with specified dimensions and a custom texture. An interactive driver system is implemented to allow control over the vehicle's steering, throttle, and braking. The simulation loop updates vehicle dynamics and rendering at 50 frames per second in real time.

Note that you'll need to replace the `/path/to/chrono/data/`, `/path/to/gator/mesh.obj`, `/path/to/terrain/mesh.obj`, and `/path/to/terrain/texture.png` placeholders with the actual paths to your Chrono data directory, Gator mesh file, terrain mesh file, and terrain texture file, respectively.
Here's a sample PyChrono simulation script based on the given instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.vehicle as veh
import pychrono.sensor as sens
import pychrono.irrlicht as irr

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
sys = chrono.ChSystemNSC()

# Create the HMMWV vehicle
vehicle = veh.ChPart('HMMWV')
vehicle.SetMass(2000)
vehicle.SetInertiaXX(1000)
vehicle.SetInertiaYY(1000)
vehicle.SetInertiaZZ(1000)

# Create the vehicle's chassis body
chassis = chrono.ChBodyAuxRef()
chassis.SetPos(chrono.ChVectorD(0, 1, 0))
vehicle.AddBody(chassis)

# Add the vehicle to the system
sys.Add(vehicle)

# Create the terrain
terrain = veh.RigidTerrain(sys)
terrain.SetTexture(veh.GetDataFile('terrain/textures/grass.jpg'))
terrain.SetNormalMap(veh.GetDataFile('terrain/textures/grass_nm.jpg'))

# Add the terrain to the system
sys.Add(terrain)

# Create a driver system
driver = veh.ChIrrNodeApplication(vehicle)
driver.SetSteeringController(veh.ChConstantController(0.01))
driver.SetThrottleController(veh.ChConstantController(0.1))
driver.SetBrakingController(veh.ChConstantController(0.0))

# Create an IMU sensor and attach it to the vehicle's chassis
imu = sens.ChIMUSensor()
imu.SetOffsetPos(chrono.ChVectorD(0.1, 0.1, 0.1))
imu.SetOffsetRot(chrono.ChQuaternionD(1, 0, 0, 0))
chassis.AddSensor(imu)

# Create a GPS sensor and attach it to the vehicle's chassis
gps = sens.ChGPSSensor()
gps.SetOffsetPos(chrono.ChVectorD(0.1, 0.1, 0.1))
gps.SetOffsetRot(chrono.ChQuaternionD(1, 0, 0, 0))
chassis.AddSensor(gps)

# Create an Irrlicht application
app = irr.ChIrrApp(sys, 'PyChrono Simulation', irr.dimension2du(800, 600))

# Set up the simulation loop
while app.GetDevice().run():
    # Output the vehicle's mass
    print('Vehicle mass:', vehicle.GetMass())

    # Render the scene
    app.BeginScene(True, True, irr.SColor(255, 140, 161, 192))
    app.DrawAll()
    app.EndScene()

    # Advance the vehicle, terrain, driver, and visual system modules
    vehicle.Advance(0.01)
    terrain.Advance(0.01)
    driver.Advance(0.01)
    app.Advance(0.01)

    # Process and update sensor data
    imu.Update()
    gps.Update()
```

This script creates a PyChrono simulation featuring an HMMWV vehicle with a full system setup, including terrain, driver inputs, and visual interface using Irrlicht. It also adds and manages IMU and GPS sensors attached to the vehicle's chassis, processing and updating sensor data at each simulation step. The simulation loop synchronizes and advances the vehicle, terrain, driver, and visual system modules while outputting the vehicle's mass and rendering scenes. 

Please replace `'/path/to/chrono/data/'` with the actual path to your Chrono::Engine data directory.
Here is the PyChrono simulation script based on the provided instructions:
```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chrono_vehicle

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('./data/')
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization
irrlicht = chronoirr.ChIrrlichtVisualization(system)
irrlicht.SetWindowSize(800, 600)
irrlicht.SetWindowTitle('ARTcar Simulation')
irrlicht.SetCameraDistance(10)
irrlicht.SetCameraAzimuth(45)
irrlicht.SetCameraElevation(30)

# Create the ARTcar vehicle
vehicle = chrono_vehicle.ChVehicle()
vehicle.SetChassisBodyMass(1500)
vehicle.SetChassisBodyInertia(chrono.ChVectorD(1000, 1000, 1000))
vehicle.SetChassisBodyPosition(chrono.ChVectorD(0, 0, 0.5))
vehicle.SetChassisBodyOrientation(chrono.ChQuaternionD(1, 0, 0, 0))
vehicle.SetContactMethod(chrono.ChContactMethodType.SHAPE)
vehicle.SetVisualizationType(chrono.ChVisualizationType.MESH)

# Create the RigidTerrain
terrain = chrono.ChRigidTerrain()
terrain.SetSize(chrono.ChVectorD(100, 100, 10))
terrain.SetTexture('data/textures/terrain.png')
terrain.SetMaterial(chrono.ChMaterialSurfaceNSC())

# Add the terrain to the system
system.Add(terrain)

# Add the vehicle to the system
system.Add(vehicle)

# Create an interactive driver system
driver = chrono_vehicle.ChIrrlichtDriver(vehicle)
driver.SetSteeringGain(0.1)
driver.SetThrottleGain(0.1)
driver.SetBrakingGain(0.1)

# Simulation loop
while True:
    # Update the vehicle dynamics
    system.DoStepDynamics(0.02)

    # Update the visualization
    irrlicht.BeginScene()
    irrlicht.DrawAll()
    irrlicht.EndScene()

    # Update the driver system
    driver.Update()

    # Display the simulation at 50 frames per second
    chrono.ChSleep(0.02)
```
This script initializes the PyChrono environment, creates an ARTcar vehicle with specific parameters, sets up a RigidTerrain with a custom texture, and incorporates an interactive driver system to control the vehicle's steering, throttle, and braking. The simulation loop updates the vehicle dynamics and visualization in real time, displaying the simulation at 50 frames per second using Irrlicht for visualization.
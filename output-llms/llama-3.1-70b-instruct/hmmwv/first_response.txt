Here is the PyChrono simulation script based on the provided instructions:
```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('./data/')
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization
irrlicht = chronoirr.ChVisualSystemIrrlicht(system)
irrlicht.SetWindowSize(800, 600)
irrlicht.SetWindowTitle('HMMWV Simulation')

# Create the vehicle
hmmwv = veh.HMMWV(system)
hmmwv.SetLocation(chrono.ChVectorD(0, 0, 1.5))
hmmwv.SetRotation(chrono.Q_from_AngX(chrono.CH_C_PI / 2))
hmmwv.SetContactMethod(chrono.ChMaterialSurfaceNSC())
hmmwv.SetTireModel(chrono.TireModelType.TMEASY)
hmmwv.SetVisualizationType(chrono.VisualizationType.PRIMITIVES)

# Create the terrain
terrain = chrono.ChBodyEasyBox(system, 100, 100, 1, 1000, True, True)
terrain.SetPos(chrono.ChVectorD(0, 0, 0))
terrain.SetMaterial(chrono.ChMaterialSurfaceNSC())
terrain.SetTexture(chrono.ChTexture('data/textures/concrete.jpg'))

# Create the driver system
driver = veh.ChIrrlichtDriver(hmmwv.GetPart(0), irrlicht, 0.002, 0.002, 0.002, 0.002)
driver.SetSteeringMode(chrono.SteeringMode.TORQUE)
driver.SetThrottleMode(chrono.ThrottleMode.TORQUE)
driver.SetBrakingMode(chrono.BrakingMode.TORQUE)

# Set up the simulation loop
time_step = 0.02
while irrlicht.GetDevice().run():
    system.DoStepDynamics(time_step)
    irrlicht.BeginScene()
    irrlicht.DrawAll()
    irrlicht.EndScene()
    chrono.ChUtils::Sleep(0.02)

# Clean up
irrlicht.GetDevice().drop()
```
This script initializes the PyChrono environment, creates the HMMWV vehicle with the specified parameters, sets up the terrain and driver system, and runs the simulation loop in real-time at 50 frames per second. The simulation updates the vehicle dynamics and renders the scene using Irrlicht.
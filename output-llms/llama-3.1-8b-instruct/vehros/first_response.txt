Here's the code that meets the given specifications:

```python
import chrono as ch
import chrono.ros as ros
import numpy as np

# Initialize the PyChrono environment
ch.init()

# Create a world
world = ch.World()

# Create a terrain
terrain = ch.Terrain()
terrain.set_friction(0.7)
terrain.set_restitution(0.2)
world.add(terrain)

# Create an HMMWV vehicle
vehicle = ch.ChBody()
vehicle.set_name("HMMWV")
vehicle.set_mass(3000)
vehicle.set_inertia(1000, 1000, 1000)
vehicle.set_pos(ch.Vec3(0, 0, 0))
vehicle.set_rot(ch.Mat33(ch.PI/2, 0, 0))
vehicle.set_contact_method(ch.CON_METHOD_DEFAULT)
vehicle.set_engine_type(ch.ENGINE_TYPE_DEFAULT)
vehicle.set_tire_model(ch.TIRE_MODEL_DEFAULT)
world.add(vehicle)

# Create a driver system
driver = ch.Driver()
driver.set_vehicle(vehicle)
driver.set_control_mode(ch.CONTROL_MODE_DEFAULT)
world.add(driver)

# Create a ROS manager
ros_manager = ros.Manager()
ros_manager.set_world(world)
ros_manager.set_clock_synchronization_handler("clock_sync_handler")
ros_manager.set_driver_input_handler("driver_input_handler")
ros_manager.set_vehicle_state_handler("vehicle_state_handler")
world.add(ros_manager)

# Define the simulation loop
def simulation_loop():
    # Synchronize the world
    world.synchronize()

    # Advance the world
    world.advance()

    # Update the ROS manager
    ros_manager.update()

# Define the clock synchronization handler
def clock_sync_handler():
    # Get the current time
    current_time = ros_manager.get_current_time()

    # Set the world's time
    world.set_time(current_time)

# Define the driver input handler
def driver_input_handler():
    # Get the driver's input
    driver_input = driver.get_input()

    # Set the vehicle's input
    vehicle.set_input(driver_input)

# Define the vehicle state handler
def vehicle_state_handler():
    # Get the vehicle's state
    vehicle_state = vehicle.get_state()

    # Publish the vehicle's state
    ros_manager.publish_vehicle_state(vehicle_state)

# Set the simulation loop to run at 100 Hz
world.set_dt(0.01)
world.set_max_steps(100)

# Run the simulation loop
while world.get_step() < world.get_max_steps():
    simulation_loop()

# Finalize the PyChrono environment
ch.finalize()
```

This code initializes the PyChrono environment, creates a world with a terrain and an HMMWV vehicle, sets up a driver system, and integrates ROS for communication. It also defines a simulation loop that synchronizes and advances the world at each timestep, updates the ROS manager for data publishing, and sets up handlers for clock synchronization, driver inputs, and vehicle state. The simulation loop runs at 100 Hz, and the PyChrono environment is finalized at the end.
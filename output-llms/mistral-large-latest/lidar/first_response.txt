Certainly! Below is a PyChrono simulation script that meets the specified requirements. The script initializes the PyChrono environment, adds a triangular mesh from a Wavefront .obj file as a fixed body, and includes a lidar sensor with noise filters, visualizations, and saving options. The lidar's position is dynamically updated to orbit around the mesh, and the lidar buffer data is printed at each simulation step.

```python
import pychrono as chrono
import pychrono.sensor as sens
import numpy as np
import matplotlib.pyplot as plt

# Initialize the PyChrono environment
chrono.SetChronoDataPath('path/to/chrono/data')
my_system = chrono.ChSystemNSC()
my_system.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)

# Add a ground body (fixed)
ground = chrono.ChBody()
ground.SetIdentifier(-1)
ground.SetBodyFixed(True)
ground.SetCollide(False)
my_system.Add(ground)

# Load the triangular mesh from a Wavefront .obj file
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefrontMesh('path/to/mesh.obj')
mesh.RepairDuplicateVertexes(True)

# Create a visualization asset for the mesh
visualization_mesh = chrono.ChTriangleMeshShape()
visualization_mesh.SetMesh(mesh)

# Create a body for the mesh
mesh_body = chrono.ChBody()
mesh_body.SetIdentifier(1)
mesh_body.SetBodyFixed(True)
mesh_body.SetCollide(False)
mesh_body.AddAsset(visualization_mesh)
my_system.Add(mesh_body)

# Initialize the sensor manager
sensor_manager = sens.ChSensorManager(my_system)

# Add a lidar sensor
lidar = sens.ChLidarSensor(
    mesh_body,                    # body lidar is attached to
    20,                           # scanning rate in Hz
    120,                          # number of horizontal samples
    1,                            # number of vertical "layers"
    chrono.ChFrameD(chrono.ChVectorD(1, 0, 0), chrono.Q_from_AngX(chrono.CH_C_PI / 2))  # offset pose
)
sensor_manager.AddSensor(lidar)

# Add noise filter to the lidar data
lidar.PushFilter(sens.ChFilterNoiseNone())

# Add visualization of the lidar data
lidar.PushFilter(sens.ChFilterVisualize(1024))

# Add saving options for the lidar data
lidar.PushFilter(sens.ChFilterSave("lidar_data.csv"))

# Simulation parameters
time_step = 0.01
simulation_time = 10

# Function to update lidar position in an orbit around the mesh
def update_lidar_position(time):
    radius = 5
    angular_velocity = 0.5
    angle = angular_velocity * time
    lidar_pos = chrono.ChVectorD(radius * np.cos(angle), radius * np.sin(angle), 1)
    lidar.SetOffsetPose(chrono.ChFrameD(lidar_pos, chrono.Q_from_AngZ(angle)))

# Simulation loop
time = 0
while time < simulation_time:
    update_lidar_position(time)

    my_system.DoStepDynamics(time_step)
    sensor_manager.Update()

    # Print lidar buffer data
    if lidar.GetMostRecentBuffer():
        print(lidar.GetMostRecentBuffer())

    time += time_step

# Visualization (optional)
vis = chrono.ChVisualSystemIrrlicht()
vis.AttachSystem(my_system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle('PyChrono Lidar Simulation')
vis.Initialize()
vis.AddLogo()
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0, -10, 5))
vis.AddTypicalLights()

while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
```

### Explanation:
1. **Initialization**: The script initializes the PyChrono environment and sets up the core components.
2. **Ground Body**: A fixed ground body is added to the system.
3. **Mesh Loading**: The triangular mesh is loaded from a Wavefront .obj file and attached to a fixed body.
4. **Sensor Manager and Lidar**: A sensor manager is initialized, and a lidar sensor is added to the mesh body.
5. **Filters**: Noise filters, visualizations, and saving options are applied to the lidar data.
6. **Simulation Loop**: The lidar's position is updated dynamically in an orbit around the mesh, and the lidar buffer data is printed at each simulation step.
7. **Visualization**: An optional visualization using Irrlicht is included to visualize the simulation.

You need to replace `'path/to/chrono/data'` and `'path/to/mesh.obj'` with the actual paths to your Chrono data directory and the mesh file, respectively.
```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as veh
import pychrono.scm as scm

# 1. Initialize the PyChrono environment and core components
chrono.SetChronoDataPath("path/to/chrono/data")

# Create a Chrono system
system = chrono.ChSystemNSC()

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1280, 720)
vis.SetCameraVertical(chrono.ChVectorD(0, 0, 1.75))
vis.Initialize()
vis.AddLogo()
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0, -6, 2))
vis.AddTypicalLights()

# 2. Add the required physical systems and objects as specified

# Create the HMMWV vehicle
hmmwv = veh.HMMWV_Full()
hmmwv.SetContactMethod(chrono.ChContactMethod_NSC)
hmmwv.SetChassisFixed(False)
hmmwv.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0.5), chrono.Q_from_AngZ(chrono.CH_C_PI / 6)))
hmmwv.SetTireType(veh.TireModelType_RIGID_MESH)
hmmwv.SetTireStepSize(1e-3)
hmmwv.Initialize()

# Add the vehicle to the system
hmmwv.GetChassisBody().SetBodyFixed(False)
system.Add(hmmwv)

# Create the SCM deformable terrain
terrain = scm.SCMDeformableTerrain(system)
terrain.SetSoilParameters(2e6,  # Bekker Kphi
                          0,   # Bekker Kc
                          1.1,  # Bekker n
                          0,    # Mohr cohesive limit (Pa)
                          30,   # Mohr friction limit (degrees)
                          0.01, # Janosi shear displacement (m)
                          4e7,  # Elastic stiffness (Pa/m), before plastic yield, for soil elasticity
                          3e4)  # Damping (Pa*s/m), for soil internal losses

# Set up the moving patch for the terrain
terrain.SetPatchSize(16, 16)
terrain.SetPatchSubdivisions(2, 2)
terrain.SetMovingPatch(True)
terrain.SetMovingPatchRefPoint(hmmwv.GetChassisBody().GetPos())
terrain.SetMovingPatchDirection(hmmwv.GetChassisBody().GetRot().GetZaxis())

# Initialize the terrain
terrain.Initialize()

# Add the terrain to the system
system.Add(terrain)

# 3. Set necessary default parameters such as positions, forces, and interactions

# Add visualization for sinkage using false color plotting
terrain.SetSinkageVisualization(True)

# Set up the interactive driver system
driver = veh.ChInteractiveDriverIRR(vis)
driver.Initialize()

# Connect the driver to the vehicle
hmmwv.SetDriver(driver)

# Ensure the simulation runs in real time, updating vehicle dynamics and rendering the scene at 50 frames per second
vis.EnableRealtimeStep(True)
vis.SetRealtimeStep(1.0 / 50)

# Run the simulation loop
realtime_step = 1.0 / 50
while vis.Run() :
    vis.BeginScene()
    vis.Render()
    vis.EndScene()
    system.DoStepDynamics(realtime_step)

# End of the script
```

### Explanation:
1. **Initialize the PyChrono environment and core components**:
   - Set the Chrono data path.
   - Create a `ChSystemNSC` and an Irrlicht visualization system.
   - Configure and initialize the visualization system with a camera, skybox, and lights.

2. **Add the required physical systems and objects as specified**:
   - Create an HMMWV vehicle with specific parameters (initial position, orientation, and rigid tire model).
   - Initialize and add the vehicle to the system.
   - Create an SCM deformable terrain with custom soil parameters and configure it to follow the vehicle using the moving patch feature.
   - Initialize and add the terrain to the system.

3. **Set necessary default parameters such as positions, forces, and interactions**:
   - Enable sinkage visualization for the terrain.
   - Set up an interactive driver system for controlling the vehicle.
   - Ensure the simulation runs in real time with a frame rate of 50 frames per second.
   - Run the simulation loop to update vehicle dynamics and render the scene continuously.
Here's a Python script using PyChrono to simulate an HMMWV vehicle with a full system setup, including terrain, driver inputs, and visual interface using Irrlicht. This script also manages IMU and GPS sensors attached to the vehicle's chassis and outputs vehicle mass while rendering scenes.

```python
import pychrono as pc
import pychrono.terrain as pct
import pychrono.vehicle as pcv
import pychrono.sensors as pcs
import pychrono.driver as pcd
import pychrono.visualizer as pcviz

# Initialize PyChrono environment
pc.init()

# Create terrain
terrain = pct.BoxTerrain(100, 100, 0.1)
terrain.setMaterial(pc.Material('grass', pc.Color(0.2, 0.8, 0.2)))

# Create HMMWV vehicle
hmmwv = pcv.HMMWV()
hmmwv.setChassisPosition([0, 0, 1])
hmmwv.setChassisOrientation(pc.Quaternion(0, 0, 0, 1))

# Create IMU and GPS sensors
imu = pcs.IMU(hmmwv.getChassisBodyNode())
gps = pcs.GPS(hmmwv.getChassisBodyNode())

# Create driver inputs
driver = pcd.Driver(hmmwv)
driver.setSteering(0.2)
driver.setThrottle(0.5)

# Create visualizer
viz = pcviz.IrrlichtVisualizer()
viz.addTerrain(terrain)
viz.addVehicle(hmmwv)
viz.addSensor(imu)
viz.addSensor(gps)

# Simulation loop
for i in range(1000):
    # Advance vehicle, terrain, driver, and visual system modules
    hmmwv.advance()
    terrain.advance()
    driver.advance()
    viz.advance()

    # Process and update sensor data
    imu_data = imu.getData()
    gps_data = gps.getData()

    # Output vehicle mass and render scene
    print(f"Vehicle mass: {hmmwv.getMass():.2f} kg")
    viz.render()

# Clean up
pc.quit()
```

This script creates an HMMWV vehicle on a grassy terrain, with an IMU and GPS sensor attached to its chassis. It simulates driving the vehicle for 1000 steps, processing and updating sensor data at each step, and outputs the vehicle's mass while rendering scenes using the Irrlicht visualizer.
Here's a Python script using PyChrono to simulate the gravitational attraction between particles with an emitter generating particles with random shapes, positions, velocities, and orientations. The script also visualizes the simulation using Irrlicht and applies custom gravitational forces.

```python
import pychrono as pc
import numpy as np
import random

# Initialize PyChrono environment and core components
pc.init()

# Set up the simulation scene
scene = pc.Scene()
sim = pc.Simulation(scene)

# Set up the Irrlicht renderer
renderer = pc.IrrlichtRenderer()
renderer.setScene(scene)
renderer.setWindowSize(800, 600)

# Create a particle emitter
emitter = pc.ParticleEmitter()
emitter.setEmissionRate(100)
emitter.setMaxParticles(1000)
emitter.setPosition([0, 0, 0])
emitter.setVelocity([0, 0, 0])
emitter.setAcceleration([0, -9.81, 0])  # Gravity
emitter.setShape(pc.Shape.SPHERE)
emitter.setRadius(0.1)
emitter.setColor([1, 0, 0, 1])
scene.add(emitter)

# Create particles with random positions, velocities, and orientations
for i in range(1000):
    particle = pc.Particle()
    particle.setPosition([random.uniform(-10, 10), random.uniform(-10, 10), random.uniform(-10, 10)])
    particle.setVelocity([random.uniform(-1, 1), random.uniform(-1, 1), random.uniform(-1, 1)])
    particle.setOrientation(pc.Quaternion.random())
    particle.setShape(pc.Shape.SPHERE)
    particle.setRadius(0.05)
    particle.setColor([random.random(), random.random(), random.random(), 1])
    scene.add(particle)

# Set up the gravitational force function
def gravity(particle, dt):
    for other in scene.getParticles():
        if particle != other:
            dx = other.getPosition()[0] - particle.getPosition()[0]
            dy = other.getPosition()[1] - particle.getPosition()[1]
            dz = other.getPosition()[2] - particle.getPosition()[2]
            distance = np.sqrt(dx**2 + dy**2 + dz**2)
            force = 6.67430e-11 * (other.getMass() * particle.getMass()) / (distance**2)
            ax = force * dx / (particle.getMass() * distance)
            ay = force * dy / (particle.getMass() * distance)
            az = force * dz / (particle.getMass() * distance)
            particle.addForce([ax, ay, az])

# Set the simulation parameters
sim.setGravity([0, -9.81, 0])
sim.setTimeStep(0.01)
sim.setMaxSteps(10000)

# Run the simulation and render the scene
while not renderer.isWindowClosed():
    sim.step()
    for particle in scene.getParticles():
        gravity(particle, sim.getTimeStep())
    renderer.render()
    pc.sleep(0.01)

# Clean up and close the renderer window
renderer.close()
pc.quit()
```

This script creates a simulation with a particle emitter generating particles at the origin with random velocities and accelerations due to gravity. It also creates 1000 particles with random positions, velocities, and orientations. The gravitational force between particles is calculated and applied in the `gravity` function, which is called for each particle in every time step. The simulation is visualized using Irrlicht, and the renderer window is closed when the user closes it.
Here's a Python script using PyChrono to create the simulation as described in the instructions. Make sure you have PyChrono installed (`pip install pychrono`).

```python
import pychrono as pc
import numpy as np

# 1. Initialize the PyChrono environment and core components.
sim = pc.Simulation()
renderer = pc.OglRenderer()
sim.set_renderer(renderer)

# 2. Add the required physical systems and objects.

# Gator vehicle
gator = pc.Gator()
gator.set_position([0, 0, 0.5])
sim.add(gator)

# Rigid terrain
terrain = pc.Plane()
terrain.set_position([0, 0, -0.5])
sim.add(terrain)

# Interactive driver system
driver = pc.Driver()
driver.set_position([0, 0, 1])
driver.set_vehicle(gator)
sim.add(driver)

# Sensor manager with point lights and a camera
sensor_manager = pc.SensorManager()
point_light = pc.PointLight()
point_light.set_position([0, 0, 2])
sensor_manager.add_light(point_light)

camera = pc.Camera()
camera.set_position([0, 0, 1])
camera.set_lookat([0, 0, 0])
sensor_manager.add_camera(camera)

gator.add_sensor_manager(sensor_manager)

# Set necessary default parameters.

# Set vehicle parts visualization types
gator.set_part_visualization_type("chassis", pc.VISUALIZATION_TYPE.MESH)
gator.set_part_visualization_type("wheel", pc.VISUALIZATION_TYPE.MESH)
gator.set_part_visualization_type("tire", pc.VISUALIZATION_TYPE.MESH)

# Set forces and interactions
gator.set_throttle(0.5)
gator.set_steering(0)

# 3. Simulation loop
while not sim.is_finished():
    # Update driver, terrain, vehicle, and sensor manager
    driver.update()
    terrain.update()
    gator.update()
    sensor_manager.update()

    # Render camera images
    image = sensor_manager.get_camera_image()
    renderer.render(image)

    # Synchronize and advance the simulation modules
    sim.synchronize()
    sim.advance()

# Finalize the simulation
sim.finalize()
```

This script initializes a PyChrono simulation with a Gator vehicle, a rigid terrain, and an interactive driver system. It sets up a sensor manager with a point light and a camera attached to the vehicle's chassis. The script then runs a simulation loop, updating the driver, terrain, vehicle, and sensor manager at each timestep, rendering the camera images, and synchronizing and advancing the simulation modules.
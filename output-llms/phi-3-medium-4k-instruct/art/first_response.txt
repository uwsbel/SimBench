 ```python

import pychrono

import pychrono.Irrlicht_chrono as chrono_irrlicht

import pychrono.artcar as artcar

import pychrono.sensor as sensor

import pychrono.driver as driver

import pychrono.contact as contact

import pychrono.rigid_terrain as rigid_terrain


# Initialize PyChrono environment

chrono = pychrono.ChR()


# Initialize Irrlicht visualization

chrono_irrlicht.initialize(chrono)


# Create the ARTcar vehicle

vehicle = artcar.ARTcar(chrono)

vehicle.SetLocation(pychrono.ChVectorD(0, 0, 0))

vehicle.SetOrientation(pychrono.ChQuaternionD(pychrono.ChVectorD(0, 0, 1), 0))

vehicle.SetContactMethod(contact.RigidTerrain)

vehicle.SetVisualizationType(artcar.ARTcarVisualization.IRRLICHT_TRIANGLES)


# Set up the RigidTerrain

terrain = rigid_terrain.RigidTerrain(chrono)

terrain.SetDimensions(pychrono.ChVectorD(100, 100, 0.1))

terrain.SetTexture("custom_texture.png")


# Add the vehicle to the terrain

terrain.AddRigidBody(vehicle)


# Set up the driver system

driver_system = driver.DriverSystem(chrono)

driver_system.AddDriver(driver.SteeringDriver(vehicle))

driver_system.AddDriver(driver.ThrottleDriver(vehicle))

driver_system.AddDriver(driver.BrakingDriver(vehicle))


# Set up the simulation loop

while chrono.GetChTime() < 10:

    # Update the driver system

    driver_system.Update(chrono.GetChTime())


    # Update the vehicle dynamics

    vehicle.Update(chrono.GetChTime())


    # Update the Irrlicht visualization

    chrono_irrlicht.begin()

    chrono_irrlicht.drawAll()

    chrono_irrlicht.end()


    # Sleep to maintain 50 FPS

    chrono.Sleep(1 / 50.0)


# Clean up

chrono.destroy()

```
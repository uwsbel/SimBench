[
    {
        "instruction": "\n    \n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions and a given PyChrono script, which may contain errors. Your task has two parts: identify the potential errors in the script and correct them if exist, also follow the instructions to modify the script to meet the requirements.\n\nHere is the PyChrono code you need to modify:\n\u201c\u201d\"\nimport os\nimport math\nimport numpy as np\nimport pychrono as chrono\nimport pychrono.robot as viper\nfrom pychrono import irrlicht as chronoirr\n\n# Create Chrono system\nsystem = chrono.ChSystemNSC()\nsystem.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nsystem.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  # Set gravity in the negative Z direction\nchrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.0025)\nchrono.ChCollisionModel.SetDefaultSuggestedMargin(0.0025)\n\n# Create ground body\nground_mat = chrono.ChContactMaterialNSC()\nground = chrono.ChBodyEasyBox(20, 20, 1, 1000, True, True, ground_mat)\nground.SetPos(chrono.ChVector3d(0, 0, -1))  # Position the ground slightly below the origin\nground.SetFixed(True)  # Fix the ground in place\n# Set ground texture for visualization\nground.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile(\"textures/concrete.jpg\"))\nsystem.Add(ground)\n\n# Create Viper rover\nrover = viper.Viper(system)  # Instantiate the Viper rover\ndriver = viper.ViperDCMotorControl()  # Create a driver for the rover\nrover.SetDriver(driver)  # Assign the driver to the rover\n\n# Initialize rover position and orientation\ninit_pos = chrono.ChVector3d(0, 0.2, 0)\ninit_rot = chrono.ChQuaterniond(1, 0, 0, 0)\nrover.Initialize(chrono.ChFramed(init_pos, init_rot))\n\n# Create run-time visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(system)\nvis.SetCameraVertical(chrono.CameraVerticalDir_Z)\nvis.SetWindowSize(1280, 720)\nvis.SetWindowTitle('Viper rover - Rigid terrain')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 2.5, 1.5), chrono.ChVector3d(0, 0, 1))\nvis.AddTypicalLights()\nvis.AddLightWithShadow(chrono.ChVector3d(1.5, -2.5, 5.5), chrono.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)\n\n# Enable shadows (commented out to improve performance)\n# vis.EnableShadows()\n\n# Set the simulation time step\ntime_step = 1e-3\n\n# Simulation loop\ntime = 0\nwhile vis.Run():\n    time += time_step  # Increment the simulation time\n    steering = 0\n    max_steering = math.pi / 6  # Maximum steering angle\n    \n    # Define the steering behavior over time\n    if 2 < time < 7:\n        steering = max_steering * (time - 2) / 5  # Gradually increase steering\n    elif 7 < time < 12:\n        steering = max_steering * (12 - time) / 5  # Gradually decrease steering\n    \n    driver.SetSteering(steering)  # Set the steering for the rover\n\n    rover.Update()  # Update the rover's state\n\n    # Render the scene\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    \n    # Advance the simulation by one time step\n    system.DoStepDynamics(time_step)\n\n\u201c\u201d\"\n\nPlease modify the given code based on the following instructions:\n\u201c\u201d\"\n1. Import statement added for pychrono.vehicle as veh.\n\n2. Ground body creation replaced with SCM deformable terrain:\n   - Removed ground body creation code.\n   - Added code to create SCM deformable terrain with parameters for plane, length, width, mesh resolution, and soil parameters.\n\n3. Removed steering behavior over time:\n   - Removed the code defining steering behavior over time and set steering to a constant value of 0.0.\n\u201c\u201d\"\n\nTo complete the task, follow these steps:\n\nReview the given PyChrono script and identify any errors, including syntax errors, logical errors, incorrect method names, and parameter issues.\nCorrect the identified errors in the script to ensure it runs correctly.\nModify the script based on the provided instructions to ensure it meets the specified requirements.\n\nProvide the corrected and modified script below:\n    ",
        "input": "",
        "output": "```python\nimport os\nimport math\nimport numpy as np\nimport pychrono as chrono\nimport pychrono.robot as viper\nfrom pychrono import irrlicht as chronoirr\nimport pychrono.vehicle as veh\n\n# Create Chrono system\nsystem = chrono.ChSystemNSC()\nsystem.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nsystem.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  \nchrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.0025)\nchrono.ChCollisionModel.SetDefaultSuggestedMargin(0.0025)\n\n# Create SCM deformable terrain\nterrain = veh.SCMDeformableTerrain(system)\nterrain.SetPlane(chrono.ChPlane(chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(0, 0, 1)))\nterrain.SetLength(20)\nterrain.SetWidth(20)\nterrain.SetMeshResolution(100)\nterrain.SetSoilParameters(\n    veh.SCMDeformableTerrain.SoilParameters(\n        friction=0.5,\n        restitution=0.2,\n        young_modulus=1e7,\n        poisson_ratio=0.3,\n        density=1500,\n        yield_stress=1e5,\n        plastic_strain_limit=0.1,\n    )\n)\n\n# Create Viper rover\nrover = viper.Viper(system)\ndriver = viper.ViperDCMotorControl()\nrover.SetDriver(driver)\n\n# Initialize rover position and orientation\ninit_pos = chrono.ChVector3d(0, 0.2, 0)\ninit_rot = chrono.ChQuaterniond(1, 0, 0, 0)\nrover.Initialize(chrono.ChFramed(init_pos, init_rot))\n\n# Create run-time visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(system)\nvis.SetCameraVertical(chrono.CameraVerticalDir_Z)\nvis.SetWindowSize(1280, 720)\nvis.SetWindowTitle('Viper rover - Deformable terrain')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 2.5, 1.5), chrono.ChVector3d(0, 0, 1))\nvis.AddTypicalLights()\nvis.AddLightWithShadow(chrono.ChVector3d(1.5, -2.5, 5.5), chrono.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)\n\n# Enable shadows (commented out to improve performance)\n# vis.EnableShadows()\n\n# Set the simulation time step\ntime_step = 1e-3\n\n# Simulation loop\ntime = 0\nwhile vis.Run():\n    time += time_step\n    steering = 0.0  # Set steering to a constant value\n\n    driver.SetSteering(steering)\n\n    rover.Update()\n\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n\n    system.DoStepDynamics(time_step)\n```\n\n**Changes Made:**\n\n1. **Import Statement:** Added `import pychrono.vehicle as veh`.\n2. **Ground Body Removal:** Removed the code for creating the ground body.\n3. **SCM Deformable Terrain:** Added code to create an SCM deformable terrain using `veh.SCMDeformableTerrain`.\n   - Set the plane, length, width, mesh resolution, and soil parameters.\n4. **Steering Behavior Removal:** Removed the code defining the steering behavior over time and set `steering` to a constant value of `0.0`.",
        "system": "You are a PyChrono expert tasked with generating a simulation script based on the following instructions.",
        "history": [
            [
                "\n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions. Make sure to:\n    1. Initialize the PyChrono environment and core components.\n    2. Add the required physical systems and objects as specified.\n    3. Set necessary default parameters such as positions, forces, and interactions.\n\n    Instructions:\n    \u201c\u201d\"\n    Create a PyChrono simulation with a Viper rover on a rigid terrain. Set up the Chrono system with gravity and ground body, then initialize the Viper rover and its driver. Create a real-time visualization using Irrlicht with camera settings and lighting. Implement a simulation loop where the rover's steering gradually changes over a specified time period, updating and rendering the rover at each timestep.\n    \u201c\u201d\"\n    ",
                "```python\nimport pychrono as chrono\nimport pychrono.irrlicht as chronoirr\nimport math\n\n# ---------------------------------------------------------------------\n#\n#  Create the simulation system and add items\n#\n# ---------------------------------------------------------------------\n\n# Create the physical system\nsystem = chrono.ChSystemNSC()\n\n# Set gravitational acceleration\nsystem.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))\n\n# Create the ground body\nground = chrono.ChBodyEasyBox(100, 1, 100, 1000, True, True)\nground.SetPos(chrono.ChVectorD(0, -0.5, 0))\nground.SetBodyFixed(True)\nsystem.Add(ground)\n\n# ---------------------------------------------------------------------\n#\n#  Create the Viper rover\n#\n# ---------------------------------------------------------------------\n\n# Load the Viper rover model (replace with your actual file path)\nrover = chrono.ChWheeledVehicle(\"viper_rover.obj\")\n\n# Set initial position and orientation\nrover.SetPos(chrono.ChVectorD(0, 1, 0))\nrover.SetRot(chrono.Q_from_AngAxis(0, chrono.ChVectorD(0, 0, 1)))\n\n# Add the rover to the system\nsystem.Add(rover)\n\n# ---------------------------------------------------------------------\n#\n#  Create the driver (optional)\n#\n# ---------------------------------------------------------------------\n\n# You can add a driver model here if needed, controlling the rover's\n# steering and other functions.\n\n# ---------------------------------------------------------------------\n#\n#  Set up visualization\n#\n# ---------------------------------------------------------------------\n\n# Create the Irrlicht visualization system\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(system)\nvis.SetWindowSize(800, 600)\nvis.SetWindowTitle(\"Viper Rover Simulation\")\n\n# Set camera position and lighting\ncamera = vis.GetCamera()\ncamera.SetLocation(chrono.ChVectorD(5, 5, 3))\ncamera.SetLookAt(chrono.ChVectorD(0, 1, 0))\nvis.AddLight(chrono.ChLightPoint(chrono.ChVectorD(5, 5, 5)))\n\n# ---------------------------------------------------------------------\n#\n#  Simulation loop\n#\n# ---------------------------------------------------------------------\n\n# Simulation parameters\ntimestep = 0.01\nsimulation_time = 10\n\n# Steering control parameters\ninitial_steering = 0\nfinal_steering = math.pi / 4  # 45 degrees\nsteering_change_time = 5\n\n# Main simulation loop\nfor i in range(int(simulation_time / timestep)):\n    time = i * timestep\n\n    # Gradually change steering angle\n    if time <= steering_change_time:\n        steering_angle = initial_steering + (final_steering - initial_steering) * time / steering_change_time\n    else:\n        steering_angle = final_steering\n\n    # Apply steering to the rover (replace with your actual steering control logic)\n    rover.SetSteeringAngle(steering_angle)\n\n    # Advance the simulation\n    system.DoStepDynamics(timestep)\n\n    # Render the scene\n    vis.Render()\n\n# Quit the visualization\nvis.GetDevice().close()\n```\n\n**Explanation:**\n\n1. **Initialization:**\n   - Imports necessary PyChrono and Irrlicht modules.\n   - Creates a `ChSystemNSC` object to represent the physical system.\n   - Sets gravitational acceleration.\n   - Creates a ground body as a fixed box.\n\n2. **Viper Rover:**\n   - Loads the Viper rover model (replace `\"viper_rover.obj\"` with your actual file).\n   - Sets initial position and orientation.\n   - Adds the rover to the system.\n\n3. **Driver (Optional):**\n   - You can add code here to create and control a driver model if needed.\n\n4. **Visualization:**\n   - Creates a `ChVisualSystemIrrlicht` object for real-time visualization.\n   - Attaches the system to the visualizer.\n   - Sets window size and title.\n   - Configures camera position and lighting.\n\n5. **Simulation Loop:**\n   - Sets simulation parameters like timestep and duration.\n   - Defines steering control parameters (initial angle, final angle, change time).\n   - Iterates through the simulation steps:\n     - Calculates the current steering angle based on time.\n     - Applies the steering angle to the rover (you'll need to implement the actual steering control logic based on your rover's design).\n     - Advances the simulation using `system.DoStepDynamics()`.\n     - Renders the scene using `vis.Render()`.\n\n6. **Cleanup:**\n   - Closes the Irrlicht visualization window.\n\n**Remember:**\n\n- Replace `\"viper_rover.obj\"` with the actual path to your Viper rover model file.\n- Implement the specific steering control logic for your rover in the `rover.SetSteeringAngle()` part.\n- Adjust simulation parameters (timestep, duration, steering angles) as needed."
            ],
            [
                "\n    \n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions and a given PyChrono script, which may contain errors. Your task has two parts: identify the potential errors in the script and correct them if exist, also follow the instructions to modify the script to meet the requirements.\n\nHere is the PyChrono code you need to modify:\n\u201c\u201d\"\nimport os\nimport math\nimport numpy as np\nimport pychrono as chrono\nimport pychrono.robot as viper\nfrom pychrono import irrlicht as chronoirr\n\n# Create Chrono system\nsystem = chrono.ChSystemNSC()\nsystem.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nsystem.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  # Set gravity in the negative Z direction\nchrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.0025)\nchrono.ChCollisionModel.SetDefaultSuggestedMargin(0.0025)\n\n# Create ground body\nground_mat = chrono.ChContactMaterialNSC()\nground = chrono.ChBodyEasyBox(20, 20, 1, 1000, True, True, ground_mat)\nground.SetPos(chrono.ChVector3d(0, 0, -1))  # Position the ground slightly below the origin\nground.SetFixed(True)  # Fix the ground in place\n# Set ground texture for visualization\nground.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile(\"textures/concrete.jpg\"))\nsystem.Add(ground)\n\n# Create Viper rover\nrover = viper.Viper(system)  # Instantiate the Viper rover\ndriver = viper.ViperDCMotorControl()  # Create a driver for the rover\nrover.SetDriver(driver)  # Assign the driver to the rover\n\n# Initialize rover position and orientation\ninit_pos = chrono.ChVector3d(0, 0.2, 0)\ninit_rot = chrono.ChQuaterniond(1, 0, 0, 0)\nrover.Initialize(chrono.ChFramed(init_pos, init_rot))\n\n# Create run-time visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(system)\nvis.SetCameraVertical(chrono.CameraVerticalDir_Z)\nvis.SetWindowSize(1280, 720)\nvis.SetWindowTitle('Viper rover - Rigid terrain')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 2.5, 1.5), chrono.ChVector3d(0, 0, 1))\nvis.AddTypicalLights()\nvis.AddLightWithShadow(chrono.ChVector3d(1.5, -2.5, 5.5), chrono.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)\n\n# Enable shadows (commented out to improve performance)\n# vis.EnableShadows()\n\n# Set the simulation time step\ntime_step = 1e-3\n\n# Simulation loop\ntime = 0\nwhile vis.Run():\n    time += time_step  # Increment the simulation time\n    steering = 0\n    max_steering = math.pi / 6  # Maximum steering angle\n    \n    # Define the steering behavior over time\n    if 2 < time < 7:\n        steering = max_steering * (time - 2) / 5  # Gradually increase steering\n    elif 7 < time < 12:\n        steering = max_steering * (12 - time) / 5  # Gradually decrease steering\n    \n    driver.SetSteering(steering)  # Set the steering for the rover\n\n    rover.Update()  # Update the rover's state\n\n    # Render the scene\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    \n    # Advance the simulation by one time step\n    system.DoStepDynamics(time_step)\n\n\u201c\u201d\"\n\nPlease modify the given code based on the following instructions:\n\u201c\u201d\"\nChanges observed between the original and new code:\n\n1. Import statement added for `pychrono.sensor` as `sens`.\n\n2. Creation of a sensor manager:\n   - Added the following lines to create a sensor manager and add a point light to the scene:\n     ```\n     manager = sens.ChSensorManager(system)\n     intensity = 1.0\n     manager.scene.AddPointLight(chrono.ChVector3f(2, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n     ```\n\n3. Creation of a camera sensor:\n   - Added the following lines to create a camera sensor, set its properties, and add it to the sensor manager:\n     ```\n     offset_pose = chrono.ChFramed(chrono.ChVector3d(1.0, 0, 1.45), chrono.QuatFromAngleAxis(.2, chrono.ChVector3d(0, 1, 0)))\n     cam = sens.ChCameraSensor(\n         rover.GetChassis().GetBody(),\n         15, # update rate\n         offset_pose,\n         720, # image width\n         480, # image height\n         1.408 # field of view\n     )\n     cam.SetName(\"Third Person POV\")\n     cam.PushFilter(sens.ChFilterVisualize(720, 480, \"Viper Front Camera\"))\n     manager.AddSensor(cam)\n     ```\n\n4. Addition of variables for simulation step and render step size:\n   - Added the following lines to define `step_number`, `render_step_size`, and `render_steps`:\n     ```\n     step_number = 0\n     render_step_size = 1.0 / 25  # FPS = 25\n     render_steps = math.ceil(render_step_size / time_step)\n     ```\n\n5. Modification of the simulation loop to update the sensor manager and render the scene at specific intervals:\n   - Added `manager.Update()` inside the simulation loop.\n   - Modified the rendering part to only render the scene at specific intervals:\n     ```\n     if (step_number % render_steps == 0):\n         vis.BeginScene()\n         vis.Render()\n         vis.EndScene()\n     step_number += 1\n     ```\n\n\u201c\u201d\"\n\nTo complete the task, follow these steps:\n\nReview the given PyChrono script and identify any errors, including syntax errors, logical errors, incorrect method names, and parameter issues.\nCorrect the identified errors in the script to ensure it runs correctly.\nModify the script based on the provided instructions to ensure it meets the specified requirements.\n\nProvide the corrected and modified script below:\n    ",
                "```python\nimport os\nimport math\nimport numpy as np\nimport pychrono as chrono\nimport pychrono.robot as viper\nfrom pychrono import irrlicht as chronoirr\nimport pychrono.sensor as sens  # Import sensor module\n\n# Create Chrono system\nsystem = chrono.ChSystemNSC()\nsystem.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nsystem.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  # Set gravity in the negative Z direction\nchrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.0025)\nchrono.ChCollisionModel.SetDefaultSuggestedMargin(0.0025)\n\n# Create ground body\nground_mat = chrono.ChContactMaterialNSC()\nground = chrono.ChBodyEasyBox(20, 20, 1, 1000, True, True, ground_mat)\nground.SetPos(chrono.ChVector3d(0, 0, -1))  # Position the ground slightly below the origin\nground.SetFixed(True)  # Fix the ground in place\n# Set ground texture for visualization\nground.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile(\"textures/concrete.jpg\"))\nsystem.Add(ground)\n\n# Create Viper rover\nrover = viper.Viper(system)  # Instantiate the Viper rover\ndriver = viper.ViperDCMotorControl()  # Create a driver for the rover\nrover.SetDriver(driver)  # Assign the driver to the rover\n\n# Initialize rover position and orientation\ninit_pos = chrono.ChVector3d(0, 0.2, 0)\ninit_rot = chrono.ChQuaterniond(1, 0, 0, 0)\nrover.Initialize(chrono.ChFramed(init_pos, init_rot))\n\n# Create run-time visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(system)\nvis.SetCameraVertical(chrono.CameraVerticalDir_Z)\nvis.SetWindowSize(1280, 720)\nvis.SetWindowTitle('Viper rover - Rigid terrain')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 2.5, 1.5), chrono.ChVector3d(0, 0, 1))\nvis.AddTypicalLights()\nvis.AddLightWithShadow(chrono.ChVector3d(1.5, -2.5, 5.5), chrono.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)\n\n# Enable shadows (commented out to improve performance)\n# vis.EnableShadows()\n\n# Create sensor manager\nmanager = sens.ChSensorManager(system)\nintensity = 1.0\nmanager.scene.AddPointLight(chrono.ChVector3f(2, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n\n# Create camera sensor\noffset_pose = chrono.ChFramed(chrono.ChVector3d(1.0, 0, 1.45), chrono.QuatFromAngleAxis(.2, chrono.ChVector3d(0, 1, 0)))\ncam = sens.ChCameraSensor(\n    rover.GetChassis().GetBody(),\n    15, # update rate\n    offset_pose,\n    720, # image width\n    480, # image height\n    1.408 # field of view\n)\ncam.SetName(\"Third Person POV\")\ncam.PushFilter(sens.ChFilterVisualize(720, 480, \"Viper Front Camera\"))\nmanager.AddSensor(cam)\n\n# Set the simulation time step\ntime_step = 1e-3\n\n# Simulation loop variables\nstep_number = 0\nrender_step_size = 1.0 / 25  # FPS = 25\nrender_steps = math.ceil(render_step_size / time_step)\n\ntime = 0\nwhile vis.Run():\n    time += time_step  # Increment the simulation time\n    steering = 0\n    max_steering = math.pi / 6  # Maximum steering angle\n    \n    # Define the steering behavior over time\n    if 2 < time < 7:\n        steering = max_steering * (time - 2) / 5  # Gradually increase steering\n    elif 7 < time < 12:\n        steering = max_steering * (12 - time) / 5  # Gradually decrease steering\n    \n    driver.SetSteering(steering)  # Set the steering for the rover\n\n    rover.Update()  # Update the rover's state\n\n    # Update sensor manager\n    manager.Update()\n\n    # Render the scene at specific intervals\n    if (step_number % render_steps == 0):\n        vis.BeginScene()\n        vis.Render()\n        vis.EndScene()\n    step_number += 1\n    \n    # Advance the simulation by one time step\n    system.DoStepDynamics(time_step)\n\n```\n\n**Changes Made:**\n\n1. **Import `pychrono.sensor`:** Added the import statement `import pychrono.sensor as sens`.\n2. **Sensor Manager and Point Light:** Created a `sens.ChSensorManager` and added a point light to the scene.\n3. **Camera Sensor:** Created a `sens.ChCameraSensor` attached to the rover's chassis, configured its properties, and added it to the sensor manager.\n4. **Simulation Loop Modifications:**\n   - Added `manager.Update()` inside the loop to update the sensor manager.\n   - Modified the rendering part to only render the scene at specific intervals determined by `render_step_size` and `render_steps`.\n\nNow the script should correctly simulate the Viper rover, control its steering, and capture images from the camera sensor at a specified frame rate."
            ]
        ]
    }
]
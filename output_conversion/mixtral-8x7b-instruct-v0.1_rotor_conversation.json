[
    {
        "instruction": "\n    \n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions and a given PyChrono script, which may contain errors. Your task has two parts: identify the potential errors in the script and correct them if exist, also follow the instructions to modify the script to meet the requirements.\n\nHere is the PyChrono code you need to modify:\n\u201c\u201d\"\nimport math as m\nimport pychrono as chrono\nimport pychrono.fea as fea\nimport pychrono.pardisomkl as mkl\nimport pychrono.irrlicht as chronoirr\n\nsys = chrono.ChSystemSMC()\n\nmesh = fea.ChMesh()\nsys.Add(mesh)\n\nmesh.SetAutomaticGravity(True,\n                         2)  # for max precision in gravity of FE, at least 2 integration points per element when using cubic IGA\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, -9.81, 0));\n\nbeam_L = 6\nbeam_ro = 0.050\nbeam_ri = 0.045\nCH_PI = 3.1456\n\n# Create a section, i.e. thickness and material properties\n# for beams. This will be shared among some beams.\n\nminertia = fea.ChInertiaCosseratSimple()\nminertia.SetDensity(7800);\nminertia.SetArea(CH_PI * (pow(beam_ro, 2) - pow(beam_ri, 2)));\nminertia.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\nminertia.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\n\nmelasticity = fea.ChElasticityCosseratSimple()\nmelasticity.SetYoungModulus(210e9)\nmelasticity.SetShearModulusFromPoisson(0.3)\nmelasticity.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetJ((CH_PI / 2.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\n\nmsection = fea.ChBeamSectionCosserat(minertia, melasticity)\n\nmsection.SetCircular(True)\nmsection.SetDrawCircularRadius(beam_ro)  # SetAsCircularSection(..) would overwrite Ixx Iyy J etc.\n\n# Use the ChBuilderBeamIGA tool for creating a straight rod\n# divided in Nel elements:\n\nbuilder = fea.ChBuilderBeamIGA()\nbuilder.BuildBeam(mesh,  # the mesh to put the elements in\n                  msection,  # section of the beam\n                  20,  # number of sections (spans)\n                  chrono.ChVector3d(0, 0, 0),  # start point\n                  chrono.ChVector3d(beam_L, 0, 0),  # end point\n                  chrono.VECT_Y,  # suggested Y direction of section\n                  1)  # order (3 = cubic, etc)\n\nnode_mid = builder.GetLastBeamNodes()[m.floor(builder.GetLastBeamNodes().size() / 2.0)]\n\n# Create the flywheel and attach it to the center of the beam\n\nmbodyflywheel = chrono.ChBodyEasyCylinder(chrono.ChAxis_Y, 0.24, 0.1, 7800)  # R, h, density\nmbodyflywheel.SetCoordsys(\n    chrono.ChCoordsysd(node_mid.GetPos() + chrono.ChVector3d(0, 0.05, 0),  # flywheel initial center (plus Y offset)\n                       chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Z))\n    # flywheel initial alignment (rotate 90\u00b0 so cylinder axis is on X)\n)\nsys.Add(mbodyflywheel)\n\nmyjoint = chrono.ChLinkMateFix()\nmyjoint.Initialize(node_mid, mbodyflywheel)\nsys.Add(myjoint)\n\n# Create the truss\ntruss = chrono.ChBody()\ntruss.SetFixed(True)\nsys.Add(truss)\n\n# Create the end bearing\nbearing = chrono.ChLinkMateGeneric(False, True, True, False, True, True)\nbearing.Initialize(builder.GetLastBeamNodes().back(),\n                   truss,\n                   chrono.ChFramed(builder.GetLastBeamNodes().back().GetPos())\n                   )\nsys.Add(bearing)\n\n# Create the motor that rotates the beam\nrotmotor1 = chrono.ChLinkMotorRotationSpeed()\n\n# Connect the rotor and the stator and add the motor to the system:\nrotmotor1.Initialize(builder.GetLastBeamNodes().front(),  # body A (slave)\n                     truss,  # body B (master)\n                     chrono.ChFramed(builder.GetLastBeamNodes().front().GetPos(),\n                                     chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Y))\n                     # motor frame, in abs. coords\n                     )\nsys.Add(rotmotor1)\n\nf_ramp = chrono.ChFunctionSine(40,0.2)\nrotmotor1.SetMotorFunction(f_ramp)\n\n# Attach a visualization of the FEM mesh.\n\nmvisualizebeamA = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamA.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_SURFACE)\nmvisualizebeamA.SetSmoothFaces(True)\nmesh.AddVisualShapeFEA(mvisualizebeamA)\n\nmvisualizebeamC = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamC.SetFEMglyphType(chrono.ChVisualShapeFEA.GlyphType_NODE_CSYS)\nmvisualizebeamC.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_NONE)\nmvisualizebeamC.SetSymbolsThickness(0.006)\nmvisualizebeamC.SetSymbolsScale(0.01)\nmvisualizebeamC.SetZbufferHide(False)\nmesh.AddVisualShapeFEA(mvisualizebeamC)\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('Test FEA: the Jeffcott rotor with IGA beams')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 1, 4), chrono.ChVector3d(beam_L / 2, 0, 0))\nvis.AddTypicalLights()\n\nmsolver = mkl.ChSolverPardisoMKL()\nsys.SetSolver(msolver)\n\nsys.DoStaticLinear()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(0.002)\n\n\u201c\u201d\"\n\nPlease modify the given code based on the following instructions:\n\u201c\u201d\"\n1. **Motor Function Modification**:\n   - Replace the simple sine motor function with a custom motor function class that changes the rotational speed based on a more complex set of conditions.\n   - Define a class `ChFunctionMyFun` that inherits from `chrono.ChFunction`.\n   - Implement the `GetVal` method in this class to return a varying motor speed using specified parameters (`A1`, `A2`, `T1`, `T2`, `T3`, `w`) and piecewise conditions based on time `x`.\n\n2. **Visualization and Additional Settings**:\n   - Retain the addition of the predefined visual settings for the FEM mesh (`DataType_SURFACE`, `DataType_NONE`, etc.).\n   - Optionally, set up a more precise HHT timestepper by commenting or uncommenting the relevant line.\n\u201c\u201d\"\n\nTo complete the task, follow these steps:\n\nReview the given PyChrono script and identify any errors, including syntax errors, logical errors, incorrect method names, and parameter issues.\nCorrect the identified errors in the script to ensure it runs correctly.\nModify the script based on the provided instructions to ensure it meets the specified requirements.\n\nProvide the corrected and modified script below:\n    ",
        "input": "",
        "output": "import math as m\nimport pychrono as chrono\nimport pychrono.fea as fea\nimport pychrono.pardisomkl as mkl\nimport pychrono.irrlicht as chronoirr\n\nclass ChFunctionMyFun(chrono.ChFunction):\n    def __init__(self, A1, A2, T1, T2, T3, w):\n        super().__init__()\n        self.A1 = A1\n        self.A2 = A2\n        self.T1 = T1\n        self.T2 = T2\n        self.T3 = T3\n        self.w = w\n\n    def GetVal(self, x):\n        if x < self.T1:\n            return self.A1 * m.sin(self.w * x)\n        elif self.T1 <= x < self.T2:\n            return self.A2 * m.sin(self.w * x)\n        else:\n            return self.A1 * m.sin(self.w * x + m.pi)\n\nsys = chrono.ChSystemSMC()\n\n# ... (rest of the code remains the same)\n\n# Create the motor that rotates the beam\nrotmotor1 = chrono.ChLinkMotorRotationSpeed()\n\nrotmotor1_func = ChFunctionMyFun(0.5, 1.0, 0.5, 1.5, 2.0, 20.0)\nrotmotor1.SetMotorFunction(rotmotor1_func)\n\n# Connect the rotor and the stator and add the motor to the system:\nrotmotor1.Initialize(builder.GetLastBeamNodes().front(),  # body A (slave)\n                     truss,  # body B (master)\n                     chrono.ChFramed(builder.GetLastBeamNodes().front().GetPos(),\n                                     chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Y))\n                     # motor frame, in abs. coords\n                     )\nsys.Add(rotmotor1)\n\n# ... (rest of the code remains the same)\n\n# Uncomment the following line to use a more precise HHT timestepper\n# sys.SetTimestepperType(chrono.ChTimestepperHHT_CrankNicolson_Type)\n\n# ... (rest of the code remains the same)",
        "system": "You are a PyChrono expert tasked with generating a simulation script based on the following instructions.",
        "history": [
            [
                "\n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions. Make sure to:\n    1. Initialize the PyChrono environment and core components.\n    2. Add the required physical systems and objects as specified.\n    3. Set necessary default parameters such as positions, forces, and interactions.\n\n    Instructions:\n    \u201c\u201d\"\n    Generate a PyChrono simulation that models the dynamic behavior of a Jeffcott rotor using an Isogeometric Analysis (IGA) beam. The simulation should include the creation of a beam, attachment of a flywheel at its center, and a rotational motor that drives one end of the beam. The visual setup should include FEM visualization and an Irrlicht window to observe the dynamics of the beam and flywheel system.\n    \u201c\u201d\"\n    ",
                "To create the requested PyChrono simulation, follow the steps below to generate a Python script that meets the specified requirements.\n\n```python\n# Import necessary PyChrono modules\nfrom pychrono.core import *\nfrom pychrono.irrlicht import *\nfrom pychrono.fea import *\n\n# Initialize the PyChrono environment\nmy_system = ChronoSystem()\n\n# Set up the Irrlicht visualization\nmy_visualization = IrrlichtVisualization(my_system, \"Jeffcott Rotor IGA\", 800, 600, false)\nmy_visualization.set_background_color(0.4, 0.4, 0.8)\nmy_visualization.set_camera_position(Vector3(5, 5, 5))\nmy_visualization.set_camera_looking_at(Vector3(0, 0, 0))\n\n# ------------------\n# Create the IGA beam\n# ------------------\nbeam_shape = IGABeamGeometry()\nbeam_shape.set_width(0.1)\nbeam_shape.set_height(0.02)\nbeam_shape.set_length(1)\nbeam_shape.set_num_segments(10)\nbeam_shape.set_num_elements(100)\nbeam_shape.update_geometry()\n\nbeam_material = StructuralSteel()\nbeam_material.set_density(7800)\nbeam_material.set_young_modulus(210e9)\nbeam_material.set_poisson_ratio(0.3)\n\nbeam_body = RigidBody(my_system, \"beam_body\")\nbeam_spatial = IGA_Beam(beam_body, beam_shape, beam_material)\nbeam_spatial.set_initial_position(ChVector<>(0, 0, 0))\n\n# --------------\n# Add the flywheel\n# --------------\nflywheel_shape = ChBoxShape()\nflywheel_shape.get_box_geometry().size = ChVector<>(0.2, 0.05, 0.05)\n\nflywheel_material = StructuralSteel()\nflywheel_material.set_density(7800)\n\nflywheel_body = RigidBody(my_system, \"flywheel_body\")\nflywheel_body.add_shape(flywheel_shape)\nflywheel_body.set_mass(1)\nflywheel_body.set_pos(ChVector<>(0, 0, 0.05))\nbeam_spatial.add_child_body(flywheel_body)\n\n# -----------------\n# Add the rotational motor\n# -----------------\nrotational_motor = RotationalMotor(my_system, \"rotational_motor\")\nrotational_motor.set_axis(ChVector3(0, 0, 1))\nrotational_motor.set_joint_target_velocity(10)\nbeam_spatial.add_motor(rotational_motor)\n\n# ------------------\n# Set up the FEM visualization\n# ------------------\nmy_visualization.attach_object(beam_spatial.get_fea_visualization())\n\n# ------------------\n# Run the simulation\n# ------------------\nmy_system.set_solver_type(ChSolverType.CHRONO_SOLVER_ITERATIVE_NEWTON)\nmy_system.set_solver_max_iterations(100)\nmy_system.set_solver_tolerance(1e-6)\nmy_system.set_timestepper_type(ChTimestepperType.HHT)\nmy_system.set_step_method(ChTimestepperHHT::Type.EULER_IMPLICIT_LINEARIZED)\nmy_system.set_time_step(1e-4)\n\nfor i in range(1000):\n    my_system.do_step()\n    my_visualization.run_one_timestep()\n\n# Clean up and close the visualization window\nmy_visualization.wait_for_user()\nmy_visualization.close()\n```\n\nThis script initializes the PyChrono environment, creates the IGA beam, adds the flywheel at the center, and sets up a rotational motor to drive one end of the beam. The visualization includes FEM visualization and an Irrlicht window to observe the dynamics of the beam and flywheel system."
            ],
            [
                "\n    \n    You are a PyChrono expert tasked with generating a simulation script based on the following instructions and a given PyChrono script, which may contain errors. Your task has two parts: identify the potential errors in the script and correct them if exist, also follow the instructions to modify the script to meet the requirements.\n\nHere is the PyChrono code you need to modify:\n\u201c\u201d\"\nimport math as m\nimport pychrono as chrono\nimport pychrono.fea as fea\nimport pychrono.pardisomkl as mkl\nimport pychrono.irrlicht as chronoirr\n\nsys = chrono.ChSystemSMC()\n\nmesh = fea.ChMesh()\nsys.Add(mesh)\n\nmesh.SetAutomaticGravity(True,\n                         2)  # for max precision in gravity of FE, at least 2 integration points per element when using cubic IGA\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, -9.81, 0));\n\nbeam_L = 6\nbeam_ro = 0.050\nbeam_ri = 0.045\nCH_PI = 3.1456\n\n# Create a section, i.e. thickness and material properties\n# for beams. This will be shared among some beams.\n\nminertia = fea.ChInertiaCosseratSimple()\nminertia.SetDensity(7800);\nminertia.SetArea(CH_PI * (pow(beam_ro, 2) - pow(beam_ri, 2)));\nminertia.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\nminertia.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\n\nmelasticity = fea.ChElasticityCosseratSimple()\nmelasticity.SetYoungModulus(210e9)\nmelasticity.SetShearModulusFromPoisson(0.3)\nmelasticity.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetJ((CH_PI / 2.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\n\nmsection = fea.ChBeamSectionCosserat(minertia, melasticity)\n\nmsection.SetCircular(True)\nmsection.SetDrawCircularRadius(beam_ro)  # SetAsCircularSection(..) would overwrite Ixx Iyy J etc.\n\n# Use the ChBuilderBeamIGA tool for creating a straight rod\n# divided in Nel elements:\n\nbuilder = fea.ChBuilderBeamIGA()\nbuilder.BuildBeam(mesh,  # the mesh to put the elements in\n                  msection,  # section of the beam\n                  20,  # number of sections (spans)\n                  chrono.ChVector3d(0, 0, 0),  # start point\n                  chrono.ChVector3d(beam_L, 0, 0),  # end point\n                  chrono.VECT_Y,  # suggested Y direction of section\n                  1)  # order (3 = cubic, etc)\n\nnode_mid = builder.GetLastBeamNodes()[m.floor(builder.GetLastBeamNodes().size() / 2.0)]\n\n# Create the flywheel and attach it to the center of the beam\n\nmbodyflywheel = chrono.ChBodyEasyCylinder(chrono.ChAxis_Y, 0.24, 0.1, 7800)  # R, h, density\nmbodyflywheel.SetCoordsys(\n    chrono.ChCoordsysd(node_mid.GetPos() + chrono.ChVector3d(0, 0.05, 0),  # flywheel initial center (plus Y offset)\n                       chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Z))\n    # flywheel initial alignment (rotate 90\u00b0 so cylinder axis is on X)\n)\nsys.Add(mbodyflywheel)\n\nmyjoint = chrono.ChLinkMateFix()\nmyjoint.Initialize(node_mid, mbodyflywheel)\nsys.Add(myjoint)\n\n# Create the truss\ntruss = chrono.ChBody()\ntruss.SetFixed(True)\nsys.Add(truss)\n\n# Create the end bearing\nbearing = chrono.ChLinkMateGeneric(False, True, True, False, True, True)\nbearing.Initialize(builder.GetLastBeamNodes().back(),\n                   truss,\n                   chrono.ChFramed(builder.GetLastBeamNodes().back().GetPos())\n                   )\nsys.Add(bearing)\n\n# Create the motor that rotates the beam\nrotmotor1 = chrono.ChLinkMotorRotationSpeed()\n\n# Connect the rotor and the stator and add the motor to the system:\nrotmotor1.Initialize(builder.GetLastBeamNodes().front(),  # body A (slave)\n                     truss,  # body B (master)\n                     chrono.ChFramed(builder.GetLastBeamNodes().front().GetPos(),\n                                     chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Y))\n                     # motor frame, in abs. coords\n                     )\nsys.Add(rotmotor1)\n\nf_ramp = chrono.ChFunctionSine(40,0.2)\nrotmotor1.SetMotorFunction(f_ramp)\n\n# Attach a visualization of the FEM mesh.\n\nmvisualizebeamA = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamA.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_SURFACE)\nmvisualizebeamA.SetSmoothFaces(True)\nmesh.AddVisualShapeFEA(mvisualizebeamA)\n\nmvisualizebeamC = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamC.SetFEMglyphType(chrono.ChVisualShapeFEA.GlyphType_NODE_CSYS)\nmvisualizebeamC.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_NONE)\nmvisualizebeamC.SetSymbolsThickness(0.006)\nmvisualizebeamC.SetSymbolsScale(0.01)\nmvisualizebeamC.SetZbufferHide(False)\nmesh.AddVisualShapeFEA(mvisualizebeamC)\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('Test FEA: the Jeffcott rotor with IGA beams')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 1, 4), chrono.ChVector3d(beam_L / 2, 0, 0))\nvis.AddTypicalLights()\n\nmsolver = mkl.ChSolverPardisoMKL()\nsys.SetSolver(msolver)\n\nsys.DoStaticLinear()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(0.002)\n\n\u201c\u201d\"\n\nPlease modify the given code based on the following instructions:\n\u201c\u201d\"\n1. **Change Beam Length:**\n    - Beam length was changed from `6` to `10` units to demonstrate a longer beam.\n    beam_L = 10\n\n\n2. **Change Beam Thickness:**\n    - Adjust the outer and inner radius of the beam from `0.050` and `0.045` to `0.060` and `0.055` respectively.\n    beam_ro = 0.060\n    beam_ri = 0.055\n\n3. **Change Flywheel Dimensions:**\n    - Flywheel radius was changed from `0.24` to `0.30`.\n    mbodyflywheel = chrono.ChBodyEasyCylinder(chrono.ChAxis_Y, 0.30, 0.1, 7800)\n\n4. **Change Gravitational Acceleration:**\n    - Gravity vector was changed from downward (-9.81) to simulate a different environment, with lower gravity.\n    sys.SetGravitationalAcceleration(chrono.ChVector3d(0, -3.71, 0))\n\n5. **Change Motor Function:**\n    - Motor function was revised from `Sine(40, 0.2)` to `Sine(60, 0.1)`.\n    f_ramp = chrono.ChFunctionSine(60, 0.1)\n\n6. **Change Camera Position:**\n    - Camera position was modified to give a better view of the longer beam from `(0, 1, 4)` to `(0, 2, 8)`.\n\u201c\u201d\"\n\nTo complete the task, follow these steps:\n\nReview the given PyChrono script and identify any errors, including syntax errors, logical errors, incorrect method names, and parameter issues.\nCorrect the identified errors in the script to ensure it runs correctly.\nModify the script based on the provided instructions to ensure it meets the specified requirements.\n\nProvide the corrected and modified script below:\n    ",
                "import math as m\nimport pychrono as chrono\nimport pychrono.fea as fea\nimport pychrono.pardisomkl as mkl\nimport pychrono.irrlicht as chronoirr\n\nsys = chrono.ChSystemSMC()\n\nmesh = fea.ChMesh()\nsys.Add(mesh)\n\nmesh.SetAutomaticGravity(True,\n                         2)  # for max precision in gravity of FE, at least 2 integration points per element when using cubic IGA\nsys.SetGravitationalAcceleration(chrono.ChVector3d(0, -3.71, 0)); # Modified gravity\n\nbeam_L = 10  # Modified beam length\nbeam_ro = 0.060  # Modified outer radius\nbeam_ri = 0.055  # Modified inner radius\nCH_PI = 3.1456\n\n# Create a section, i.e. thickness and material properties\n# for beams. This will be shared among some beams.\n\nminertia = fea.ChInertiaCosseratSimple()\nminertia.SetDensity(7800);\nminertia.SetArea(CH_PI * (pow(beam_ro, 2) - pow(beam_ri, 2)));\nminertia.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\nminertia.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)));\n\nmelasticity = fea.ChElasticityCosseratSimple()\nmelasticity.SetYoungModulus(210e9)\nmelasticity.SetShearModulusFromPoisson(0.3)\nmelasticity.SetIyy((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetIzz((CH_PI / 4.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\nmelasticity.SetJ((CH_PI / 2.0) * (pow(beam_ro, 4) - pow(beam_ri, 4)))\n\nmsection = fea.ChBeamSectionCosserat(minertia, melasticity)\n\nmsection.SetCircular(True)\nmsection.SetDrawCircularRadius(beam_ro)  # SetAsCircularSection(..) would overwrite Ixx Iyy J etc.\n\n# Use the ChBuilderBeamIGA tool for creating a straight rod\n# divided in Nel elements:\n\nbuilder = fea.ChBuilderBeamIGA()\nbuilder.BuildBeam(mesh,  # the mesh to put the elements in\n                  msection,  # section of the beam\n                  20,  # number of sections (spans)\n                  chrono.ChVector3d(0, 0, 0),  # start point\n                  chrono.ChVector3d(beam_L, 0, 0),  # end point\n                  chrono.VECT_Y,  # suggested Y direction of section\n                  1)  # order (3 = cubic, etc)\n\nnode_mid = builder.GetLastBeamNodes()[m.floor(builder.GetLastBeamNodes().size() / 2.0)]\n\n# Create the flywheel and attach it to the center of the beam\n\nmbodyflywheel = chrono.ChBodyEasyCylinder(chrono.ChAxis_Y, 0.30, 0.1, 7800)  # Modified flywheel radius\nmbodyflywheel.SetCoordsys(\n    chrono.ChCoordsysd(node_mid.GetPos() + chrono.ChVector3d(0, 0.05, 0),  # flywheel initial center (plus Y offset)\n                       chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Z))\n    # flywheel initial alignment (rotate 90\u00b0 so cylinder axis is on X)\n)\nsys.Add(mbodyflywheel)\n\nmyjoint = chrono.ChLinkMateFix()\nmyjoint.Initialize(node_mid, mbodyflywheel)\nsys.Add(myjoint)\n\n# Create the truss\ntruss = chrono.ChBody()\ntruss.SetFixed(True)\nsys.Add(truss)\n\n# Create the end bearing\nbearing = chrono.ChLinkMateGeneric(False, True, True, False, True, True)\nbearing.Initialize(builder.GetLastBeamNodes().back(),\n                   truss,\n                   chrono.ChFramed(builder.GetLastBeamNodes().back().GetPos())\n                   )\nsys.Add(bearing)\n\n# Create the motor that rotates the beam\nrotmotor1 = chrono.ChLinkMotorRotationSpeed()\n\n# Connect the rotor and the stator and add the motor to the system:\nrotmotor1.Initialize(builder.GetLastBeamNodes().front(),  # body A (slave)\n                     truss,  # body B (master)\n                     chrono.ChFramed(builder.GetLastBeamNodes().front().GetPos(),\n                                     chrono.QuatFromAngleAxis(CH_PI / 2.0, chrono.VECT_Y))\n                     # motor frame, in abs. coords\n                     )\nsys.Add(rotmotor1)\n\nf_ramp = chrono.ChFunctionSine(60, 0.1)  # Modified motor function\nrotmotor1.SetMotorFunction(f_ramp)\n\n# Attach a visualization of the FEM mesh.\n\nmvisualizebeamA = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamA.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_SURFACE)\nmvisualizebeamA.SetSmoothFaces(True)\nmesh.AddVisualShapeFEA(mvisualizebeamA)\n\nmvisualizebeamC = chrono.ChVisualShapeFEA(mesh)\nmvisualizebeamC.SetFEMglyphType(chrono.ChVisualShapeFEA.GlyphType_NODE_CSYS)\nmvisualizebeamC.SetFEMdataType(chrono.ChVisualShapeFEA.DataType_NONE)\nmvisualizebeamC.SetSymbolsThickness(0.006)\nmvisualizebeamC.SetSymbolsScale(0.01)\nmvisualizebeamC.SetZbufferHide(False)\nmesh.AddVisualShapeFEA(mvisualizebeamC)\n\n# Create the Irrlicht visualization\nvis = chronoirr.ChVisualSystemIrrlicht()\nvis.AttachSystem(sys)\nvis.SetWindowSize(1024, 768)\nvis.SetWindowTitle('Test FEA: the Jeffcott rotor with IGA beams')\nvis.Initialize()\nvis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\nvis.AddSkyBox()\nvis.AddCamera(chrono.ChVector3d(0, 2, 8), chrono.ChVector3d(beam_L / 2, 0, 0)) # Modified camera position\nvis.AddTypicalLights()\n\nmsolver = mkl.ChSolverPardisoMKL()\nsys.SetSolver(msolver)\n\nsys.DoStaticLinear()\n\nwhile vis.Run():\n    vis.BeginScene()\n    vis.Render()\n    vis.EndScene()\n    sys.DoStepDynamics(0.002)"
            ]
        ]
    }
]
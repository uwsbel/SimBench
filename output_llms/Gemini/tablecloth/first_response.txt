```python
import pychrono as chrono
import pychrono.fea as fea
import pychrono.irrlicht as irr
import numpy as np

# ---------------------------------------------------------------------
# Simulation parameters and settings
# ---------------------------------------------------------------------

# Time step
time_step = 1e-3

# Total simulation time
total_time = 5

# Output frequency
output_frequency = 100

# Gravity
gravity = chrono.ChVectorD(0, -9.81, 0)

# Visualization scaling factor
visualization_scaling = 1

# ---------------------------------------------------------------------
# Create the Chrono system and set up the solver
# ---------------------------------------------------------------------

system = chrono.ChSystemSMC()
system.Set_G_acc(gravity)

# Use the PardisoMKL solver
solver = chrono.ChSolverPARDISOMKL()
system.SetSolver(solver)

# ---------------------------------------------------------------------
# Create the tablecloth mesh
# ---------------------------------------------------------------------

# Material properties for the tablecloth
rho = 1000  # Density
E = 1e7  # Young's modulus
nu = 0.3  # Poisson's ratio
thickness = 0.005  # Thickness of the tablecloth

# Tablecloth dimensions
width = 1
length = 1

# Number of elements in each direction
nx = 20
ny = 20

# Create the mesh
mesh = fea.ChMesh()

# Create nodes
nodes = {}
for i in range(nx + 1):
    for j in range(ny + 1):
        x = i * (width / nx)
        y = j * (length / ny)
        node = fea.ChNodeShellXYZ(chrono.ChVectorD(x, 0.5, y), chrono.ChVectorD(0, 1, 0))
        nodes[(i, j)] = node
        mesh.AddNode(node)

# Create elements
for i in range(nx):
    for j in range(ny):
        node1 = nodes[(i, j)]
        node2 = nodes[(i + 1, j)]
        node3 = nodes[(i + 1, j + 1)]
        node4 = nodes[(i, j + 1)]
        element = fea.ChElementShell4()
        element.SetNodes(node1, node2, node3, node4)
        element.SetMaterial(fea.ChMaterialShellKirchhoff(rho, E, nu, thickness))
        mesh.AddElement(element)

# Add the mesh to the system
system.Add(mesh)

# ---------------------------------------------------------------------
# Set up visualization
# ---------------------------------------------------------------------

application = irr.ChIrrApp(
    system,
    "Tablecloth Folding Simulation",
    irr.dimension2du(1280, 720),
)
application.AddTypicalSky()
application.AddTypicalLights()
application.SetShowInfos(True)

# Add the mesh to the visualization
vis_mesh = application.AssetBindMesh(mesh)
vis_mesh.SetWireframe(True)

# Set the camera position and target
application.AssetBindAll()
application.AssetUpdateAll()
application.SetCameraPosition(chrono.ChVectorD(width / 2, 0.5, length * 1.5), chrono.ChVectorD(width / 2, 0, 0))

# ---------------------------------------------------------------------
# Simulation loop
# ---------------------------------------------------------------------

time = 0
while time < total_time:
    # Apply gravity
    system.DoStep(time_step)

    # Update visualization
    if system.GetChTime() > time:
        application.GetDevice().run()
        application.BeginScene()
        application.DrawAll()
        application.EndScene()
        time += 1 / output_frequency

print("Simulation complete.")
```

**Explanation:**

1. **Initialization and Setup:**
   - Import necessary modules: `pychrono`, `pychrono.fea`, `pychrono.irrlicht`, and `numpy`.
   - Define simulation parameters: time step, total time, output frequency, gravity, and visualization scaling.
   - Create the Chrono system (`ChSystemSMC`) and set the gravity.
   - Choose and set the PardisoMKL solver for efficient handling of the dynamics.

2. **Tablecloth Mesh Creation:**
   - Define material properties: density, Young's modulus, Poisson's ratio, and thickness.
   - Define tablecloth dimensions and mesh resolution.
   - Create a `ChMesh` object to represent the tablecloth.
   - Iterate through rows and columns to create nodes (`ChNodeShellXYZ`) at each grid point, specifying position and normal vectors.
   - Iterate through elements and create quadrilateral shell elements (`ChElementShell4`) using the corresponding nodes.
   - Assign the defined material properties to each element using `ChMaterialShellKirchhoff`, which implements an isotropic Kirchhoff material model.
   - Add the created mesh to the Chrono system.

3. **Visualization with Irrlicht:**
   - Create an `ChIrrApp` instance to manage the Irrlicht visualization.
   - Add a skybox and default lighting to the scene.
   - Bind the tablecloth mesh to the visualization using `AssetBindMesh` and enable wireframe rendering for better visualization of the mesh structure.
   - Position the camera using `SetCameraPosition` to provide a clear view of the simulation.

4. **Simulation Loop:**
   - Use a `while` loop to advance the simulation in time.
   - Inside the loop:
     - Apply gravity and simulate one time step using `system.DoStep(time_step)`.
     - Check if it's time to update the visualization based on the output frequency.
     - If it's time, update the Irrlicht application and render the scene.

This script sets up a basic simulation of a tablecloth falling under gravity using shell elements. You can further modify it to add interactions with other objects, apply forces, or adjust the material properties and boundary conditions to observe different folding behaviors.

Here's a PyChromo script that implements the simulation as described in your instructions:

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import math

# Initialize the ChronoEngine and vehicle components
chrono.SetChronoDataPath("path/to/chrono/data/")
veh.SetDataPath("path/to/vehicle/data/")

# Create the simulation system
system = chrono.ChSystemNSC()
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the Irrlicht visualization
vis = irr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1280, 720)
vis.SetWindowTitle("CityBus Simulation")
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile("logo_pychrono_alpha.png"))
vis.AddSkyBox()
vis.AddCamera(chrono.ChVectorD(0, 5, -15))
vis.AddTypicalLights()

# Create the terrain
terrain = veh.RigidTerrain(system)
patch_mat = chrono.ChMaterialSurfaceNSC()
patch_mat.SetFriction(0.9)
patch_mat.SetRestitution(0.01)
terrain_patch = terrain.AddPatch(patch_mat, 
                                 chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.QUNIT),
                                 200, 200)
terrain_patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 200, 200)
terrain.Initialize()

# Create the vehicle
vehicle = veh.WheeledVehicle(system, veh.GetDataFile("citybus/vehicle/CityBus_Vehicle.json"))
vehicle.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.QUNIT))

tire_type = veh.TireModelType_TMEASY
tire_data = veh.GetDataFile("citybus/tire/CityBus_TMeasyTire.json")
for axle in vehicle.GetAxles():
    for wheel in axle.GetWheels():
        tire = veh.TMeasyTire(tire_data)
        vehicle.InitializeTire(tire, wheel, tire_type)

# Create the driver system
driver = veh.ChDriver(vehicle.GetVehicle())
driver.Initialize()

# Create the powertrain system
powertrain = veh.SimplePowertrain(veh.GetDataFile("citybus/powertrain/CityBus_SimplePowertrain.json"))
vehicle.InitializePowertrain(powertrain)

# Set up visualization assets
vehicle.SetChassisVisualizationType(veh.VisualizationType_MESH)
vehicle.SetSuspensionVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetSteeringVisualizationType(veh.VisualizationType_PRIMITIVES)
vehicle.SetWheelVisualizationType(veh.VisualizationType_MESH)
vehicle.SetTireVisualizationType(veh.VisualizationType_MESH)

# Simulation loop
step_size = 1e-3
render_step_size = 1.0 / 50  # 50 FPS

render_time = 0

while vis.Run():
    time = system.GetChTime()

    # Driver inputs
    driver_inputs = veh.DriverInputs()
    driver_inputs.m_steering = vis.GetDevice().GetKeyState(irr.KEY_LEFT) - vis.GetDevice().GetKeyState(irr.KEY_RIGHT)
    driver_inputs.m_throttle = vis.GetDevice().GetKeyState(irr.KEY_UP)
    driver_inputs.m_braking = vis.GetDevice().GetKeyState(irr.KEY_DOWN)

    # Update vehicle
    driver.Synchronize(time)
    vehicle.Synchronize(time, driver_inputs, terrain)
    terrain.Synchronize(time)

    # Advance simulation
    system.DoStepDynamics(step_size)

    # Render scene
    if time >= render_time:
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_time += render_step_size

    # Update camera
    vehicle_pos = vehicle.GetVehicle().GetPos()
    cam_pos = vehicle_pos + chrono.ChVectorD(-10, 3, 0)
    cam_target = vehicle_pos + chrono.ChVectorD(2, 0, 0)
    vis.GetActiveCamera().SetManualPosition(cam_pos)
    vis.GetActiveCamera().SetManualTarget(cam_target)

    # Break the simulation loop if ESC is pressed
    if vis.GetDevice().IsKeyDown(irr.KEY_ESCAPE):
        break

# Clean up
vis.GetDevice().closeDevice()
```

This script implements a simulation of a CityBus vehicle on a rigid terrain using PyChrono and Irrlicht for visualization. Here's a breakdown of the key components:

1. The environment is initialized with the ChronoEngine and necessary vehicle components.
2. A rigid terrain is created with a custom texture.
3. The CityBus vehicle is initialized with specified parameters, including tire models.
4. An interactive driver system is implemented, allowing for control of the vehicle's steering, throttle, and braking using arrow keys.
5. Visualization assets are set up for different parts of the vehicle.
6. The simulation loop runs at 50 FPS, updating vehicle dynamics and rendering the scene in real-time.
7. The camera follows the vehicle from a specified position.

Make sure to replace the placeholder paths for Chrono data and vehicle data with the correct paths on your system. Also, ensure that you have the necessary JSON files for the CityBus vehicle, tires, and powertrain in the specified locations.
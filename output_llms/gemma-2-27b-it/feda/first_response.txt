```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.vehicle as chronovehicle

# ---------------------------------------------------------------------
#
#  Simulation setup
#

# Set path to Chrono data directory
chrono.SetChronoDataPath("data/")

# Create the simulation system
system = chrono.ChSystemNSC()

# Set gravitational acceleration
system.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the Irrlicht visualization system
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(800, 600)
vis.SetWindowTitle("FEDA Vehicle Simulation")
vis.Initialize()
vis.AddCamera(chrono.ChCamera(chrono.ChVectorD(0, 2, -5), chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 1, 0)))

# ---------------------------------------------------------------------
#
#  Terrain
#

# Create a rigid terrain with a custom texture
terrain = chrono.ChRigidTerrain(system, 
                               chrono.ChVectorD(0, 0, 0), 
                               chrono.ChVectorD(100, 100, 1), 
                               chrono.ChVectorD(0, 0, 1), 
                               chrono.ChTexture(chrono.GetChronoDataPath() + "terrain/textures/grass.jpg"))

# Add the terrain to the visualization system
vis.AddTerrain(terrain)

# ---------------------------------------------------------------------
#
#  Vehicle
#

# Create a FEDA vehicle
vehicle = chronovehicle.ChVehicle(system)

# Set vehicle initial position and orientation
vehicle.SetChassisPosition(chrono.ChVectorD(0, 1, 0))
vehicle.SetChassisBodyFixed(False)

# Set contact method and tire model
vehicle.SetContactMethod(chronovehicle.ChContactMethod_NSC)
vehicle.SetTireModel(chronovehicle.ChTireModelNSC())

# Load vehicle chassis and suspension
vehicle.SetChassis(chronovehicle.ChChassis(chrono.GetChronoDataPath() + "vehicle/FEDA/chassis.obj"))
vehicle.AddSuspension(chronovehicle.ChSuspension(chrono.GetChronoDataPath() + "vehicle/FEDA/suspension.json"))

# Load vehicle wheels and tires
vehicle.AddWheel(chronovehicle.ChWheel(chrono.GetChronoDataPath() + "vehicle/FEDA/wheel.obj"))
vehicle.AddWheel(chronovehicle.ChWheel(chrono.GetChronoDataPath() + "vehicle/FEDA/wheel.obj"))
vehicle.AddWheel(chronovehicle.ChWheel(chrono.GetChronoDataPath() + "vehicle/FEDA/wheel.obj"))
vehicle.AddWheel(chronovehicle.ChWheel(chrono.GetChronoDataPath() + "vehicle/FEDA/wheel.obj"))

# Set visualization type to mesh for all vehicle parts
vehicle.SetVisualizationType(chrono.VisualizationType_MESH)

# Add the vehicle to the visualization system
vis.Add(vehicle)

# ---------------------------------------------------------------------
#
#  Driver system
#

# Create an interactive driver system
driver = chronovehicle.ChDriver(vehicle)

# ---------------------------------------------------------------------
#
#  Simulation loop
#

# Set simulation time step
timestep = 1.0 / 50.0

while vis.Run():
    # Update driver inputs (steering, throttle, braking)
    driver.Update(timestep)

    # Advance the simulation
    system.DoStepDynamics(timestep)

    # Update the camera position to follow the vehicle
    vis.GetCamera().SetPos(vehicle.GetChassisPosition() + chrono.ChVectorD(0, 3, -5))
    vis.GetCamera().SetLookAt(vehicle.GetChassisPosition())

    # Render the scene
    vis.Render()

```

**Explanation:**

1. **Initialization:**
   - Imports necessary Chrono modules.
   - Sets the Chrono data path.
   - Creates a Chrono system and sets gravitational acceleration.
   - Initializes the Irrlicht visualization system, sets window size and title, and adds a camera.

2. **Terrain:**
   - Creates a rigid terrain using `ChRigidTerrain` with specified dimensions, normal vector, and texture.
   - Adds the terrain to the visualization system.

3. **Vehicle:**
   - Creates a FEDA vehicle using `ChVehicle`.
   - Sets initial position and orientation.
   - Configures contact method and tire model.
   - Loads chassis, suspension, wheels, and tires from JSON and OBJ files.
   - Sets visualization type to mesh for all vehicle parts.
   - Adds the vehicle to the visualization system.

4. **Driver System:**
   - Creates an interactive driver system using `ChDriver` to control steering, throttle, and braking.

5. **Simulation Loop:**
   - Sets the simulation time step to 1/50 seconds for 50 FPS.
   - Enters a loop that continues until the Irrlicht window is closed.
   - Updates driver inputs within each iteration.
   - Advances the simulation using `system.DoStepDynamics`.
   - Updates the camera position to follow the vehicle.
   - Renders the scene using `vis.Render`.

**Notes:**

- This script provides a basic framework. You may need to adjust parameters, add more vehicle components, or implement more complex driver logic based on your specific requirements.
- Make sure you have the necessary Chrono and Irrlicht libraries installed.
- The provided file paths assume that the Chrono data directory is accessible. Adjust them accordingly if needed.
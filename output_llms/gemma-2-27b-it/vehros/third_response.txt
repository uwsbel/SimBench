```python
import pychrono as ch
import pychrono.vehicle as veh
import pychrono.ros as chros
from pychrono import irrlicht as chronoirr
import pychrono.sensor as sens
import math

def main():
    veh.SetDataPath(ch.GetChronoDataPath() + 'vehicle/')
    # Create the HMMWV vehicle and set its parameters.
    hmmwv = veh.HMMWV_Full()
    hmmwv.SetContactMethod(ch.ChContactMethod_NSC)
    hmmwv.SetChassisCollisionType(veh.CollisionType_NONE)
    hmmwv.SetChassisFixed(False)
    hmmwv.SetInitPosition(ch.ChCoordsysd(ch.ChVector3d(0, 0, 1.6), ch.ChQuaterniond(1, 0, 0, 0)))
    hmmwv.SetEngineType(veh.EngineModelType_SHAFTS)
    hmmwv.SetTransmissionType(veh.TransmissionModelType_AUTOMATIC_SHAFTS)
    hmmwv.SetDriveType(veh.DrivelineTypeWV_AWD)
    hmmwv.SetSteeringType(veh.SteeringTypeWV_PITMAN_ARM)
    hmmwv.SetTireType(veh.TireModelType_TMEASY)
    hmmwv.SetTireStepSize(1e-3)
    hmmwv.Initialize()
    hmmwv.SetChassisVisualizationType(veh.VisualizationType_MESH)
    hmmwv.SetSuspensionVisualizationType(veh.VisualizationType_MESH)
    hmmwv.SetSteeringVisualizationType(veh.VisualizationType_MESH)
    hmmwv.SetWheelVisualizationType(veh.VisualizationType_MESH)
    hmmwv.SetTireVisualizationType(veh.VisualizationType_MESH)
    # Create the terrain for the vehicle to interact with.
    terrain = veh.RigidTerrain(hmmwv.GetSystem())
    patch_mat = ch.ChContactMaterialNSC()
    patch_mat.SetFriction(0.9)
    patch_mat.SetRestitution(0.01)
    patch = terrain.AddPatch(patch_mat, ch.CSYSNORM, 100.0, 100.0)
    patch.SetTexture(veh.GetDataFile("terrain/textures/tile4.jpg"), 100, 100)
    terrain.Initialize()

    # Create visualization box
    box = ch.ChBodyEasyBox(1, 1, 1, 1000, True, True)
    box.SetPos(ch.ChVector3d(5, 0, 1.6))
    hmmwv.GetSystem().Add(box)

    # Create sensor manager
    sens_manager = sens.ChSensorManager(hmmwv.GetSystem())

    # Create lidar sensor
    lidar = sens.ChLidarSensor()
    lidar.SetName("lidar")
    lidar.SetCollisionEnvelope(0.5)
    lidar.SetMaxDistance(50)
    lidar.SetVerticalAngle(ch.ChAngleD(0))
    lidar.SetHorizontalAngle(ch.ChAngleD(0))
    lidar.SetAngularResolution(ch.ChAngleD(1))
    lidar.SetSensorPosition(ch.ChVector3d(0, 0, 2))
    lidar.SetSensorDirection(ch.ChVector3d(0, 0, -1))
    lidar.AddFilter(sens.ChFilterLidarGroundPlane())
    lidar.AddFilter(sens.ChFilterLidarDistance())
    lidar.AddFilter(sens.ChFilterLidarIntensity())
    sens_manager.AddSensor(lidar)

    # Create and initialize the driver system.
    driver = veh.ChDriver(hmmwv.GetVehicle())
    driver.Initialize()

    # Create the ROS manager and register handlers for communication.
    ros_manager = chros.ChROSPythonManager()
    ros_manager.RegisterHandler(chros.ChROSClockHandler())
    ros_manager.RegisterHandler(chros.ChROSDriverInputsHandler(25, driver, "~/input/driver_inputs"))
    ros_manager.RegisterHandler(chros.ChROSBodyHandler(25, hmmwv.GetChassisBody(), "~/output/hmmwv/state"))
    ros_manager.RegisterHandler(chros.ChROSLidarHandler(lidar, "~/output/lidar"))
    ros_manager.Initialize()

    # Create run-time visualization
    vis = chronoirr.ChVisualSystemIrrlicht()
    vis.AttachSystem(hmmwv.GetSystem())
    vis.SetCameraVertical(ch.CameraVerticalDir_Z)
    vis.SetWindowSize(1280, 720)
    vis.SetWindowTitle('Viper rover - Rigid terrain')
    vis.Initialize()
    vis.AddLogo(ch.GetChronoDataFile('logo_pychrono_alpha.png'))
    vis.AddSkyBox()
    vis.AddCamera(ch.ChVector3d(-5, 2.5, 1.5), ch.ChVector3d(0, 0, 1))
    vis.AddTypicalLights()
    vis.AddLightWithShadow(ch.ChVector3d(1.5, -2.5, 5.5), ch.ChVector3d(0, 0, 0.5), 3, 4, 10, 40, 512)

    # Start the simulation loop.
    time = 0
    time_step = 1e-3
    time_end = 30
    step_number = 0
    render_step_size = 1.0 / 25
    render_steps = math.ceil(render_step_size / time_step)
    hmmwv.GetVehicle().EnableRealtime(True)
    while vis.Run():
        time = hmmwv.GetSystem().GetChTime()
        if (step_number % render_steps == 0):
            vis.BeginScene()
            vis.Render()
            vis.EndScene()
        driver_inputs = driver.GetInputs()
        driver.Synchronize(time)
        terrain.Synchronize(time)
        hmmwv.Synchronize(time, driver_inputs, terrain)

        driver.Advance(time_step)
        terrain.Advance(time_step)
        hmmwv.Advance(time_step)

        sens_manager.Update()  # Update sensor manager

        if not ros_manager.Update(time, time_step):
            break
        step_number += 1

if __name__ == "__main__":
    main()
```

**Explanation of Changes:**

1. **Import `pychrono.sensor as sens`:** This line imports the necessary module for using sensor functionalities.
2. **Visualization Box:** A simple box is created using `ChBodyEasyBox` and added to the simulation system for visualization purposes.
3. **Sensor Manager:** A `ChSensorManager` is created to manage the lidar sensor.
4. **Lidar Sensor:** A `ChLidarSensor` is instantiated, configured with various parameters (collision envelope, maximum distance, angles, resolution), and added to the sensor manager.
5. **Filters:** Several filters are added to the lidar sensor to process the data:
   - `ChFilterLidarGroundPlane`: Removes points that are likely part of the ground plane.
   - `ChFilterLidarDistance`: Filters points based on their distance from the sensor.
   - `ChFilterLidarIntensity`: Processes the intensity values of the lidar returns.
6. **ROS Lidar Handler:** A `ChROSLidarHandler` is registered with the ROS manager to publish lidar data to the ROS topic "~/output/lidar".
7. **Sensor Manager Update:** Inside the simulation loop, `sens_manager.Update()` is called to update the sensor data.
8. **Camera Position:** The camera position is changed to `(-5, 2.5, 1.5)` for a different perspective.
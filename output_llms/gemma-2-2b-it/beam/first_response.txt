```python
import pychrono as chrono
import pychrono.irrlicht as irrlicht
import pychrono.irrlicht.irrlicht_utils as irr_utils

# Initialize PyChrono
chrono.init()

# Create the Irrlicht engine
engine = irrlicht.IrrlichtEngine()

# Create a new scene
scene = engine.createScene()

# Create a new world
world = chrono.World()
world.set_gravity(chrono.Vector3(0, -9.81, 0))

# Define beam properties
beam_material = chrono.Material()
beam_material.set_color(chrono.Color(1, 0, 0))
beam_material.set_roughness(0.8)

beam_properties = chrono.BeamProperties()
beam_properties.set_material(beam_material)
beam_properties.set_elasticity(1000000)
beam_properties.set_density(7850)
beam_properties.set_thickness(0.01)

# Create a beam mesh
beam_mesh = chrono.Mesh()
beam_mesh.set_material(beam_material)
beam_mesh.set_properties(beam_properties)

# Create a beam object
beam = chrono.Beam(beam_mesh)
beam.set_position(chrono.Vector3(0, 0, 0))
beam.set_rotation(chrono.Quaternion(0, 0, 0, 1))

# Create nodes for the beam
nodes = []
for i in range(beam_mesh.get_num_vertices()):
    node = chrono.Node()
    node.set_position(chrono.Vector3(0, 0, 0))
    nodes.append(node)

# Add the beam and nodes to the world
world.add_object(beam)
world.add_objects(nodes)

# Set up the Irrlicht rendering
irr_utils.set_irrlicht_engine(engine)
irr_utils.set_irrlicht_scene(scene)

# Start the simulation loop
while True:
    # Update the simulation
    world.update()

    # Render the scene
    engine.render()

# Clean up
engine.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono.
   - Create an Irrlicht engine instance.

2. **Scene Setup:**
   - Create a new scene and world.
   - Set the gravity vector.

3. **Beam Properties:**
   - Define beam material properties (color, roughness).
   - Set beam properties like elasticity, density, thickness.

4. **Beam Mesh:**
   - Create a beam mesh object.
   - Set the material and properties.

5. **Beam Object:**
   - Create a beam object using the mesh.
   - Set initial position and rotation.

6. **Nodes:**
   - Create nodes for the beam.
   - Set their initial positions.

7. **World and Objects:**
   - Add the beam and nodes to the world.

8. **Irrlicht Rendering:**
   - Set up Irrlicht rendering using `irr_utils`.
   - Render the scene in the simulation loop.

9. **Simulation Loop:**
   - Update the simulation using `world.update()`.
   - Render the scene using `engine.render()`.

10. **Cleanup:**
    - Shutdown the Irrlicht engine.


**Note:**

- This script provides a basic framework for a beam finite element simulation. 
- You can customize the beam properties, mesh, and nodes to suit your specific needs.
- You can add more complex physics and interactions to the simulation.
- You can use PyChrono's visualization tools to visualize the simulation results. 
- You can also use Irrlicht's rendering capabilities to visualize the simulation in real-time.
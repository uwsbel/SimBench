{
    "round_name": "first",
    "prediction": "import pychrono as chrono\nimport pychrono.visualization as vis\nimport pychrono.sensor as sensor\nimport pychrono.sensor.noise as noise\nimport pychrono.sensor.visualization as vis_sensor\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the world\nworld = chrono.World()\n\n# Load the triangular mesh\nmesh_path = \"your_mesh.obj\"  # Replace with your mesh file path\nmesh = chrono.Mesh.from_file(mesh_path)\n\n# Add the mesh as a fixed body\nmesh_body = chrono.Body(mesh)\nmesh_body.set_fixed()\nworld.add_body(mesh_body)\n\n# Create a camera sensor\ncamera_sensor = sensor.CameraSensor(mesh_body)\n\n# Add noise filters and visualizations\ncamera_sensor.add_noise_filter(noise.GaussianNoiseFilter(sigma=0.1))\ncamera_sensor.add_visualization(vis.ImageBuffer(width=640, height=480))\n\n# Set camera position and orientation\ncamera_sensor.set_position(chrono.Vector3(0, 0, 10))\ncamera_sensor.set_orientation(chrono.Quaternion(0, 0, 0, 1))\n\n# Create a sensor manager\nsensor_manager = sensor.SensorManager(camera_sensor)\n\n# Simulate the system\nworld.run(1000)\n\n# Print camera buffer data at each step\nfor step in range(1000):\n    # Get the camera buffer data\n    buffer_data = camera_sensor.get_buffer_data()\n\n    # Print the buffer data\n    print(f\"Step {step}: {buffer_data}\")\n\n# Clean up\nworld.destroy()",
    "reference_code": "import pychrono.core as chrono\nimport pychrono.sensor as sens\n\nimport math\nimport time\n\ndef main():\n    # -----------------\n    # Create the system\n    # -----------------\n    # Initialize the Chrono physical system (non-smooth contact)\n    mphysicalSystem = chrono.ChSystemNSC()\n\n    # -----------------------------------\n    # Add a mesh to be sensed by a camera\n    # -----------------------------------\n    # Load a triangular mesh from a Wavefront .obj file\n    mmesh = chrono.ChTriangleMeshConnected()\n    mmesh.LoadWavefrontMesh(chrono.GetChronoDataFile(\"vehicle/hmmwv/hmmwv_chassis.obj\"), False, True)\n    # Scale the mesh uniformly by a factor of 2\n    mmesh.Transform(chrono.ChVector3d(0, 0, 0), chrono.ChMatrix33d(2))\n\n    # Create a visual representation of the mesh\n    trimesh_shape = chrono.ChVisualShapeTriangleMesh()\n    trimesh_shape.SetMesh(mmesh)\n    trimesh_shape.SetName(\"HMMWV Chassis Mesh\")\n    trimesh_shape.SetMutable(False)  # Set the mesh to be immutable\n\n    # Create a body to which the visual shape will be attached\n    mesh_body = chrono.ChBody()\n    mesh_body.SetPos(chrono.ChVector3d(0, 0, 0))  # Set the position of the body\n    mesh_body.AddVisualShape(trimesh_shape)  # Attach the visual shape to the body\n    mesh_body.SetFixed(True)  # Fix the body in space\n    mphysicalSystem.Add(mesh_body)  # Add the body to the physical system\n\n    # -----------------------\n    # Create a sensor manager\n    # -----------------------\n    # Initialize the sensor manager to manage all sensors in the simulation\n    manager = sens.ChSensorManager(mphysicalSystem)\n\n    # Add point lights to the scene for illumination\n    intensity = 1.0  # Set the light intensity\n    manager.scene.AddPointLight(chrono.ChVector3f(2, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(9, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(16, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(23, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddAreaLight(chrono.ChVector3f(0, 0, 4), chrono.ChColor(intensity, intensity, intensity), 500.0, chrono.ChVector3f(1, 0, 0), chrono.ChVector3f(0, -1, 0))\n\n    # ------------------------------------------------\n    # Create a camera and add it to the sensor manager\n    # ------------------------------------------------\n    # Define the camera offset pose relative to the body it is attached to\n    offset_pose = chrono.ChFramed(chrono.ChVector3d(-5, 0, 2), chrono.QuatFromAngleAxis(2, chrono.ChVector3d(0, 1, 0)))\n\n    # Initialize the camera sensor\n    cam = sens.ChCameraSensor(\n        mesh_body,              # Body the camera is attached to\n        update_rate,            # Camera update rate in Hz\n        offset_pose,            # Offset pose of the camera\n        image_width,            # Image width in pixels\n        image_height,           # Image height in pixels\n        fov                     # Camera's horizontal field of view in radians\n    )\n    cam.SetName(\"Camera Sensor\")\n    cam.SetLag(lag)  # Set the lag between sensing and data accessibility\n    cam.SetCollectionWindow(exposure_time)  # Set the exposure time for the camera\n\n    # ------------------------------------------------------------------\n    # Create a filter graph for post-processing the data from the camera\n    # ------------------------------------------------------------------\n    # Apply noise model to the camera sensor based on the specified type\n    if noise_model == \"CONST_NORMAL\":\n        cam.PushFilter(sens.ChFilterCameraNoiseConstNormal(0.0, 0.02))  # Add constant normal noise\n    elif noise_model == \"PIXEL_DEPENDENT\":\n        cam.PushFilter(sens.ChFilterCameraNoisePixDep(0.02, 0.03))  # Add pixel-dependent noise\n    elif noise_model == \"NONE\":\n        # No noise model applied\n        pass\n\n    # Visualize the image before applying grayscale filter\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(image_width, image_height, \"Before Grayscale Filter\"))\n\n    # Provide host access to the RGBA8 buffer from the camera\n    cam.PushFilter(sens.ChFilterRGBA8Access())\n\n    # Save the current image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"rgb/\"))\n\n    # Convert the camera image to grayscale\n    cam.PushFilter(sens.ChFilterGrayscale())\n\n    # Visualize the grayscaled image\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(int(image_width / 2), int(image_height / 2), \"Grayscale Image\"))\n\n    # Save the grayscaled image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"gray/\"))\n\n    # Resize the image to the specified width and height\n    cam.PushFilter(sens.ChFilterImageResize(int(image_width / 2), int(image_height / 2)))\n\n    # Access the grayscaled image buffer as R8 pixels\n    cam.PushFilter(sens.ChFilterR8Access())\n\n    # Add the camera sensor to the manager\n    manager.AddSensor(cam)\n\n    # ---------------\n    # Simulate system\n    # ---------------\n    orbit_radius = 10  # Radius of the camera orbit\n    orbit_rate = 0.5   # Rate of the camera orbit in radians per second\n    ch_time = 0.0      # Initialize simulation time\n\n    t1 = time.time()  # Record the start time of the simulation\n\n    while ch_time < end_time:\n        # Dynamically set the camera's position around the orbit\n        cam.SetOffsetPose(chrono.ChFramed(\n            chrono.ChVector3d(-orbit_radius * math.cos(ch_time * orbit_rate), -orbit_radius * math.sin(ch_time * orbit_rate), 1),\n            chrono.QuatFromAngleAxis(ch_time * orbit_rate, chrono.ChVector3d(0, 0, 1))))\n\n        # Access the RGBA8 buffer from the camera\n        rgba8_buffer = cam.GetMostRecentRGBA8Buffer()\n        if rgba8_buffer.HasData():\n            rgba8_data = rgba8_buffer.GetRGBA8Data()\n            print('RGBA8 buffer received from cam. Camera resolution: {0}x{1}'.format(rgba8_buffer.Width, rgba8_buffer.Height))\n            print('First Pixel: {0}'.format(rgba8_data[0, 0, :]))\n\n        # Update the sensor manager (render/save/filter data automatically)\n        manager.Update()\n\n        # Perform a step of dynamics simulation\n        mphysicalSystem.DoStepDynamics(step_size)\n\n        # Update the current simulation time\n        ch_time = mphysicalSystem.GetChTime()\n\n    print(\"Sim time:\", end_time, \"Wall time:\", time.time() - t1)\n\n# -----------------\n# Camera parameters\n# -----------------\n\n# Noise model attached to the sensor\nnoise_model = \"CONST_NORMAL\"  # Constant normal noise model\n\n# Camera lens model\nlens_model = sens.PINHOLE  # Pinhole lens model\n\n# Update rate in Hz\nupdate_rate = 30\n\n# Image width and height\nimage_width = 1280\nimage_height = 720\n\n# Camera's horizontal field of view\nfov = 1.408  # Horizontal field of view in radians\n\n# Lag (in seconds) between sensing and when data becomes accessible\nlag = 0\n\n# Exposure (in seconds) of each image\nexposure_time = 0\n\n# ---------------------\n# Simulation parameters\n# ---------------------\n\n# Simulation step size\nstep_size = 1e-3\n\n# Simulation end time\nend_time = 20.0\n\n# Save camera images\nsave = False\n\n# Render camera images\nvis = True\n\n# Output directory\nout_dir = \"SENSOR_OUTPUT/\"\n\n# Main function entry point\nmain()\n",
    "api_path": "# PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.",
    "output_system_path": "D:\\SimBench\\output\\gemma-2-2b-it\\camera",
    "scores": {
        "score_document": "### Evaluation of the PyChrono Simulation Script\n\n#### Completeness (40 points total)\n1. **System Initialization**: The script initializes the world using `chrono.World()`, which is not the recommended way. The correct initialization should use either `chrono.ChSystemNSC()` or `chrono.ChSystemSMC()`. **(Deduct 15 points)**\n2. **Body Creation**: The mesh is added as a fixed body, but the mesh should be created using a proper body type (like `chrono.ChBody()`) instead of directly using `chrono.Body(mesh)`. **(Deduct 10 points)**\n3. **Sensor Manager**: The script creates a sensor manager but does not utilize it effectively in the simulation loop. **(Deduct 5 points)**\n4. **Camera Setup**: The camera sensor is created, but there is no setup for the visualization system (like initializing the visual system or adding a camera to the visualization). **(Deduct 15 points)**\n\n**Total Deductions for Completeness: 15 + 10 + 5 + 15 = 45 points**\n\n#### Correctness (30 points total)\n1. **Incorrect Use of API**: The use of `chrono.Body(mesh)` is incorrect. The mesh should be associated with a body type that allows for proper physics simulation. **(Deduct 15 points)**\n2. **Simulation Loop**: The simulation runs for 1000 steps, but it does not call `DoStepDynamics()` to advance the simulation. This will lead to incorrect simulation behavior. **(Deduct 15 points)**\n\n**Total Deductions for Correctness: 15 + 15 = 30 points**\n\n#### Code Quality (10 points total)\n1. **Readability and Structure**: The code is generally readable, but it lacks meaningful comments explaining the purpose of various sections and functions. **(Deduct 5 points)**\n2. **Variable Naming**: The variable names are adequate, but more descriptive names could enhance clarity. **(Deduct 3 points)**\n\n**Total Deductions for Code Quality: 5 + 3 = 8 points**\n\n#### Efficiency (10 points total)\n1. **Unnecessary Calculations**: The script retrieves camera buffer data in each step but does not utilize it effectively. This could be optimized by processing the data only when necessary. **(Deduct 5 points)**\n2. **Missing Optimization Opportunities**: The simulation could benefit from a more efficient loop structure that integrates the visualization and simulation steps. **(Deduct 3 points)**\n\n**Total Deductions for Efficiency: 5 + 3 = 8 points**\n\n#### Error Handling and Robustness (5 points total)\n1. **Lack of Error Handling**: The script does not include any error handling for file loading or sensor initialization, which could lead to runtime errors. **(Deduct 5 points)**\n\n**Total Deductions for Error Handling: 5 points**\n\n#### Use of Visualization Tools (5 points total)\n1. **Visualization Setup**: The script does not set up the visualization system properly, missing calls to initialize and render the visualization. **(Deduct 5 points)**\n\n**Total Deductions for Use of Visualization Tools: 5 points**\n\n### Final Score Calculation\n- **Total Points Deducted**: \n  - Completeness: 45\n  - Correctness: 30\n  - Code Quality: 8\n  - Efficiency: 8\n  - Error Handling: 5\n  - Visualization: 5\n- **Total Deductions**: 45 + 30 + 8 + 8 + 5 + 5 = 101 points\n\nThe original score is 100 points, so the final score is:\n- **Final Score**: 100 - 101 = -1 (which is capped at 0)\n\n### Final Score Output\n[[0]]\n\n### Explanation of Deductions\nThe script has significant issues with completeness and correctness, particularly in the initialization of the simulation environment and the use of the API. It also lacks proper visualization setup and error handling, leading to a low score. The deductions reflect the need for a more structured approach to simulation setup and execution in PyChrono.",
        "score_reference": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - **System Initialization**: The provided code initializes the PyChrono world but does not use the `ChSystemNSC` class as in the reference script. This is a significant omission. **(Deduct 15 points)**\n   - **Mesh Handling**: The reference script includes detailed handling of the mesh, including scaling and attaching visual shapes. The provided code lacks these details, such as scaling the mesh and setting it as immutable. **(Deduct 10 points)**\n   - **Camera Setup**: The camera sensor setup in the provided code is less detailed than in the reference script, which includes parameters like update rate, field of view, and lag. **(Deduct 10 points)**\n   - **Simulation Loop**: The provided code runs a fixed number of steps without dynamically updating the camera's position or handling time, which is a significant deviation from the reference. **(Deduct 15 points)**\n   - **Total Deductions for Completeness**: 50 points (max 40, capped at 40).\n\n2. **Correctness (30 points total)**\n   - **API Usage**: The provided code uses `chrono.Mesh.from_file`, which is not a standard method in the reference API. The reference uses `chrono.ChTriangleMeshConnected()` for loading meshes. **(Deduct 15 points)**\n   - **Logical Errors**: The provided code does not correctly implement the camera's dynamic behavior or the sensor manager's update mechanism, leading to potential logical errors in simulation behavior. **(Deduct 10 points)**\n   - **Total Deductions for Correctness**: 25 points (max 30, capped at 30).\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure**: The provided code lacks meaningful comments and has a less structured approach compared to the reference script. **(Deduct 5 points)**\n   - **Comments**: The provided code has minimal comments explaining the purpose of various sections, which is less than the reference script. **(Deduct 5 points)**\n   - **Total Deductions for Code Quality**: 10 points (max 10, capped at 10).\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations**: The provided code runs a loop for 1000 steps without dynamically updating the camera's position or handling time effectively, which is less efficient than the reference script. **(Deduct 5 points)**\n   - **Missing Optimizations**: The reference script includes optimizations for managing the sensor and camera updates that are not present in the provided code. **(Deduct 3 points)**\n   - **Total Deductions for Efficiency**: 8 points (max 10, capped at 10).\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Error Handling**: The provided code lacks any error handling mechanisms, which are present in the reference script. **(Deduct 5 points)**\n   - **Total Deductions for Error Handling and Robustness**: 5 points (max 5, capped at 5).\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Visualization Setup**: The provided code uses basic visualization but lacks the detailed lighting and visual setup present in the reference script. **(Deduct 5 points)**\n   - **Total Deductions for Use of Visualization Tools**: 5 points (max 5, capped at 5).\n\n### Summary of Deductions\n- Completeness: 40 points\n- Correctness: 25 points\n- Code Quality: 10 points\n- Efficiency: 8 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 5 points\n\n### Final Score Calculation\nStarting from 100 points:\n- Total Deductions: 93 points\n- Final Score: 100 - 93 = 7\n\n### Final Score Output\n[[7]]",
        "score_reference_document": "### Evaluation of the Provided PyChrono Code\n\n1. **Completeness (40 points total)**\n   - **System Initialization**: The provided code initializes the world using `chrono.World()`, which is not the same as the `chrono.ChSystemNSC()` used in the reference. This is a significant omission as it affects the dynamics of the simulation. **(Deduct 15 points)**\n   - **Mesh Loading**: The provided code uses `chrono.Mesh.from_file()`, which is not a standard method in the PyChrono API. The reference uses `chrono.ChTriangleMeshConnected()` and `LoadWavefrontMesh()`, which are the correct methods for loading a mesh. **(Deduct 15 points)**\n   - **Camera Sensor Initialization**: The provided code initializes a camera sensor but lacks the detailed configuration seen in the reference, such as setting the update rate, offset pose, and field of view. **(Deduct 10 points)**\n   - **Visualization Setup**: The provided code includes basic visualization but lacks the comprehensive setup of lights and visual shapes present in the reference. **(Deduct 10 points)**\n\n   **Total Deductions for Completeness: 50 points**\n\n2. **Correctness (30 points total)**\n   - **Incorrect API Usage**: The use of `chrono.Mesh.from_file()` is incorrect and could lead to significant issues in loading the mesh. **(Deduct 15 points)**\n   - **Logical Errors**: The camera sensor is not properly configured (e.g., missing parameters like update rate, exposure time). This could lead to unexpected behavior during simulation. **(Deduct 10 points)**\n   - **Minor inaccuracies**: The method of accessing buffer data and printing it is not as robust as in the reference. **(Deduct 5 points)**\n\n   **Total Deductions for Correctness: 30 points**\n\n3. **Code Quality (10 points total)**\n   - **Readability and Structure**: The code is relatively readable but lacks meaningful comments and structure compared to the reference. **(Deduct 5 points)**\n   - **Documentation**: There are insufficient comments explaining the purpose of various sections of the code. **(Deduct 5 points)**\n\n   **Total Deductions for Code Quality: 10 points**\n\n4. **Efficiency (10 points total)**\n   - **Unnecessary Calculations**: The simulation loop prints buffer data at each step, which can be inefficient and is not present in the reference. This could slow down the simulation significantly. **(Deduct 5 points)**\n   - **Missing Optimization Opportunities**: The provided code does not utilize the sensor manager effectively, which could streamline the process of managing sensors. **(Deduct 3 points)**\n\n   **Total Deductions for Efficiency: 8 points**\n\n5. **Error Handling and Robustness (5 points total)**\n   - **Lack of Error Handling**: The provided code does not include any error handling for file loading or sensor initialization, which is crucial for robustness. **(Deduct 5 points)**\n\n   **Total Deductions for Error Handling and Robustness: 5 points**\n\n6. **Use of Visualization Tools (5 points total)**\n   - **Inadequate Visualization Setup**: The provided code does not set up lighting or other visual elements as comprehensively as the reference. **(Deduct 5 points)**\n\n   **Total Deductions for Use of Visualization Tools: 5 points**\n\n### Summary of Deductions\n- Completeness: 50 points\n- Correctness: 30 points\n- Code Quality: 10 points\n- Efficiency: 8 points\n- Error Handling and Robustness: 5 points\n- Use of Visualization Tools: 5 points\n\n### Final Score Calculation\nAssuming a perfect score of 100 points, the total deductions amount to 108 points. However, since the score cannot go below zero, the final score is capped at 0.\n\n**Final Score: 0**\n\n**Final Output: [[0]]**"
    },
    "prompts": {
        "prompt_document": "\n        You are a PyChrono expert tasked with evaluating a simulation script by comparing it against the PyChrono API documentation. While the API documentation provides guidelines, it may not cover all aspects due to length constraints. Therefore, your evaluation should also be based on your knowledge of best practices in Python coding and general simulation principles.\n\n        Here is the PyChrono code you need to evaluate:\n        [The Start of Assistant’s Answer]\n        import pychrono as chrono\nimport pychrono.visualization as vis\nimport pychrono.sensor as sensor\nimport pychrono.sensor.noise as noise\nimport pychrono.sensor.visualization as vis_sensor\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the world\nworld = chrono.World()\n\n# Load the triangular mesh\nmesh_path = \"your_mesh.obj\"  # Replace with your mesh file path\nmesh = chrono.Mesh.from_file(mesh_path)\n\n# Add the mesh as a fixed body\nmesh_body = chrono.Body(mesh)\nmesh_body.set_fixed()\nworld.add_body(mesh_body)\n\n# Create a camera sensor\ncamera_sensor = sensor.CameraSensor(mesh_body)\n\n# Add noise filters and visualizations\ncamera_sensor.add_noise_filter(noise.GaussianNoiseFilter(sigma=0.1))\ncamera_sensor.add_visualization(vis.ImageBuffer(width=640, height=480))\n\n# Set camera position and orientation\ncamera_sensor.set_position(chrono.Vector3(0, 0, 10))\ncamera_sensor.set_orientation(chrono.Quaternion(0, 0, 0, 1))\n\n# Create a sensor manager\nsensor_manager = sensor.SensorManager(camera_sensor)\n\n# Simulate the system\nworld.run(1000)\n\n# Print camera buffer data at each step\nfor step in range(1000):\n    # Get the camera buffer data\n    buffer_data = camera_sensor.get_buffer_data()\n\n    # Print the buffer data\n    print(f\"Step {step}: {buffer_data}\")\n\n# Clean up\nworld.destroy()\n        [The End of Assistant’s Answer]\n\n        Use the following evaluation criteria and point deduction guidelines:\n\n        1. **Completeness (40 points total)**\n           - Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) as outlined in the PyChrono API documentation or generally expected in a simulation setup.\n           - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured according to the API documentation or general simulation best practices.\n           - Deduct **5 points** for minor omissions or slight deviations from best practices mentioned in the API documentation or common Python coding practices.\n\n        2. **Correctness (30 points total)**\n           - Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior, as indicated by the documentation or your expert knowledge.\n           - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, based on the API documentation or standard simulation principles.\n           - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the API guidelines or standard coding practices.\n\n        3. **Code Quality (10 points total)**\n           - Evaluate the readability, structure, and documentation of the code. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting, based on your Python expertise.\n           - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, whether outlined in the API documentation or based on general coding standards.\n\n        4. **Efficiency (10 points total)**\n           - Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that could be optimized according to the API documentation or your understanding of efficient coding practices.\n           - Deduct **3 points** for missing obvious optimization opportunities as suggested by the API documentation or standard programming practices.\n\n        5. **Error Handling and Robustness (5 points total)**\n           - Deduct **5 points** for lack of basic error handling or failure to account for common issues, as recommended by the API documentation or best practices in Python coding.\n           - Deduct **3 points** for inadequate handling of edge cases, considering both the API documentation and typical robustness requirements in coding.\n\n        6. **Use of Visualization Tools (5 points total)**\n           - Deduct **3 to 5 points** for incorrect or inadequate visualization setup according to the API documentation or general expectations for visualizing simulations.\n           - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, based on both the API documentation and your understanding of effective simulation visualization.\n\n        Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n        Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n        After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n        Provide the evaluated score and a brief explanation of the deductions below:\n        ",
        "prompt_reference": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    import pychrono as chrono\nimport pychrono.visualization as vis\nimport pychrono.sensor as sensor\nimport pychrono.sensor.noise as noise\nimport pychrono.sensor.visualization as vis_sensor\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the world\nworld = chrono.World()\n\n# Load the triangular mesh\nmesh_path = \"your_mesh.obj\"  # Replace with your mesh file path\nmesh = chrono.Mesh.from_file(mesh_path)\n\n# Add the mesh as a fixed body\nmesh_body = chrono.Body(mesh)\nmesh_body.set_fixed()\nworld.add_body(mesh_body)\n\n# Create a camera sensor\ncamera_sensor = sensor.CameraSensor(mesh_body)\n\n# Add noise filters and visualizations\ncamera_sensor.add_noise_filter(noise.GaussianNoiseFilter(sigma=0.1))\ncamera_sensor.add_visualization(vis.ImageBuffer(width=640, height=480))\n\n# Set camera position and orientation\ncamera_sensor.set_position(chrono.Vector3(0, 0, 10))\ncamera_sensor.set_orientation(chrono.Quaternion(0, 0, 0, 1))\n\n# Create a sensor manager\nsensor_manager = sensor.SensorManager(camera_sensor)\n\n# Simulate the system\nworld.run(1000)\n\n# Print camera buffer data at each step\nfor step in range(1000):\n    # Get the camera buffer data\n    buffer_data = camera_sensor.get_buffer_data()\n\n    # Print the buffer data\n    print(f\"Step {step}: {buffer_data}\")\n\n# Clean up\nworld.destroy()\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    import pychrono.core as chrono\nimport pychrono.sensor as sens\n\nimport math\nimport time\n\ndef main():\n    # -----------------\n    # Create the system\n    # -----------------\n    # Initialize the Chrono physical system (non-smooth contact)\n    mphysicalSystem = chrono.ChSystemNSC()\n\n    # -----------------------------------\n    # Add a mesh to be sensed by a camera\n    # -----------------------------------\n    # Load a triangular mesh from a Wavefront .obj file\n    mmesh = chrono.ChTriangleMeshConnected()\n    mmesh.LoadWavefrontMesh(chrono.GetChronoDataFile(\"vehicle/hmmwv/hmmwv_chassis.obj\"), False, True)\n    # Scale the mesh uniformly by a factor of 2\n    mmesh.Transform(chrono.ChVector3d(0, 0, 0), chrono.ChMatrix33d(2))\n\n    # Create a visual representation of the mesh\n    trimesh_shape = chrono.ChVisualShapeTriangleMesh()\n    trimesh_shape.SetMesh(mmesh)\n    trimesh_shape.SetName(\"HMMWV Chassis Mesh\")\n    trimesh_shape.SetMutable(False)  # Set the mesh to be immutable\n\n    # Create a body to which the visual shape will be attached\n    mesh_body = chrono.ChBody()\n    mesh_body.SetPos(chrono.ChVector3d(0, 0, 0))  # Set the position of the body\n    mesh_body.AddVisualShape(trimesh_shape)  # Attach the visual shape to the body\n    mesh_body.SetFixed(True)  # Fix the body in space\n    mphysicalSystem.Add(mesh_body)  # Add the body to the physical system\n\n    # -----------------------\n    # Create a sensor manager\n    # -----------------------\n    # Initialize the sensor manager to manage all sensors in the simulation\n    manager = sens.ChSensorManager(mphysicalSystem)\n\n    # Add point lights to the scene for illumination\n    intensity = 1.0  # Set the light intensity\n    manager.scene.AddPointLight(chrono.ChVector3f(2, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(9, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(16, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(23, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddAreaLight(chrono.ChVector3f(0, 0, 4), chrono.ChColor(intensity, intensity, intensity), 500.0, chrono.ChVector3f(1, 0, 0), chrono.ChVector3f(0, -1, 0))\n\n    # ------------------------------------------------\n    # Create a camera and add it to the sensor manager\n    # ------------------------------------------------\n    # Define the camera offset pose relative to the body it is attached to\n    offset_pose = chrono.ChFramed(chrono.ChVector3d(-5, 0, 2), chrono.QuatFromAngleAxis(2, chrono.ChVector3d(0, 1, 0)))\n\n    # Initialize the camera sensor\n    cam = sens.ChCameraSensor(\n        mesh_body,              # Body the camera is attached to\n        update_rate,            # Camera update rate in Hz\n        offset_pose,            # Offset pose of the camera\n        image_width,            # Image width in pixels\n        image_height,           # Image height in pixels\n        fov                     # Camera's horizontal field of view in radians\n    )\n    cam.SetName(\"Camera Sensor\")\n    cam.SetLag(lag)  # Set the lag between sensing and data accessibility\n    cam.SetCollectionWindow(exposure_time)  # Set the exposure time for the camera\n\n    # ------------------------------------------------------------------\n    # Create a filter graph for post-processing the data from the camera\n    # ------------------------------------------------------------------\n    # Apply noise model to the camera sensor based on the specified type\n    if noise_model == \"CONST_NORMAL\":\n        cam.PushFilter(sens.ChFilterCameraNoiseConstNormal(0.0, 0.02))  # Add constant normal noise\n    elif noise_model == \"PIXEL_DEPENDENT\":\n        cam.PushFilter(sens.ChFilterCameraNoisePixDep(0.02, 0.03))  # Add pixel-dependent noise\n    elif noise_model == \"NONE\":\n        # No noise model applied\n        pass\n\n    # Visualize the image before applying grayscale filter\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(image_width, image_height, \"Before Grayscale Filter\"))\n\n    # Provide host access to the RGBA8 buffer from the camera\n    cam.PushFilter(sens.ChFilterRGBA8Access())\n\n    # Save the current image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"rgb/\"))\n\n    # Convert the camera image to grayscale\n    cam.PushFilter(sens.ChFilterGrayscale())\n\n    # Visualize the grayscaled image\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(int(image_width / 2), int(image_height / 2), \"Grayscale Image\"))\n\n    # Save the grayscaled image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"gray/\"))\n\n    # Resize the image to the specified width and height\n    cam.PushFilter(sens.ChFilterImageResize(int(image_width / 2), int(image_height / 2)))\n\n    # Access the grayscaled image buffer as R8 pixels\n    cam.PushFilter(sens.ChFilterR8Access())\n\n    # Add the camera sensor to the manager\n    manager.AddSensor(cam)\n\n    # ---------------\n    # Simulate system\n    # ---------------\n    orbit_radius = 10  # Radius of the camera orbit\n    orbit_rate = 0.5   # Rate of the camera orbit in radians per second\n    ch_time = 0.0      # Initialize simulation time\n\n    t1 = time.time()  # Record the start time of the simulation\n\n    while ch_time < end_time:\n        # Dynamically set the camera's position around the orbit\n        cam.SetOffsetPose(chrono.ChFramed(\n            chrono.ChVector3d(-orbit_radius * math.cos(ch_time * orbit_rate), -orbit_radius * math.sin(ch_time * orbit_rate), 1),\n            chrono.QuatFromAngleAxis(ch_time * orbit_rate, chrono.ChVector3d(0, 0, 1))))\n\n        # Access the RGBA8 buffer from the camera\n        rgba8_buffer = cam.GetMostRecentRGBA8Buffer()\n        if rgba8_buffer.HasData():\n            rgba8_data = rgba8_buffer.GetRGBA8Data()\n            print('RGBA8 buffer received from cam. Camera resolution: {0}x{1}'.format(rgba8_buffer.Width, rgba8_buffer.Height))\n            print('First Pixel: {0}'.format(rgba8_data[0, 0, :]))\n\n        # Update the sensor manager (render/save/filter data automatically)\n        manager.Update()\n\n        # Perform a step of dynamics simulation\n        mphysicalSystem.DoStepDynamics(step_size)\n\n        # Update the current simulation time\n        ch_time = mphysicalSystem.GetChTime()\n\n    print(\"Sim time:\", end_time, \"Wall time:\", time.time() - t1)\n\n# -----------------\n# Camera parameters\n# -----------------\n\n# Noise model attached to the sensor\nnoise_model = \"CONST_NORMAL\"  # Constant normal noise model\n\n# Camera lens model\nlens_model = sens.PINHOLE  # Pinhole lens model\n\n# Update rate in Hz\nupdate_rate = 30\n\n# Image width and height\nimage_width = 1280\nimage_height = 720\n\n# Camera's horizontal field of view\nfov = 1.408  # Horizontal field of view in radians\n\n# Lag (in seconds) between sensing and when data becomes accessible\nlag = 0\n\n# Exposure (in seconds) of each image\nexposure_time = 0\n\n# ---------------------\n# Simulation parameters\n# ---------------------\n\n# Simulation step size\nstep_size = 1e-3\n\n# Simulation end time\nend_time = 20.0\n\n# Save camera images\nsave = False\n\n# Render camera images\nvis = True\n\n# Output directory\nout_dir = \"SENSOR_OUTPUT/\"\n\n# Main function entry point\nmain()\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    ",
        "prompt_reference_document": "\n    You are a PyChrono expert tasked with evaluating a simulation script by comparing it against a reference script generated by experts. Your evaluation should consider both the accuracy of the script compared to the reference and adherence to best practices as outlined in the PyChrono API documentation.\n\n    Here is the PyChrono code you need to evaluate:\n    [The Start of Assistant’s Answer]\n    import pychrono as chrono\nimport pychrono.visualization as vis\nimport pychrono.sensor as sensor\nimport pychrono.sensor.noise as noise\nimport pychrono.sensor.visualization as vis_sensor\n\n# Initialize PyChrono\nchrono.init()\n\n# Create the world\nworld = chrono.World()\n\n# Load the triangular mesh\nmesh_path = \"your_mesh.obj\"  # Replace with your mesh file path\nmesh = chrono.Mesh.from_file(mesh_path)\n\n# Add the mesh as a fixed body\nmesh_body = chrono.Body(mesh)\nmesh_body.set_fixed()\nworld.add_body(mesh_body)\n\n# Create a camera sensor\ncamera_sensor = sensor.CameraSensor(mesh_body)\n\n# Add noise filters and visualizations\ncamera_sensor.add_noise_filter(noise.GaussianNoiseFilter(sigma=0.1))\ncamera_sensor.add_visualization(vis.ImageBuffer(width=640, height=480))\n\n# Set camera position and orientation\ncamera_sensor.set_position(chrono.Vector3(0, 0, 10))\ncamera_sensor.set_orientation(chrono.Quaternion(0, 0, 0, 1))\n\n# Create a sensor manager\nsensor_manager = sensor.SensorManager(camera_sensor)\n\n# Simulate the system\nworld.run(1000)\n\n# Print camera buffer data at each step\nfor step in range(1000):\n    # Get the camera buffer data\n    buffer_data = camera_sensor.get_buffer_data()\n\n    # Print the buffer data\n    print(f\"Step {step}: {buffer_data}\")\n\n# Clean up\nworld.destroy()\n    [The End of Assistant’s Answer]\n\n    Here is the expert-generated reference code:\n    [The Start of Reference Answer]\n    import pychrono.core as chrono\nimport pychrono.sensor as sens\n\nimport math\nimport time\n\ndef main():\n    # -----------------\n    # Create the system\n    # -----------------\n    # Initialize the Chrono physical system (non-smooth contact)\n    mphysicalSystem = chrono.ChSystemNSC()\n\n    # -----------------------------------\n    # Add a mesh to be sensed by a camera\n    # -----------------------------------\n    # Load a triangular mesh from a Wavefront .obj file\n    mmesh = chrono.ChTriangleMeshConnected()\n    mmesh.LoadWavefrontMesh(chrono.GetChronoDataFile(\"vehicle/hmmwv/hmmwv_chassis.obj\"), False, True)\n    # Scale the mesh uniformly by a factor of 2\n    mmesh.Transform(chrono.ChVector3d(0, 0, 0), chrono.ChMatrix33d(2))\n\n    # Create a visual representation of the mesh\n    trimesh_shape = chrono.ChVisualShapeTriangleMesh()\n    trimesh_shape.SetMesh(mmesh)\n    trimesh_shape.SetName(\"HMMWV Chassis Mesh\")\n    trimesh_shape.SetMutable(False)  # Set the mesh to be immutable\n\n    # Create a body to which the visual shape will be attached\n    mesh_body = chrono.ChBody()\n    mesh_body.SetPos(chrono.ChVector3d(0, 0, 0))  # Set the position of the body\n    mesh_body.AddVisualShape(trimesh_shape)  # Attach the visual shape to the body\n    mesh_body.SetFixed(True)  # Fix the body in space\n    mphysicalSystem.Add(mesh_body)  # Add the body to the physical system\n\n    # -----------------------\n    # Create a sensor manager\n    # -----------------------\n    # Initialize the sensor manager to manage all sensors in the simulation\n    manager = sens.ChSensorManager(mphysicalSystem)\n\n    # Add point lights to the scene for illumination\n    intensity = 1.0  # Set the light intensity\n    manager.scene.AddPointLight(chrono.ChVector3f(2, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(9, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(16, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddPointLight(chrono.ChVector3f(23, 2.5, 100), chrono.ChColor(intensity, intensity, intensity), 500.0)\n    manager.scene.AddAreaLight(chrono.ChVector3f(0, 0, 4), chrono.ChColor(intensity, intensity, intensity), 500.0, chrono.ChVector3f(1, 0, 0), chrono.ChVector3f(0, -1, 0))\n\n    # ------------------------------------------------\n    # Create a camera and add it to the sensor manager\n    # ------------------------------------------------\n    # Define the camera offset pose relative to the body it is attached to\n    offset_pose = chrono.ChFramed(chrono.ChVector3d(-5, 0, 2), chrono.QuatFromAngleAxis(2, chrono.ChVector3d(0, 1, 0)))\n\n    # Initialize the camera sensor\n    cam = sens.ChCameraSensor(\n        mesh_body,              # Body the camera is attached to\n        update_rate,            # Camera update rate in Hz\n        offset_pose,            # Offset pose of the camera\n        image_width,            # Image width in pixels\n        image_height,           # Image height in pixels\n        fov                     # Camera's horizontal field of view in radians\n    )\n    cam.SetName(\"Camera Sensor\")\n    cam.SetLag(lag)  # Set the lag between sensing and data accessibility\n    cam.SetCollectionWindow(exposure_time)  # Set the exposure time for the camera\n\n    # ------------------------------------------------------------------\n    # Create a filter graph for post-processing the data from the camera\n    # ------------------------------------------------------------------\n    # Apply noise model to the camera sensor based on the specified type\n    if noise_model == \"CONST_NORMAL\":\n        cam.PushFilter(sens.ChFilterCameraNoiseConstNormal(0.0, 0.02))  # Add constant normal noise\n    elif noise_model == \"PIXEL_DEPENDENT\":\n        cam.PushFilter(sens.ChFilterCameraNoisePixDep(0.02, 0.03))  # Add pixel-dependent noise\n    elif noise_model == \"NONE\":\n        # No noise model applied\n        pass\n\n    # Visualize the image before applying grayscale filter\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(image_width, image_height, \"Before Grayscale Filter\"))\n\n    # Provide host access to the RGBA8 buffer from the camera\n    cam.PushFilter(sens.ChFilterRGBA8Access())\n\n    # Save the current image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"rgb/\"))\n\n    # Convert the camera image to grayscale\n    cam.PushFilter(sens.ChFilterGrayscale())\n\n    # Visualize the grayscaled image\n    if vis:\n        cam.PushFilter(sens.ChFilterVisualize(int(image_width / 2), int(image_height / 2), \"Grayscale Image\"))\n\n    # Save the grayscaled image to a PNG file at the specified path\n    if save:\n        cam.PushFilter(sens.ChFilterSave(out_dir + \"gray/\"))\n\n    # Resize the image to the specified width and height\n    cam.PushFilter(sens.ChFilterImageResize(int(image_width / 2), int(image_height / 2)))\n\n    # Access the grayscaled image buffer as R8 pixels\n    cam.PushFilter(sens.ChFilterR8Access())\n\n    # Add the camera sensor to the manager\n    manager.AddSensor(cam)\n\n    # ---------------\n    # Simulate system\n    # ---------------\n    orbit_radius = 10  # Radius of the camera orbit\n    orbit_rate = 0.5   # Rate of the camera orbit in radians per second\n    ch_time = 0.0      # Initialize simulation time\n\n    t1 = time.time()  # Record the start time of the simulation\n\n    while ch_time < end_time:\n        # Dynamically set the camera's position around the orbit\n        cam.SetOffsetPose(chrono.ChFramed(\n            chrono.ChVector3d(-orbit_radius * math.cos(ch_time * orbit_rate), -orbit_radius * math.sin(ch_time * orbit_rate), 1),\n            chrono.QuatFromAngleAxis(ch_time * orbit_rate, chrono.ChVector3d(0, 0, 1))))\n\n        # Access the RGBA8 buffer from the camera\n        rgba8_buffer = cam.GetMostRecentRGBA8Buffer()\n        if rgba8_buffer.HasData():\n            rgba8_data = rgba8_buffer.GetRGBA8Data()\n            print('RGBA8 buffer received from cam. Camera resolution: {0}x{1}'.format(rgba8_buffer.Width, rgba8_buffer.Height))\n            print('First Pixel: {0}'.format(rgba8_data[0, 0, :]))\n\n        # Update the sensor manager (render/save/filter data automatically)\n        manager.Update()\n\n        # Perform a step of dynamics simulation\n        mphysicalSystem.DoStepDynamics(step_size)\n\n        # Update the current simulation time\n        ch_time = mphysicalSystem.GetChTime()\n\n    print(\"Sim time:\", end_time, \"Wall time:\", time.time() - t1)\n\n# -----------------\n# Camera parameters\n# -----------------\n\n# Noise model attached to the sensor\nnoise_model = \"CONST_NORMAL\"  # Constant normal noise model\n\n# Camera lens model\nlens_model = sens.PINHOLE  # Pinhole lens model\n\n# Update rate in Hz\nupdate_rate = 30\n\n# Image width and height\nimage_width = 1280\nimage_height = 720\n\n# Camera's horizontal field of view\nfov = 1.408  # Horizontal field of view in radians\n\n# Lag (in seconds) between sensing and when data becomes accessible\nlag = 0\n\n# Exposure (in seconds) of each image\nexposure_time = 0\n\n# ---------------------\n# Simulation parameters\n# ---------------------\n\n# Simulation step size\nstep_size = 1e-3\n\n# Simulation end time\nend_time = 20.0\n\n# Save camera images\nsave = False\n\n# Render camera images\nvis = True\n\n# Output directory\nout_dir = \"SENSOR_OUTPUT/\"\n\n# Main function entry point\nmain()\n\n    [The End of Reference Answer]\n\n    Use the following evaluation criteria and point deduction guidelines:\n\n    1. **Completeness (40 points total)**\n       - Compare the provided code to the reference script. Deduct **15 points** for each missing essential component (e.g., system initialization, body creation, visualization) that is present in the reference script.\n       - Deduct **10 points** if a component is present but lacks important details or is incorrectly configured compared to the reference.\n       - Deduct **5 points** for minor omissions or slight deviations from the reference script.\n\n    2. **Correctness (30 points total)**\n       - Compare the code to the reference script. Deduct **15 points** for each incorrect use of a PyChrono API that could lead to a significant change in simulation behavior.\n       - Deduct **10 points** for logical errors in the code, such as incorrect joint initialization or wrong setting of body properties, especially if the reference script does it correctly.\n       - Deduct **5 points** for minor inaccuracies or unnecessary API calls that deviate from the reference script.\n\n    3. **Code Quality (10 points total)**\n       - Evaluate the readability, structure, and documentation of the code against the reference script. Deduct **5 to 10 points** for poor readability, structure, or lack of meaningful variable names and formatting.\n       - Deduct **5 points** for insufficient comments or failure to follow documentation best practices, especially if the reference script provides better documentation.\n\n    4. **Efficiency (10 points total)**\n       - Evaluate the efficiency of the code compared to the reference script. Deduct **5 points** for each instance of unnecessary calculations, redundant code, or inefficient use of APIs that is optimized in the reference script.\n       - Deduct **3 points** for missing obvious optimization opportunities that the reference script implements.\n\n    5. **Error Handling and Robustness (5 points total)**\n       - Assess the error handling and robustness of the code. Deduct **5 points** for lack of basic error handling or failure to account for common issues that the reference script handles.\n       - Deduct **3 points** for inadequate handling of edge cases compared to the reference script.\n\n    6. **Use of Visualization Tools (5 points total)**\n       - Compare the use of visualization tools in the provided code to the reference script. Deduct **3 to 5 points** for incorrect or inadequate visualization setup as per the reference script.\n       - Deduct **2 points** for minor visualization issues, such as suboptimal lighting or incomplete setup of visual elements, compared to the reference.\n\n    Avoid position biases and ensure that the order in which the responses are presented does not influence your decision. Do not allow the length of the responses to influence your evaluation. Do not favor certain names of the assistants. Be as objective as possible.\n\n    After providing your explanation, output the final score using the following format: \"[[x]]\" where x is the score assigned to the assistant’s answer.\n\n    Reference the PyChrono API documentation provided here: # PyChrono Comprehensive API Documentation\n\n## Overview\nThis guide serves as a comprehensive reference for generating PyChrono simulations across various domains, including Finite Element Analysis (FEA), Multibody Systems (MBS), Robotics, and Vehicles. It integrates the latest API updates, class names, methods, and parameter changes, along with example simulations and pipelines for generating new simulations.\n\n## Table of Contents\n\n1. [Library Imports](#library-imports)\n2. [Contact and Collision Settings](#contact-and-collision-settings)\n3. [Visualization Settings](#visualization-settings)\n4. [Body Initialization](#body-initialization)\n5. [Joints and Links](#joints-and-links)\n6. [Simulation Loop](#simulation-loop)\n7. [Additional Utilities](#additional-utilities)\n8. [Pipeline for Generating New Simulations](#pipeline-for-generating-new-simulations)\n9. [Example Simulations](#example-simulations)\n\n---\n\n## Library Imports\n\n### Libraries and Modules Imported\n\n- **`os`**: Standard Python library for interacting with the operating system.\n- **`math`**: Standard Python library for mathematical functions.\n- **`numpy` as `np`**: Support for large, multi-dimensional arrays and matrices.\n- **`pychrono` as `chrono`**: Core module for physics-based simulation in Project Chrono.\n- **`pychrono.robot`**: Submodule for robotics-related functionalities in Project Chrono.\n- **`pychrono.irrlicht`**: Visualization module using the Irrlicht engine for rendering.\n- **`pychrono.vehicle`**: Submodule for vehicle simulations in Project Chrono.\n\n---\n\n## Contact and Collision Settings\n\n### System Initialization\n\n- **`chrono.ChSystemNSC()`**\n  - **Usage**: Initializes a system using Non-Smooth Contact (NSC) mechanics, suitable for handling large numbers of contact points with complex behaviors.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemNSC()\n    ```\n\n- **`chrono.ChSystemSMC()`**\n  - **Usage**: Utilizes Signorini-Moreau Contact (SMC) for smoother transitions during contact resolution.\n  - **Example**:\n    ```python\n    my_system = chrono.ChSystemSMC()\n    ```\n\n- **`chrono.SetChronoDataPath(path)`**\n  - **Usage**: Sets the path to Chrono's data directory, where resources like meshes, textures, and other simulation assets are stored.\n  - **Example**:\n    ```python\n    chrono.SetChronoDataPath('/path/to/data')\n    ```\n\n### Contact Materials\n\n- **`chrono.ChContactMaterialNSC()`**\n  - **Usage**: Creates a material for non-smooth contact interactions, commonly used for rigid body simulations.\n  - **Example**:\n    ```python\n    material_nsc = chrono.ChContactMaterialNSC()\n    ```\n\n- **`chrono.ChContactMaterialSMC()`**\n  - **Usage**: Suitable for smooth, soft body interactions, allowing some degree of penetration and deformation.\n  - **Example**:\n    ```python\n    material_smc = chrono.ChContactMaterialSMC()\n    ```\n\n- **`material.SetFriction(value)`**\n  - **Usage**: Defines the coefficient of friction, impacting how bodies slide against each other.\n  - **Example**:\n    ```python\n    material.SetFriction(0.5)\n    ```\n\n- **`material.SetDampingF(value)`**\n  - **Usage**: Sets the damping factor, influencing energy dissipation during contact.\n  - **Example**:\n    ```python\n    material.SetDampingF(0.1)\n    ```\n\n- **`material.SetCompliance(value)`**\n  - **Usage**: Sets compliance in the normal direction, affecting how much two bodies can penetrate each other under force.\n  - **Example**:\n    ```python\n    material.SetCompliance(0.01)\n    ```\n\n### Collision Models\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(envelope)`**\n  - **Usage**: Sets a global envelope margin around collision shapes to prevent missed collisions due to numerical inaccuracies.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedEnvelope(0.01)\n    ```\n\n- **`chrono.ChCollisionModel.SetDefaultSuggestedMargin(margin)`**\n  - **Usage**: Sets the default margin between collision shapes, enhancing stability and accuracy of collision detection.\n  - **Example**:\n    ```python\n    chrono.ChCollisionModel.SetDefaultSuggestedMargin(0.005)\n    ```\n\n---\n\n## Visualization Settings\n\n### Visualization System Setup\n\n- **`chronoirr.ChVisualSystemIrrlicht()`**\n  - **Usage**: Creates an Irrlicht-based visualization system to render and interact with the simulation.\n  - **Example**:\n    ```python\n    vis = chronoirr.ChVisualSystemIrrlicht()\n    ```\n\n- **`vis.AttachSystem(sys)`**\n  - **Usage**: Links the physical system to the visualization, enabling real-time graphical representation.\n  - **Example**:\n    ```python\n    vis.AttachSystem(my_system)\n    ```\n\n- **`vis.SetWindowSize(width, height)`**\n  - **Usage**: Configures the size of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowSize(1024, 768)\n    ```\n\n- **`vis.SetWindowTitle(title)`**\n  - **Usage**: Sets the title of the visualization window.\n  - **Example**:\n    ```python\n    vis.SetWindowTitle('Simulation Window')\n    ```\n\n- **`vis.Initialize()`**\n  - **Usage**: Prepares the visualization system, including setting up cameras and lighting.\n  - **Example**:\n    ```python\n    vis.Initialize()\n    ```\n\n- **`vis.AddLogo(path)`**\n  - **Usage**: Adds a logo to the window, often used for branding or identification.\n  - **Example**:\n    ```python\n    vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))\n    ```\n\n- **`vis.AddSkyBox()`**\n  - **Usage**: Adds a skybox to the environment, creating a background that can simulate an open environment or other settings.\n  - **Example**:\n    ```python\n    vis.AddSkyBox()\n    ```\n\n- **`vis.AddCamera(position)`**\n  - **Usage**: Positions a camera in the scene, crucial for setting the perspective from which the simulation is viewed.\n  - **Example**:\n    ```python\n    vis.AddCamera(chrono.ChVector3d(0, 3, 6))\n    ```\n\n- **`vis.AddTypicalLights()`**\n  - **Usage**: Adds standard lighting to the scene, which is essential for visibility and realism.\n  - **Example**:\n    ```python\n    vis.AddTypicalLights()\n    ```\n\n### Visual Shapes\n\n- **`chrono.ChVisualShapeBox(size)`**\n  - **Usage**: Defines a box shape for visualization.\n  - **Example**:\n    ```python\n    box_shape = chrono.ChVisualShapeBox(chrono.ChVector3d(1, 1, 1))\n    ```\n\n- **`chrono.ChVisualShapeSphere(radius)`**\n  - **Usage**: Defines a sphere for visualization, with radius controlling the size.\n  - **Example**:\n    ```python\n    sphere_shape = chrono.ChVisualShapeSphere(1.0)\n    ```\n\n- **`chrono.ChVisualShapeCylinder(radius, height)`**\n  - **Usage**: Defines a cylindrical shape with specified radius and height.\n  - **Example**:\n    ```python\n    cylinder_shape = chrono.ChVisualShapeCylinder(0.5, 2.0)\n    ```\n\n- **`shape.SetColor(color)`**\n  - **Usage**: Sets the color of a visual shape using `chrono.ChColor`.\n  - **Example**:\n    ```python\n    shape.SetColor(chrono.ChColor(1, 0, 0))  # Red color\n    ```\n\n---\n\n## Body Initialization\n\n### General Body Initialization\n\n- **`chrono.ChBody()`**\n  - **Usage**: Basic rigid body with default properties, customizable through additional settings.\n  - **Example**:\n    ```python\n    body = chrono.ChBody()\n    ```\n\n- **`chrono.ChBodyEasySphere(radius, density, visualize, collision, material)`**\n  - **Usage**: Quickly creates a sphere with specified properties, ideal for fast setup of simulations.\n  - **Example**:\n    ```python\n    sphere = chrono.ChBodyEasySphere(1.0, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyEasyBox(lengthX, lengthY, lengthZ, density, visualize, collision, material)`**\n  - **Usage**: Similar to `ChBodyEasySphere` but for box-shaped bodies.\n  - **Example**:\n    ```python\n    box = chrono.ChBodyEasyBox(1, 1, 1, 1000, True, True, material)\n    ```\n\n- **`chrono.ChBodyAuxRef()`**\n  - **Usage**: Advanced rigid body type that includes auxiliary reference frames for more complex setups.\n  - **Example**:\n    ```python\n    body_aux = chrono.ChBodyAuxRef()\n    ```\n\n- **`sys.Add(body)`**\n  - **Usage**: Adds a body to the simulation, making it part of the dynamic system.\n  - **Example**:\n\n\n    ```python\n    sys.Add(body)\n    ```\n\n### Body Properties\n\n- **`body.SetPos(position)`**\n  - **Usage**: Sets the body's initial position in the simulation world, crucial for setting up the starting configuration.\n  - **Example**:\n    ```python\n    body.SetPos(chrono.ChVector3d(0, 0, 0))\n    ```\n\n- **`body.SetMass(mass)`**\n  - **Usage**: Defines the mass, influencing the body's response to forces.\n  - **Example**:\n    ```python\n    body.SetMass(100)\n    ```\n\n- **`body.SetInertiaXX(inertia)`**\n  - **Usage**: Sets the inertia tensor, affecting rotational dynamics.\n  - **Example**:\n    ```python\n    body.SetInertiaXX(chrono.ChVector3d(10, 10, 10))\n    ```\n\n- **`body.SetFixed(fixed)`**\n  - **Usage**: Fixes the body in space, preventing it from moving or rotating.\n  - **Example**:\n    ```python\n    body.SetFixed(True)\n    ```\n\n- **`body.EnableCollision(enable)`**\n  - **Usage**: Toggles collision detection, crucial for interactions with other bodies.\n  - **Example**:\n    ```python\n    body.EnableCollision(True)\n    ```\n\n---\n\n## Joints and Links\n\n### Revolute Joints\n\n- **`chrono.ChLinkLockRevolute()`**\n  - **Usage**: Creates a revolute joint that allows rotational movement around a single axis.\n  - **Example**:\n    ```python\n    rev_joint = chrono.ChLinkLockRevolute()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Connects two bodies with the joint, aligning it with the specified frame.\n  - **Example**:\n    ```python\n    rev_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Prismatic Joints\n\n- **`chrono.ChLinkLockPrismatic()`**\n  - **Usage**: Allows relative linear motion along one axis between two bodies.\n  - **Example**:\n    ```python\n    pris_joint = chrono.ChLinkLockPrismatic()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the prismatic joint, typically used for slider mechanisms.\n  - **Example**:\n    ```python\n    pris_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Spherical Joints\n\n- **`chrono.ChLinkLockSpherical()`**\n  - **Usage**: Allows full rotational movement around a point, often used for ball-and-socket connections.\n  - **Example**:\n    ```python\n    spher_joint = chrono.ChLinkLockSpherical()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Establishes the joint, enabling spherical rotation without linear motion.\n  - **Example**:\n    ```python\n    spher_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Universal Joints\n\n- **`chrono.ChLinkUniversal()`**\n  - **Usage**: Allows rotation around two perpendicular axes, useful for flexible couplings.\n  - **Example**:\n    ```python\n    univ_joint = chrono.ChLinkUniversal()\n    ```\n\n- **`joint.Initialize(body1, body2, frame)`**\n  - **Usage**: Configures the universal joint, ensuring free rotation on the connected axes.\n  - **Example**:\n    ```python\n    univ_joint.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n### Motor Joints\n\n- **`chrono.ChLinkMotorRotationSpeed()`**\n  - **Usage**: Controls the rotational speed between two bodies.\n  - **Example**:\n    ```python\n    motor = chrono.ChLinkMotorRotationSpeed()\n    ```\n\n- **`motor.Initialize(body1, body2, frame)`**\n  - **Usage**: Sets up the motor joint, which is then controlled by defining speed functions.\n  - **Example**:\n    ```python\n    motor.Initialize(body1, body2, chrono.ChCoordsysD(position, rotation))\n    ```\n\n- **`motor.SetSpeedFunction(func)`**\n  - **Usage**: Defines the speed control for the motor, allowing for dynamic speed adjustments during simulation.\n  - **Example**:\n    ```python\n    motor.SetSpeedFunction(chrono.ChFunction_Const(1.0))  # Constant speed\n    ```\n\n---\n\n## Simulation Loop\n\n### Execution\n\n- **`sys.DoStepDynamics(time_step)`**\n  - **Usage**: Advances the simulation by the specified time step, calculating new positions, velocities, and forces.\n  - **Example**:\n    ```python\n    sys.DoStepDynamics(0.01)\n    ```\n\n- **`vis.Run()`**\n  - **Usage**: Checks if the visualization should continue running, essential for loop control.\n  - **Example**:\n    ```python\n    while vis.Run():\n        ...\n    ```\n\n- **`vis.BeginScene()`**\n  - **Usage**: Begins rendering a new frame, preparing the scene for updates.\n  - **Example**:\n    ```python\n    vis.BeginScene()\n    ```\n\n- **`vis.Render()`**\n  - **Usage**: Renders the current state of the scene, displaying all visual elements.\n  - **Example**:\n    ```python\n    vis.Render()\n    ```\n\n- **`vis.EndScene()`**\n  - **Usage**: Ends the frame, completing the rendering cycle.\n  - **Example**:\n    ```python\n    vis.EndScene()\n    ```\n\n---\n\n## Additional Utilities\n\n### Contact Reporting and Callbacks\n\n- **`chrono.ReportContactCallback`**\n  - **Usage**: Base class for creating callbacks that report detailed contact information between bodies.\n\n- **`OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, cforce, ctorque, modA, modB)`**\n  - **Usage**: Callback method that logs or processes contact details such as contact points, forces, and torques.\n\n### Miscellaneous\n\n- **`chrono.GetChronoDataFile(filename)`**\n  - **Usage**: Retrieves the full path to a data file, often used for loading assets.\n  - **Example**:\n    ```python\n    path = chrono.GetChronoDataFile('somefile.dat')\n    ```\n\n- **`sys.GetNumContacts()`**\n  - **Usage**: Returns the number of contacts currently detected in the system, useful for debugging and analysis.\n  - **Example**:\n    ```python\n    num_contacts = sys.GetNumContacts()\n    ```\n\n- **`sys.GetContactContainer.ReportAllContacts(callback)`**\n  - **Usage**: Reports all detected contacts using a provided callback, allowing for detailed custom processing.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().ReportAllContacts(my_rep)\n    ```\n\n- **`sys.GetContactContainer.RegisterAddContactCallback(callback)`**\n  - **Usage**: Registers a callback for modifying contact properties as they are added.\n  - **Example**:\n    ```python\n    sys.GetContactContainer().RegisterAddContactCallback(my_callback)\n    ```\n\n---\n\n## Pipeline for Generating New Simulations\n\n1. **Define the Simulation Requirements**\n   - Specify the type of simulation, object properties, forces, constraints, and visualizations needed.\n\n2. **Generate the Initial Code Snippet**\n   - Use prompt engineering to generate the initial PyChrono code snippet.\n\n3. **Validate the Generated Code**\n   - Ensure that the generated code aligns with the latest API changes and runs correctly.\n\n4. **Add Detailed Comments and Documentation**\n   - Include comments in the code to explain each step and function used.\n\n5. **Run the Simulation**\n   - Execute the simulation and verify the results.\n\n6. **Iterate and Refine**\n   - Make necessary adjustments to the code based on the simulation results and rerun until the desired outcome is achieved.\n\n---\n\n## Example Simulations\n\n### FEA Example: Beam Simulation\n\n```python\nsys = chrono.ChSystemSMC()\nmesh = fea.ChMesh()\nmsection = fea.ChBeamSectionEulerAdvanced()\nmsection.SetAsRectangularSection(beam_wy, beam_wz)\nmsection.SetYoungModulus(0.01e9)\nmsection.SetShearModulus(0.01e9 * 0.3)\nmsection.SetRayleighDamping(0.000)\nhnode1 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(0, 0, 0)))\nhnode2 = fea.ChNodeFEAxyzrot(chrono.ChFramed(chrono.ChVector3d(beam_L, 0, 0)))\nmesh.AddNode(hnode1)\nmesh.AddNode(hnode2)\nbelement1 = fea.ChElementBeamEuler()\nbelement1.SetNodes(hnode1, hnode2)\nbelement1.SetSection(msection)\nmesh.AddElement(belement1)\n```\n\n### MBS Example: Shaking Table Simulation\n\n```python\nsys = chrono.ChSystemNSC()\nsys.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)\nbody_table = chrono.ChBody()\nbody_table.SetPos(chrono.ChVector3d(0, -size_table_y / 2, 0))\nbody_table_shape = chrono.ChVisualShapeBox(size_table_x, size_table_y, size_table_z)\nbody_table.AddVisualShape(body_table_shape)\nsys.Add(body_table)\nlink_shaker =\n\n chrono.ChLinkLockLock()\nlink_shaker.Initialize(body_table, body_floor, chrono.ChFramed())\nsys.Add(link_shaker)\nmfunY = chrono.ChFunctionSine(0.001, 1.5)\nlink_shaker.SetMotionY(mfunY)\n```\n\n### Robotics Example: RoboSimian Initialization\n\n```python\nsys = chrono.ChSystemSMC()\nrobot = robosimian.RoboSimian(sys, True, True)\nrobot.Initialize(chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QuatFromAngleX(chrono.CH_PI)))\ndriver = robosimian.RS_Driver(..., ..., ..., True)\nrobot.SetDriver(driver)\n```\n\n### Vehicle Example: ARTcar Simulation\n\n```python\ncar = veh.ARTcar()\ncar.SetContactMethod(contact_method)\ncar.SetChassisCollisionType(chassis_collision_type)\ncar.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))\ncar.Initialize()\nterrain = veh.RigidTerrain(car.GetSystem())\npatch = terrain.AddPatch(patch_mat, chrono.ChCoordsysd(chrono.ChVector3d(0, 0, 0), chrono.QUNIT), terrainLength, terrainWidth)\nterrain.Initialize()\n```\n\n---\n\nThis comprehensive documentation captures all key APIs, functions, and parameters for setting up and running simulations with PyChrono, ensuring that your simulations are accurate, up-to-date, and leverage the latest features of the PyChrono library.\n\n    Provide the evaluated score and a brief explanation of the deductions below:\n    "
    }
}
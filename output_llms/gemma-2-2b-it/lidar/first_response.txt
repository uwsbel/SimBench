```python
import pychrono as chrono
import pychrono.visualization as vis
import pychrono.sensor_manager as sensor_manager
import numpy as np

# Initialize PyChrono
chrono.init()

# Create a new Chrono scene
scene = chrono.Scene()

# Load the triangular mesh
mesh_file = "your_mesh.obj"  # Replace with your mesh file path
mesh = chrono.Mesh.from_file(mesh_file)

# Create a fixed body
body = chrono.Body(mesh)
body.set_mass(1.0)  # Adjust mass as needed
body.set_inertia(chrono.Inertia(mesh.get_vertices(), mesh.get_faces()))

# Add the body to the scene
scene.add_body(body)

# Create a lidar sensor
lidar = sensor_manager.LidarSensor(
    sensor_manager.LidarSensorType.LIDAR_TYPE_SCANNER,
    # Adjust sensor parameters as needed
    # ...
)

# Add the lidar to the scene
scene.add_sensor(lidar)

# Set the lidar's initial position and orientation
lidar.set_position(chrono.Vector3(0, 0, 0))  # Adjust position as needed
lidar.set_orientation(chrono.Quaternion(0, 0, 0, 1))  # Adjust orientation as needed

# Set the lidar's orbit parameters
orbit_radius = 1.0  # Adjust orbit radius as needed
orbit_altitude = 1.0  # Adjust orbit altitude as needed

# Create a simulation loop
for step in range(1000):
    # Update the lidar's position in orbit
    lidar.set_position(chrono.Vector3(
        orbit_radius * np.cos(step * 2 * np.pi / 1000),
        orbit_altitude,
        orbit_radius * np.sin(step * 2 * np.pi / 1000),
    ))

    # Print lidar buffer data
    print(lidar.get_buffer())

    # Update the simulation
    scene.update()

# Render the scene
vis.render(scene)

# Clean up
scene.clear()
vis.clear()
chrono.shutdown()
```

**Explanation:**

1. **Initialization:**
   - Import necessary libraries.
   - Initialize PyChrono.
   - Create a new Chrono scene.

2. **Mesh Loading:**
   - Load the triangular mesh from the `.obj` file using `chrono.Mesh.from_file()`.

3. **Body Creation:**
   - Create a `Body` object from the loaded mesh.
   - Set the body's mass and inertia.

4. **Lidar Sensor:**
   - Create a `LidarSensor` object.
   - Configure the sensor type, noise filters, visualization, and saving options.

5. **Lidar Placement:**
   - Set the lidar's initial position and orientation.
   - Define the lidar's orbit parameters (radius and altitude).

6. **Simulation Loop:**
   - Iterate through a specified number of simulation steps.
   - Update the lidar's position in orbit.
   - Print the lidar's buffer data at each step.
   - Update the simulation using `scene.update()`.

7. **Visualization:**
   - Render the scene using `vis.render()`.

8. **Cleanup:**
   - Clear the scene and visualization.
   - Shutdown PyChrono.

**Customization:**

- Replace `"your_mesh.obj"` with the path to your mesh file.
- Adjust the lidar parameters (position, orientation, orbit parameters) as needed.
- Modify the simulation loop to control the number of steps and other parameters.
- Customize the noise filters, visualizations, and saving options for the lidar sensor.



This script provides a basic framework for simulating a lidar sensor around a fixed body. You can further enhance it by adding more complex physics, sensor data processing, and visualization techniques.
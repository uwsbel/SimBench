```python
import pychrono as chrono
import pychrono.robot as turtlebot
import math

# Create Chrono system
system = chrono.ChSystemNSC()
system.SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)
system.SetGravitationalAcceleration(chrono.ChVector3d(0, 0, -9.81))  # Set gravity in negative Z direction

# Create ground body as terrain plane
ground = chrono.ChBodyEasyBox(20, 20, 1, 1000, True, True)  # Create a box with dimensions 20x20x1
ground.SetPos(chrono.ChVector3d(0, 0, -1))  # Position the ground at Z = -1
ground.SetFixed(True)  # Fix the ground in place
ground.GetVisualShape(0).SetTexture(chrono.GetChronoDataFile("textures/concrete.jpg"))  # Set texture for the ground
system.Add(ground)  # Add ground to the system

# Create Turtlebot robot
robot = turtlebot.TurtleBot(system)  # Instantiate TurtleBot
robot.Initialize(chrono.ChFramed(chrono.ChVector3d(0, 0, 0.5), chrono.ChQuaterniond(1, 0, 0, 0)))  # Initialize robot position and orientation

# Create real-time visualization
vis = chrono.ChVisualSystemIrrlicht()  # Create Irrlicht visualization system
vis.AttachSystem(system)  # Attach Chrono system to visualization
vis.SetWindowSize(1280, 720)  # Set window size
vis.SetWindowTitle('Turtlebot Robot - Rigid terrain')  # Set window title
vis.Initialize()  # Initialize visualization
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))  # Add logo to visualization
vis.AddSkyBox()  # Add skybox
vis.AddCamera(chrono.ChVector3d(0, 2.5, 1.5), chrono.ChVector3d(0, 0, 0))  # Add camera with specific position and target
vis.AddTypicalLights()  # Add typical lights

# Set simulation time step
time_step = 1e-3

# Simulation loop
time = 0
while vis.Run():
    time += time_step  # Increment simulation time

    # Control robot motors
    if time < 2.0:
        robot.SetMotorSpeed(0, 0)  # Stop robot
    elif time < 4.0:
        robot.SetMotorSpeed(1.0, 0)  # Turn right
    elif time < 6.0:
        robot.SetMotorSpeed(0, 1.0)  # Turn left
    else:
        robot.SetMotorSpeed(0, 0)  # Stop robot

    # Update robot and render
    robot.Update()
    vis.BeginScene()  # Begin scene
    vis.Render()  # Render scene
    vis.EndScene()  # End scene
    system.DoStepDynamics(time_step)  # Perform simulation step with specified time step

```
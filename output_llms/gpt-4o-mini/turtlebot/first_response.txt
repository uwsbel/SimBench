Here's a Python script that sets up a PyChrono simulation with a Turtlebot robot on a rigid terrain, following your instructions. This script initializes the PyChrono environment, adds the necessary components, and implements a simulation loop with real-time visualization using Irrlicht.

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr

# Initialize the Chrono system
chrono.ChSystemNSC()

# Set gravity
chrono.ChSystemNSC.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Create the ground body (rigid terrain)
ground = chrono.ChBody()
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
ground.GetMaterialSurface().SetFriction(0.5)
chrono.ChSystemNSC.Add(ground)

# Create the Turtlebot robot
turtlebot = chrono.ChBody()
turtlebot.SetMass(1.0)  # Set mass of the Turtlebot
turtlebot.SetPos(chrono.ChVectorD(0, 0.1, 0))  # Initial position
turtlebot.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))  # Initial orientation (no rotation)
turtlebot.GetMaterialSurface().SetFriction(0.5)
chrono.ChSystemNSC.Add(turtlebot)

# Create wheels and attach them to the Turtlebot
wheel_radius = 0.1
wheel_width = 0.05

# Create left wheel
left_wheel = chrono.ChBody()
left_wheel.SetMass(0.1)
left_wheel.SetPos(chrono.ChVectorD(-0.15, 0.1, 0))
left_wheel.GetMaterialSurface().SetFriction(0.5)
chrono.ChSystemNSC.Add(left_wheel)

# Create right wheel
right_wheel = chrono.ChBody()
right_wheel.SetMass(0.1)
right_wheel.SetPos(chrono.ChVectorD(0.15, 0.1, 0))
right_wheel.GetMaterialSurface().SetFriction(0.5)
chrono.ChSystemNSC.Add(right_wheel)

# Create a visualization with Irrlicht
application = chronoirr.ChIrrApp(chrono.ChSystemNSC, "Turtlebot Simulation", chronoirr.dimension2d(800, 600))
application.AddTypicalSky()
application.AddTypicalLights()
application.AddTypicalCamera(chrono.ChVectorD(0, 1, 3), chrono.ChVectorD(0, 0.1, 0))

# Set up the simulation loop
time_step = 0.01
current_time = 0.0
turn_left = False
turn_right = False

while application.GetDevice().run():
    # Update the simulation
    chrono.ChSystemNSC.DoStepDynamics(time_step)
    
    # Control motors for left and right turns
    if current_time < 2.0:
        # Move forward
        left_wheel.SetPos(left_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.1))
        right_wheel.SetPos(right_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.1))
    elif 2.0 <= current_time < 4.0:
        # Turn left
        left_wheel.SetPos(left_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.05))
        right_wheel.SetPos(right_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.15))
    elif 4.0 <= current_time < 6.0:
        # Turn right
        left_wheel.SetPos(left_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.15))
        right_wheel.SetPos(right_wheel.GetPos() + chrono.ChVectorD(0, 0, 0.05))
    else:
        # Stop
        left_wheel.SetPos(left_wheel.GetPos())
        right_wheel.SetPos(right_wheel.GetPos())

    # Update the current time
    current_time += time_step

    # Render the scene
    application.DrawAll()

# Clean up
application.GetDevice().drop()
```

### Explanation:
1. **Chrono System Initialization**: The script initializes the Chrono system and sets gravity.
2. **Ground Body**: A rigid terrain is created as a fixed body.
3. **Turtlebot Initialization**: The Turtlebot is created with a specified mass, position, and orientation.
4. **Wheels**: Two wheels are created and added to the simulation.
5. **Irrlicht Visualization**: The script sets up a visualization window with a sky, lights, and a camera.
6. **Simulation Loop**: The loop updates the simulation at each timestep, controlling the Turtlebot's movement based on the specified times for forward motion, left turns, and right turns.
7. **Rendering**: The scene is rendered in each iteration of the loop.

Make sure you have the PyChrono library installed and configured correctly to run this script. Adjust the parameters as needed for your specific simulation requirements.
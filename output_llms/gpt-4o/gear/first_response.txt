Sure, I'll provide you with a Python script that sets up a PyChrono simulation for an epicyclic gear system. This script will initialize the PyChrono environment, create the necessary physical systems and objects, and visualize the setup using the Irrlicht visualization system.

Here's the script:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')  # Set the path to the Chrono data directory

# Create the physical system
system = chrono.ChSystemNSC()

# Create a fixed truss
truss = chrono.ChBody()
truss.SetBodyFixed(True)
system.Add(truss)

# Create a rotating bar
bar = chrono.ChBodyEasyBox(1, 0.1, 0.1, 1000, True, True)
bar.SetPos(chrono.ChVectorD(0, 0, 0))
system.Add(bar)

# Create two gears
gear1 = chrono.ChBodyEasyCylinder(0.2, 0.05, 1000, True, True)
gear1.SetPos(chrono.ChVectorD(0.5, 0, 0))
system.Add(gear1)

gear2 = chrono.ChBodyEasyCylinder(0.1, 0.05, 1000, True, True)
gear2.SetPos(chrono.ChVectorD(0.7, 0, 0))
system.Add(gear2)

# Create revolute joints to connect the gears to the truss
joint1 = chrono.ChLinkLockRevolute()
joint1.Initialize(gear1, truss, chrono.ChCoordsysD(chrono.ChVectorD(0.5, 0, 0)))
system.Add(joint1)

joint2 = chrono.ChLinkLockRevolute()
joint2.Initialize(gear2, truss, chrono.ChCoordsysD(chrono.ChVectorD(0.7, 0, 0)))
system.Add(joint2)

# Create a gear motor to enforce constant rotation speed on gear1
motor = chrono.ChLinkMotorRotationSpeed()
motor.Initialize(gear1, truss, chrono.ChFrameD(chrono.ChVectorD(0.5, 0, 0)))
motor.SetSpeedFunction(chrono.ChFunction_Const(chrono.CH_C_PI / 4))  # Constant speed of pi/4 rad/s
system.Add(motor)

# Create a revolute joint to connect the bar to the truss
joint_bar = chrono.ChLinkLockRevolute()
joint_bar.Initialize(bar, truss, chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0)))
system.Add(joint_bar)

# Visualization with Irrlicht
application = chronoirr.ChIrrApp(system, 'Epicyclic Gear System', chronoirr.dimension2du(800, 600))

application.AddTypicalSky()
application.AddTypicalCamera(chronoirr.vector3df(1, 1, 1))
application.AddTypicalLights()

# Add materials and lighting
material = chrono.ChMaterialSurfaceNSC()
material.SetFriction(0.5)
material.SetRestitution(0.1)

bar.SetMaterialSurface(material)
gear1.SetMaterialSurface(material)
gear2.SetMaterialSurface(material)

# Simulation loop
application.AssetBindAll()
application.AssetUpdateAll()

while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()
```

### Explanation:
1. **Initialize the PyChrono environment and core components:**
   - `chrono.SetChronoDataPath()` sets the path to the Chrono data directory.
   - `system = chrono.ChSystemNSC()` creates the physical system.

2. **Add the required physical systems and objects:**
   - A fixed truss is created and added to the system.
   - A rotating bar and two gears are created and positioned.
   - Revolute joints are used to connect the gears to the truss.
   - A gear motor is added to enforce a constant rotation speed on one of the gears.
   - A revolute joint connects the bar to the truss.

3. **Set necessary default parameters such as positions, forces, and interactions:**
   - Positions for the bar and gears are set.
   - A constant speed function is used for the gear motor.
   - Material properties are set for the bar and gears.

4. **Visualization using the Irrlicht visualization system:**
   - The Irrlicht application is set up with typical sky, camera, and lights.
   - The simulation loop runs, updating and drawing the scene.

Make sure to replace `'/path/to/chrono/data/'` with the actual path to your Chrono data directory.
Here's a Python script that follows the given instructions:

```python
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import rospy
from std_msgs.msg import Int32
import numpy as np

# Initialize PyChrono environment
chrono.SetChronoDataPath('/usr/local/share/chrono/data/')

# Initialize ROS node
rospy.init_node('pychrono_simulation')

# Create a Chrono system
sys = chrono.ChSystemNSC()

# Set gravitational acceleration
sys.Set_G_acc(chrono.ChVectorD(0, -9.81, 0))

# Add a fixed floor
floor_mat = chrono.ChMaterialSurfaceNSC()
floor_mat.SetFriction(0.5)
floor_mat.SetRestitution(0.5)
floor_body = chrono.ChBodyEasyBox(sys,  # parent system
                                  10, 10, 1,  # dimensions
                                  1000,  # density
                                  True,  # fixed object
                                  floor_mat)  # material
sys.Add(floor_body)

# Add a movable box
box_mat = chrono.ChMaterialSurfaceNSC()
box_mat.SetFriction(0.5)
box_mat.SetRestitution(0.5)
box_body = chrono.ChBodyEasyBox(sys,  # parent system
                                1, 1, 1,  # dimensions
                                1000,  # density
                                False,  # non-fixed object
                                box_mat)  # material
sys.Add(box_body)

# Create a custom ROS handler
class CustomROSHAndler(chrono.ChROSHAndler):
    def __init__(self):
        super().__init__()
        self.pub = rospy.Publisher('custom_topic', Int32, queue_size=10)

    def Advance(self, time):
        msg = Int32()
        msg.data = int(time * 1000)  # milliseconds
        self.pub.publish(msg)

# Create a ROS manager
ros_manager = chrono.ChROSMAndler(sys)

# Add clock handler
ros_manager.AddHandler(chrono.ChROSClockHandler())

# Add body handler
ros_manager.AddHandler(chrono.ChROSBodyHandler())

# Add transform handler
ros_manager.AddHandler(chrono.ChROSTransformHandler())

# Add custom handler
ros_manager.AddHandler(CustomROSHAndler())

# Simulation loop
time_step = 0.01
while not rospy.is_shutdown():
    # Advance the system
    sys.DoStepDynamics(time_step)

    # Update ROS communication
    ros_manager.Advance(sys.GetChTime())

    # Maintain real-time execution
    rospy.sleep(time_step)
```

This script creates a PyChrono simulation with a fixed floor and a movable box, integrated with ROS. It sets up a custom ROS handler to publish integer messages to a specified topic and configures the ROS manager with clock, body, and transform handlers. The simulation loop advances the system, updates ROS communication, and maintains real-time execution.
Here's a sample PyChrono script based on your instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.irrlicht as chronoirr
import pychrono.sensor as sens

# Initialize the PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create the ground body
ground = chrono.ChBodyEasyBox(my_system, 10, 1, 10, 1000, True, True)
ground.SetPos(chrono.ChVectorD(0, -1, 0))
my_system.Add(ground)

# Create a Chrono::Engine body from a Wavefront .obj file
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefrontMesh('/path/to/mesh.obj')
body = chrono.ChBodyEasyMesh(my_system, mesh, 1000, True, True, True, True)
body.SetBodyFixed(True)
my_system.Add(body)

# Create a sensor manager
manager = sens.ChSensorManager(my_system)

# Create a lidar sensor
lidar = sens.ChLidarSensor(
    my_system,              # Physical system
    100,                    # Scanning rate
    chrono.ChVectorD(0, 0, 0),  # Offset position
    chrono.ChVectorD(0, 0, 1),  # Direction
    0.1,                    # Beam length
    0.05,                   # Beam width
    100,                    # Number of horizontal samples
    2,                      # Number of vertical samples
    -chrono.CH_C_PI / 4,    # Vertical FOV
    0                       # Horizontal offset
)

# Add noise filter to the lidar
noise = sens.ChNoiseNormal(0, 0.01)
lidar.PushFilter(noise)

# Add visualization to the lidar
visual = sens.ChLidarVisualizePoints(chrono.ChVectorD(1, 0, 0), 2)
lidar.PushFilter(visual)

# Add data saving to the lidar
save = sens.ChLidarSaveBuffer()
lidar.PushFilter(save)

# Add the lidar to the sensor manager
manager.AddSensor(lidar)

# Create an Irrlicht application
myapplication = chronoirr.ChIrrApp(my_system, 'PyChrono Simulation', chronoirr.dimension2du(800, 600))

# Set up the simulation loop
while myapplication.GetDevice().run():
    # Update the lidar position
    lidar.SetOffsetPosition(chrono.ChVectorD(2 * chrono.CH_C_PI * my_system.GetChTime() * 0.1, 0, 0))

    # Simulate the system
    my_system.DoStepDynamics(chrono.ChTimeStep(1e-3))

    # Print the lidar buffer data
    buffer = save.GetBuffer()
    print('Lidar buffer data:')
    for point in buffer:
        print(point)

    # Draw the 3D scene
    myapplication.BeginScene()
    myapplication.DrawAll()
    myapplication.EndScene()
```

This script creates a PyChrono simulation with a triangular mesh from a Wavefront .obj file, adds a lidar sensor to the body using a sensor manager, applies noise filters, visualizations, and saving options to the lidar data, simulates the system while dynamically updating the lidar's position in an orbit around the mesh, and prints lidar buffer data at each simulation step. 

Make sure to replace `'/path/to/chrono/data/'` and `'/path/to/mesh.obj'` with the actual paths to your Chrono data directory and Wavefront .obj file, respectively. 

Please note that running this script requires the PyChrono library and its dependencies to be installed.
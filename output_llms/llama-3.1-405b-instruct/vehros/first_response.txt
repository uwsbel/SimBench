Here's a sample PyChrono simulation script based on the provided instructions:

```python
# Import necessary modules
import pychrono.core as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as irr
import rospy
from std_msgs.msg import Float64

# Initialize PyChrono environment
chrono.SetChronoDataPath('/path/to/chrono/data/')

# Create a Chrono::Engine physical system
sys = chrono.ChSystemNSC()

# Create a vehicle (HMMWV)
vehicle = veh.ChPart('HMMWV')
vehicle.SetContactMethod(chrono.ChMaterialSurface::NSC)
vehicle.SetChassisMass(2000)
vehicle.SetEngineType(veh.ChEngine::SHAFT)
vehicle.SetTireModel(veh.ChTire::RIGID)
vehicle.SetTireRadius(0.4)
vehicle.SetTireWidth(0.2)
sys.Add(vehicle)

# Create a terrain
terrain = veh.ChTerrain()
terrain.SetFriction(0.7)
terrain.SetRestitution(0.2)
sys.Add(terrain)

# Create a driver system
driver = veh.ChDriver()
driver.Initialize()
sys.Add(driver)

# Initialize ROS
rospy.init_node('pychrono_simulation')

# Register ROS handlers
def clock_cb(msg):
    sys.SetTime(msg.data)

def driver_input_cb(msg):
    driver.SetSteering(msg.data)

def vehicle_state_cb(msg):
    vehicle.SetVehicleState(msg.data)

rospy.Subscriber('/clock', Float64, clock_cb)
rospy.Subscriber('/driver_input', Float64, driver_input_cb)
rospy.Subscriber('/vehicle_state', Float64, vehicle_state_cb)

# Create a ROS manager
ros_manager = veh.ChRosManager()
ros_manager.Initialize(sys, rospy)

# Simulation loop
while rospy.is_shutdown() is False:
    # Synchronize systems
    sys.Synchronize()

    # Advance simulation
    sys.DoStepDynamics(0.01)

    # Update ROS manager
    ros_manager.Update()

    # Publish data
    ros_manager.Publish()
```

This script creates a PyChrono simulation with an HMMWV vehicle, a terrain, and a driver system. It also initializes ROS and registers handlers for clock synchronization, driver inputs, and vehicle state. The simulation loop advances the vehicle, terrain, and driver systems at each timestep and updates the ROS manager for data publishing.

Note that this script assumes that the necessary PyChrono data files are located in the specified directory (`/path/to/chrono/data/`). You may need to modify this path depending on your PyChrono installation.

Also, this script uses placeholder values for the vehicle and terrain parameters. You should replace these with the actual values specified in the instructions.

Finally, this script assumes that the ROS topics for clock synchronization, driver inputs, and vehicle state are already set up and publishing data. You may need to modify the script to match your specific ROS setup.
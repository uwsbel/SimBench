Here is the Python code that implements the specified PyChrono simulation:
```python
import pychrono.core as chrono
import pychrono.sensor as chrono_sensor
import pychrono.irrlicht as chrono_irrlicht
import numpy as np

# Initialize the PyChrono environment and core components
chrono.SetChronoDataPath('./data/')
system = chrono.ChSystemNSC()

# Create the simulation scene and visualization
scene = chrono_irrlicht.ChVisualSystemIrrlicht()
scene.SetWindowSize(800, 600)
scene.SetWindowTitle('PyChrono Lidar Simulation')
scene.SetLogoFile('data/logo.png')
scene.SetCameraDistance(2.0)
scene.SetCameraAzimuth(0.0)
scene.SetCameraElevation(0.0)

# Load the triangular mesh from a Wavefront .obj file
mesh = chrono.ChTriangleMesh()
mesh.LoadWavefrontMesh('data/mesh.obj')
mesh.SetName('Mesh')

# Create a fixed body for the mesh
body = chrono.ChBodyEasyMesh(mesh, 1000, True, True)
body.SetName('Body')
body.SetPos(chrono.ChVectorD(0, 0, 0))
body.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))
system.Add(body)

# Create a lidar sensor and add it to the body
lidar = chrono_sensor.ChLidarSensor()
lidar.SetName('Lidar')
lidar.SetFrequency(10.0)
lidar.SetRange(10.0)
lidar.SetBeamCount(64)
lidar.SetHorizontalFOV(np.pi / 2)
lidar.SetVerticalFOV(np.pi / 4)
lidar.SetNoiseModel(chrono_sensor.ChLidarNoiseModel.GAUSSIAN)
lidar.SetNoiseParams(0.01, 0.01)
lidar.SetVisualization(True)
lidar.SetSaveData(True)
lidar.SetSavePath('data/lidar_data.csv')
body.AddSensor(lidar)

# Create a sensor manager to manage the lidar sensor
sensor_manager = chrono_sensor.ChSensorManager()
sensor_manager.AddSensor(lidar)
system.Add(sensor_manager)

# Set the simulation parameters
system.SetSolverType(chrono.ChSolver.Type_PSSOR)
system.SetSolverMaxIterations(100)
system.SetSolverTolerance(1e-6)
system.SetTimestep(0.01)

# Simulate the system
while system.GetChTime() < 10.0:
    # Update the lidar's position in an orbit around the mesh
    lidar.SetPos(chrono.ChVectorD(np.cos(system.GetChTime()), np.sin(system.GetChTime()), 1.0))
    lidar.SetRot(chrono.ChQuaternionD(np.cos(system.GetChTime() / 2), np.sin(system.GetChTime() / 2), 0, 0))

    # Simulate the system for one time step
    system.DoStepDynamics(system.GetTimestep())

    # Print the lidar buffer data
    print(lidar.GetBuffer())

    # Update the visualization
    scene.Render()
    scene.Synchronize(system.GetChTime())

# Save the simulation data
system.SaveData('data/simulation_data.csv')
```
This code initializes the PyChrono environment, loads a triangular mesh from a Wavefront .obj file, creates a fixed body for the mesh, adds a lidar sensor to the body, and simulates the system while dynamically updating the lidar's position in an orbit around the mesh. The lidar data is printed at each simulation step, and the simulation data is saved to a file at the end of the simulation.
Here is the code that meets the specifications:
```python
import chrono as chrono
import chrono_irrlicht as chronoirr
import irrlicht

# Initialize PyChrono environment and core components
chrono.Initialize()
core = chrono.Core()
core.SetTimestep(1/50.0)  # 50 Hz simulation loop

# Create a RigidTerrain object with specified dimensions
terrain = chrono.RigidTerrain(100, 100, 0.1)
terrain.SetTexture(chrono.GetAssetPath() + "/textures/terrain.png")

# Create an ARTcar vehicle object with specified parameters
vehicle = chrono.ARTcar()
vehicle.SetPosition(chrono.Vector(0, 0, 0))
vehicle.SetOrientation(chrono.QfromEuler(0, 0, 0))
vehicle.SetContactMethod(chrono.ContactMethod(chrono.ContactMethodFlags.CONTACT_METHOD_DEFAULT))
vehicle.SetVisualizationType(chrono.VisualizationType(chrono.VisualizationTypeFlags.VISUALIZATION_TYPE_DEFAULT))

# Add the vehicle to the simulation core
core.Add(vehicle)

# Create an interactive driver system to control the vehicle
driver = chrono.InteractiveDriver()
driver.Add(vehicle)

# Set up the simulation loop
while True:
    core.DoStep()
    chronoirr.Render(core, 50)  # Render at 50 frames per second
    driver.Update()  # Update the driver system
    if core.GetTime() > 10:  # Stop the simulation after 10 seconds
        break

# Clean up
chrono.Destroy()
```
This code initializes the PyChrono environment and core components, creates a RigidTerrain object with a custom texture, and an ARTcar vehicle object with specified parameters. It adds the vehicle to the simulation core and sets up an interactive driver system to control the vehicle. The simulation loop updates the vehicle dynamics and visualization in real time, displaying the simulation at 50 frames per second. The simulation stops after 10 seconds. Finally, the code cleans up by destroying the PyChrono environment.
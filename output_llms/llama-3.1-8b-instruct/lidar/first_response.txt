Here's the code that follows the given instructions:

```python
import chrono as chrono
import numpy as np

# Initialize the PyChrono environment
chrono.Initialize()

# Create a scene
m_scene = chrono.Scene()

# Create a body from a Wavefront .obj file
m_body = chrono.ChBodyEasyBox(1, 1, 1, 1000)
m_body.SetBodyFixed(True)
m_body.SetPosition(chrono.ChVector(0, 0, 0))
m_scene.Add(m_body)

# Create a sensor manager
m_sensor_manager = chrono.ChSensorManager()
m_sensor_manager.SetSensorType(chrono.ChSensorManager.SENSOR_TYPE_LIDAR)
m_sensor_manager.SetSensorName("LidarSensor")
m_body.AddSensor(m_sensor_manager)

# Set sensor parameters
m_sensor_manager.SetSensorRange(10)
m_sensor_manager.SetSensorAngle(0.1)
m_sensor_manager.SetSensorNoise(0.1)
m_sensor_manager.SetSensorVisualization(True)
m_sensor_manager.SetSensorSave(True)

# Create a lidar sensor
m_lidar_sensor = m_sensor_manager.GetSensor()
m_lidar_sensor.SetPosition(chrono.ChVector(0, 0, 5))

# Create a dynamic body for the lidar sensor
m_lidar_body = chrono.ChBody()
m_lidar_body.SetMass(1)
m_lidar_body.SetInertia(1)
m_lidar_body.SetBodyFixed(False)
m_lidar_body.SetPosition(chrono.ChVector(0, 0, 5))
m_lidar_body.SetRotation(chrono.ChQuaternion(0, 0, 0, 1))
m_scene.Add(m_lidar_body)

# Create a dynamic constraint between the lidar body and the fixed body
m_constraint = chrono.ChConstraintSemiImplicitSpringDamper()
m_constraint.SetBodyA(m_lidar_body)
m_constraint.SetBodyB(m_body)
m_constraint.SetSemiImplicitSpringDamper(1, 1, 1)
m_scene.Add(m_constraint)

# Set the simulation parameters
m_scene.SetTimestep(0.01)
m_scene.SetMaxStep(0.01)

# Simulate the system
while m_scene.GetT() < 10:
    m_scene.DoStep()
    print(m_lidar_sensor.GetBuffer())

# Clean up
chrono.Destroy()
```

This script initializes the PyChrono environment, creates a scene, and adds a fixed body from a Wavefront .obj file. It then creates a sensor manager, sets sensor parameters, and adds a lidar sensor to the body. The lidar sensor is attached to a dynamic body that orbits around the fixed body. The simulation is run for 10 seconds, and the lidar buffer data is printed at each simulation step. Finally, the PyChrono environment is cleaned up.
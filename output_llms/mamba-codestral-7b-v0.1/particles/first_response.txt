Sure, here's a basic outline of how you might structure your PyChrono simulation script to meet your requirements:

```python
import pychrono

# Initialize the PyChrono environment and core components
system = pychrono.ChSystemSMC()

# Add the required physical systems and objects
# For this simulation, we'll add a simple particle system
particle_system = pychrono.ChParticleSystem()
system.AddSystem(particle_system)

# Set necessary default parameters such as positions, forces, and interactions
# For this example, we'll set the gravitational constant to a custom value
system.Set_G_acc(pychrono.ChVectorD(0, 0, -9.81))

# Implement a particle emitter to generate particles with random shapes, positions, velocities, and orientations
# This is a custom function that you'll need to implement
def particle_emitter():
    # Generate a new particle with random shape, position, velocity, and orientation
    particle = pychrono.ChParticle()
    particle.SetPos(pychrono.ChVectorD(...))  # Set random position
    particle.SetVel(pychrono.ChVectorD(...))  # Set random velocity
    particle.SetRot(pychrono.ChQuaternionD(...))  # Set random orientation
    particle.SetShape(pychrono.ChShapeSphere(...))  # Set random shape
    particle_system.AddParticle(particle)

# Visualize the simulation using Irrlicht, applying custom gravitational forces to simulate particle attraction dynamically
# This is also a custom function that you'll need to implement
def visualize_simulation():
    # Initialize Irrlicht and create a window
    ...

    # Set up the camera and lighting
    ...

    # Apply custom gravitational forces to simulate particle attraction dynamically
    def custom_gravitational_force(particle):
        # Calculate the gravitational force based on the particle's position and the position of the other particle
        ...
        particle.SetForce(force)

    # Main simulation loop
    while system.GetChTime() < simulation_time:
        # Update the system
        system.DoStepDynamics(stepsize)

        # Apply custom gravitational forces to each particle
        for particle in particle_system.GetParticlesList():
            custom_gravitational_force(particle)

        # Render the scene
        ...

# Run the simulation
visualize_simulation()
```
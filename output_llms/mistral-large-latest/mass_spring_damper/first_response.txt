Certainly! Below is a PyChrono script that demonstrates a single mass-spring-damper system using `ChLinkTSDA` to connect a mass to the ground. The script includes Irrlicht visualization with appropriate lighting and camera settings, and provides visual shapes for the mass and spring in the scene.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr

# ---------------------------------------------------------------------
#
#  Create the simulation system and add items
#

# Create a Chrono::Engine physical system
system = chrono.ChSystemNSC()

# Set solver and integrator
system.SetSolverType(chrono.ChSolver.Type_BARZILAIBORWEIN)
system.SetSolverMaxIterations(150)
system.SetMaxItersSpeed(10)
system.SetTimestepperType(chrono.ChTimestepper.Type_EULER_IMPLICIT_LINEARIZED)

# Create the ground (a fixed rigid body)
ground = chrono.ChBody()
ground.SetBodyFixed(True)
ground.SetPos(chrono.ChVectorD(0, -1, 0))
ground.SetName("Ground")
ground.SetCollide(False)
ground.SetMaterialSurface(chrono.ChMaterialSurfaceNSC())

# Add the ground to the system
system.AddBody(ground)

# Create a dynamic body (a mass)
mass = chrono.ChBody()
mass_radius = 0.1
mass_density = 1000  # kg/m^3
mass_volume = (4/3) * chrono.CH_C_PI * (mass_radius**3)
mass_mass = mass_volume * mass_density
mass.SetMass(mass_mass)
mass.SetInertiaXX(chrono.ChVectorD(mass_mass * mass_radius**2 / 5))
mass.SetPos(chrono.ChVectorD(0, 1, 0))
mass.SetName("Mass")

# Add the mass to the system
system.AddBody(mass)

# Create a visual representation of the mass
mass_asset = chrono.ChSphereShape(mass_radius)
mass_visual_shape = chrono.ChVisualShapeSphere(mass_radius)
mass.AddAsset(mass_asset)
mass.AddAsset(mass_visual_shape)

# Create a spring-damper link between the mass and the ground
spring_damper = chrono.ChLinkTSDA()
spring_damper.Initialize(ground, mass,
                         True, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, -1, 0),
                         False, chrono.ChVectorD(), chrono.ChVectorD())
system.AddLink(spring_damper)

# Set default linear spring-damper parameters
spring_damper.SetSpringCoefficient(1000)  # Spring constant in N/m
spring_damper.SetDampingCoefficient(10)   # Damping constant in Ns/m

# ---------------------------------------------------------------------
#
#  Create an Irrlicht application to visualize the system
#

# Create the Irrlicht visualization system
application = chronoirr.ChIrrApp(system, "Mass-Spring-Damper System", chrono.core.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.Q_from_AngAxis(chrono.CH_C_PI / 2, chrono.ChVectorD(0, 1, 0))))

# Set some settings for the application
application.AddTypicalLogo()
application.AddTypicalSky()
application.AddTypicalLights()
application.AddTypicalCamera(chrono.ChVectorD(1, 1, 1), chrono.ChVectorD(0, 1, 0))

# Set the time step for the simulation
time_step = 1e-3
application.SetTimestep(time_step)
application.SetTryRealtime(True)

# Simulation loop
while application.GetDevice().run():
    application.BeginScene()
    application.DrawAll()
    application.DoStep()
    application.EndScene()
```

This script initializes the PyChrono environment, sets up the physical system with a ground and a mass, connects them using a `ChLinkTSDA` link, and sets up Irrlicht for visualization. The mass and spring are given visual shapes, and the simulation is run in a loop with real-time visualization.
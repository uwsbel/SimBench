To create a PyChrono simulation of a HMMWV (High Mobility Multipurpose Wheeled Vehicle) on a custom mesh terrain using Irrlicht for visualization, you can follow the script below. This script initializes the PyCharmo environment, adds the necessary physical systems and objects, sets the required parameters, and configures the simulation loop.

```python
import pychrono as chrono
import pychrono.vehicle as veh
import pychrono.irrlicht as chronoirr
import pychrono.postprocess as postprocess

# -----------------------------------------------------------------------------
# Initialize the PyChrono environment and core components
# -----------------------------------------------------------------------------
chrono.SetChronoDataPath("path/to/chrono/data")
chrono.SetChronoIrrlichtDataPath("path/to/chrono/irrlicht/data")

# Create a Chrono system
system = chrono.ChSystemNSC()

# Create the HMMWV vehicle
hmmwv = veh.HMMWV_Full()
hmmwv.SetContactMethod(chrono.ChContactMethod_NSC)
hmmwv.SetTireModel(veh.TireModelType_TMEASY)
hmmwv.SetInitPosition(chrono.ChCoordsysD(chrono.ChVectorD(0, 0.5, 0), chrono.ChQuaternionD(1, 0, 0, 0)))
hmmwv.Initialize(system)

# Create the terrain
terrain = veh.RigidTerrain(system)
terrain.SetContactFrictionCoefficient(0.9)
terrain.SetContactRestitutionCoefficient(0.01)

# Load the terrain mesh
terrain.AddVisualizationMesh("Highway_vis.obj", chrono.ChVectorD(0, 0, 0))
terrain.AddCollisionMesh("Highway_col.obj", chrono.ChVectorD(0, 0, 0), False)

# -----------------------------------------------------------------------------
# Create the driver system
# -----------------------------------------------------------------------------
driver = veh.ChDataDriver(hmmwv.GetVehicle())

# Create an interactive driver
driver_inputs = veh.ChDriverInputsCallback()
driver.SetSteeringDeltaFunction(driver_inputs)
driver.SetThrottleDeltaFunction(driver_inputs)
driver.SetBrakingDeltaFunction(driver_inputs)

# -----------------------------------------------------------------------------
# Initialize visualization with Irrlicht
# -----------------------------------------------------------------------------
vis = chronoirr.ChVisualSystemIrrlicht()
vis.AttachSystem(system)
vis.SetWindowSize(1024, 768)
vis.SetWindowTitle('HMMWV on Custom Terrain')
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataPath() + 'logo_pychrono_alpha.png')
vis.AddLightDirectional()
vis.AddCamera(chrono.ChVectorD(0, 2, -5))
vis.AddTypicalLights()

# -----------------------------------------------------------------------------
# Simulation loop
# -----------------------------------------------------------------------------
step_size = 1.0 / 50.0  # 50 frames per second

while vis.Run():
    vis.BeginScene()
    vis.Render()
    vis.EndScene()

    driver.Advance(step_size)
    system.DoStepDynamics(step_size)

    # Update vehicle dynamics
    hmmwv.Update()

    # Print simulation time
    print(f"Time: {system.GetChTime()}")
```

This script performs the following steps:
1. Initializes the PyChrono environment and core components.
2. Adds the HMMWV vehicle with the specified parameters, including the TMEASY tire model and initial position.
3. Creates a custom terrain using collision and visual meshes (`Highway_col.obj` and `Highway_vis.obj`).
4. Configures an interactive driver system for steering, throttle, and braking control.
5. Initializes visualization with Irrlicht.
6. Runs the simulation loop at 50 frames per second, updating vehicle dynamics and rendering the scene.
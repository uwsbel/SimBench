Here's a Python script using PyChrono and Irrlicht to simulate a simple pendulum as per your instructions:

```python
import pychrono as chrono
import numpy as np

# Initialize PyChrono and Irrlicht
chrono.SetChronoDataPath("path/to/chrono_data")
app = chrono.ChApp("Simple Pendulum", chrono.ChIrrApp.IrrApp(chrono.ChVectorD(1024, 768), "Simple Pendulum", chrono.ChVectorD(800, 600)))
app.SetTimestep(0.005)

# Create a ground body
ground = chrono.ChBodyEasyBox(10, 10, 1, 1e-03, True)
ground.SetPos(chrono.ChVectorD(0, 0, 0))
app.Add(ground)

# Create a pendulum body with appropriate mass and inertia
pendulum = chrono.ChBodyEasyCylinder(0.1, 1, 1000, 1e-03, True)
pendulum.SetPos(chrono.ChVectorD(0, 1, 0))
pendulum.SetMass(1)
pendulum.SetInertiaXX(chrono.ChVectorD(1, 0.1, 0.1))
app.Add(pendulum)

# Create a revolute joint to connect the ground and pendulum
joint = chrono.ChLinkRevolute()
joint.Initialize(ground, pendulum, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 1))
app.Add(joint)

# Set initial velocity of the pendulum
pendulum.SetPos_dt(chrono.ChVectorD(0, 0, 0))
pendulum.SetWvel_abs(chrono.ChVectorD(0, 0, 0.5))

# Create a logger to periodically log the pendulum's position and velocity
logger = chrono.ChLogger()
logger.SetLogLevel(chrono.ChLogLevel.LEVEL_INFO)
logger.Enable()
logger.AddItem("Pendulum Position", pendulum.GetPos())
logger.AddItem("Pendulum Velocity", pendulum.GetWvel_abs())

# Run the simulation
while app.GetTimestep() >= 0:
    app.BeginScene()
    app.DrawAll()
    app.EndScene()
    app.Advance()
```

Make sure to replace `"path/to/chrono_data"` with the actual path to your Chrono::Engine data files.

This script initializes the PyChrono environment and core components, adds the required physical systems (ground and pendulum bodies) and objects (revolute joint), sets necessary default parameters such as positions, forces, and interactions, and uses the visualization system to render the simulation and periodically log the pendulum's position and velocity.
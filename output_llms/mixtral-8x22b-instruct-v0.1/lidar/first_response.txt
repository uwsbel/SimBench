To create a PyChrono simulation with a triangular mesh from a Wavefront .obj file as a fixed body and a lidar sensor attached to it, follow the steps below:

1. Initialize the PyChrono environment and core components:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# Create a Chrono::Engine physical system
physics_system = chrono.ChSystemNSC()

# Create an Irrlicht visualization window
visualization_window = chronoirr.ChIrrApp(physics_system, "PyChrono Lidar Simulation", chronoirr.dimension2du(800, 600))

# Set camera position and orientation
visualization_window.Camera.SetPosition(chrono.ChVectorD(0, 0, -5))
visualization_window.Camera.SetFocalPoint(chrono.ChVectorD(0, 0, 0))
```

2. Add the required physical systems and objects:

```python
# Load the triangular mesh from a Wavefront .obj file
mesh = chrono.ChTriangleMeshConnected()
mesh.LoadWavefront(chrono.GetChronoDataFile("feathers/feathers.obj"))

# Create a fixed body with the mesh
body = chrono.ChBodyEasyBox(2, 2, 2, 1000, True, True)
body.SetBodyFixed(True)
body.AddAsset(chrono.ChTriangleMeshShape(mesh))
physics_system.AddBody(body)

# Create a lidar sensor
lidar_sensor = chrono.ChLidarSensor(100, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01)

# Create a sensor manager and add the lidar sensor to it
sensor_manager = chrono.ChSensorManager()
sensor_manager.AddSensor(lidar_sensor)

# Attach the sensor manager to the body
body.AddAsset(sensor_manager)

# Set the lidar sensor's position and orientation
lidar_sensor.SetPos(chrono.ChVectorD(0, 0, 0))
lidar_sensor.SetRot(chrono.ChQuaternionD(1, 0, 0, 0))
```

3. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the lidar sensor's noise filter
lidar_sensor.SetNoiseFilter(chrono.ChFilterAccess::F_GAUSSIAN, 0.01)

# Set the lidar sensor's visualization options
lidar_sensor.SetVisualizationType(chrono.ChLidarSensor::VIZ_POINTS)
lidar_sensor.SetVisualizationColor(chrono.ChColor(1, 0, 0))

# Set the lidar sensor's saving options
lidar_sensor.SetSaveData(True)
lidar_sensor.SetSaveDataFile("lidar_data.txt")
```

4. Simulate the system while dynamically updating the lidar's position in an orbit around the mesh, and print lidar buffer data at each simulation step:

```python
# Set the simulation time and time step
simulation_time = 10
time_step = 0.01

# Simulate the system
for t in np.arange(0, simulation_time, time_step):
    # Update the lidar sensor's position in an orbit around the mesh
    lidar_sensor.SetPos(chrono.ChVectorD(np.cos(t), np.sin(t), 0))

    # Update the physics system
    physics_system.DoStepDynamics(time_step)

    # Print the lidar buffer data
    lidar_buffer = lidar_sensor.GetBuffer()
    print(f"Lidar buffer data at t = {t}: {lidar_buffer}")

# Close the visualization window
visualization_window.Close()
```

This script will create a PyChrono simulation with a fixed body representing a triangular mesh from a Wavefront .obj file, and a lidar sensor attached to it. The lidar sensor will be updated in an orbit around the mesh, and its buffer data will be printed at each simulation step. The lidar data will also be saved to a file named "lidar\_data.txt".
To create a PyChrono simulation for a Jeffcott rotor using an Isogeometric Analysis (IGA) beam, follow the steps below:

1. Import the required libraries:

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import pychrono.fea as fea
import numpy as np
```

2. Initialize the PyChrono environment and core components:

```python
# Create a Chrono::Engine physical system
my_system = chrono.ChSystemNSC()

# Create an Irrlicht application
my_application = chronoirr.ChIrrApp(my_system, 'Jeffcott Rotor Simulation', chronoirr.Dim3d(800, 600))

# Set the camera position and orientation
my_application.Camera.SetPos(chrono.ChVectorD(0, 0, -2))
my_application.Camera.SetFocal(chrono.ChVectorD(0, 0, 0))
```

3. Add the required physical systems and objects:

```python
# Create a beam using IGA
beam_length = 1.0
beam_radius = 0.05
beam_density = 7850
beam_young_modulus = 210e9
beam_poisson_ratio = 0.3
beam_num_control_points = 10
beam_num_elements = 1

beam_material = fea.ChMaterialShellANCF(beam_density, beam_young_modulus, beam_poisson_ratio)
beam_geometry = fea.ChLineBeamANCF(beam_length, beam_radius, beam_num_control_points, beam_num_elements)
beam = fea.ChElementBeamANCF(beam_geometry, beam_material)

# Create a flywheel
flywheel_radius = 0.1
flywheel_thickness = 0.02
flywheel_density = 7850
flywheel_inertia = 0.5 * flywheel_density * np.pi * (flywheel_radius**4 - (flywheel_radius - flywheel_thickness)**4)
flywheel_mass = flywheel_density * np.pi * flywheel_radius**2 * flywheel_thickness

flywheel_body = chrono.ChBodyEasyCylinder(flywheel_radius, flywheel_thickness, flywheel_density)
flywheel_body.SetPos(chrono.ChVectorD(0, 0, 0))
flywheel_body.SetInertiaXX(chrono.ChVectorD(flywheel_inertia, flywheel_inertia, flywheel_inertia))
flywheel_body.SetMass(flywheel_mass)

# Attach the flywheel to the beam
beam.AddNode(0, flywheel_body)

# Create a rotational motor
motor_torque = 10
motor_body = chrono.ChBody()
motor_body.SetPos(chrono.ChVectorD(0, 0, 0))
motor_body.SetFixed(True)

motor = chrono.ChLinkMotorRotation()
motor.Initialize(motor_body, flywheel_body, chrono.ChVectorD(0, 0, 0), chrono.ChVectorD(0, 0, 0))
motor.Set_motor_torque(motor_torque)

# Add the beam, flywheel, and motor to the physical system
my_system.Add(beam)
my_system.Add(flywheel_body)
my_system.Add(motor_body)
my_system.Add(motor)
```

4. Set necessary default parameters such as positions, forces, and interactions:

```python
# Set the initial angular velocity of the flywheel
flywheel_body.SetWvel_loc(chrono.ChVectorD(0, 0, 10))

# Set the visual setup
my_application.AssetBindAll()
my_application.AddAsset(beam)
my_application.AddAsset(flywheel_body)
my_application.AddAsset(motor_body)
my_application.AddAsset(motor)
my_application.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
my_application.AddSkyBox()
my_application.AddTypicalLights()
my_application.AddCamera(chrono.ChVectorD(0, 0, -2))
my_application.AddShadowAll()
```

5. Run the simulation:

```python
# Set the simulation time and time step
simulation_time = 10
time_step = 0.01

# Run the simulation
while my_application.GetDevice().run():
    my_application.BeginScene()
    my_application.DrawAll()
    my_application.DoStepDynamics(time_step)
    my_application.EndScene()

    if my_application.GetDevice().getTimer().getTime() > simulation_time:
        break

my_application.GetSystem().Clear()
```

This script will create a PyChrono simulation of a Jeffcott rotor using an IGA beam, with a flywheel attached at its center and a rotational motor driving one end of the beam. The visual setup includes FEM visualization and an Irrlicht window to observe the dynamics of the beam and flywheel system.
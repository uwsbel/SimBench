To create the requested PyChrono simulation, follow the steps below to generate a complete Python script for the required scenario.

```python
# Import necessary PyChrono modules
from pychrono.core import *
from pychrono.irrlicht import *
from pychrono.vehicle import *

# Set the PyChrono data directory
ChSystem.SetDataDir('path/to/pychrono/data')

# Initialize the Chrono engine and create a new system
my_chrono = ChronoEngine()
my_system = my_chrono.CreateSystem()

# ------------------
# Create the vehicle
# ------------------

# Load the HMMWV vehicle from the XML file
vehicle_file = 'path/to/hmmwv.xml'
hmmwv_vehicle = VehicleChassisBody.CreateFromXMLFile(my_system, vehicle_file)

# Add an IMU sensor to the vehicle's chassis
imu_sensor = HMMWVIMUSensor()
hmmwv_vehicle.AddSensor(imu_sensor)

# Add a GPS sensor to the vehicle's chassis
gps_sensor = HMMWVGPSensor()
hmmwv_vehicle.AddSensor(gps_sensor)

# ------------------
# Create the terrain
# ------------------

# Load the terrain from the XML file
terrain_file = 'path/to/terrain.xml'
my_terrain = ChTerrain.CreateFromXMLFile(my_system, terrain_file)

# ------------------
# Create the driver
# ------------------

# Create a simple driver for the vehicle
driver = SimpleVehicleDriver(hmmwv_vehicle)

# ------------------
# Create the Irrlicht visualization
# ------------------

# Initialize the Irrlicht visualization
my_application = IrrApp(my_system.GetChronoData(), my_system.GetChronoOutput(), 800, 600, false)

# Add the vehicle and terrain to the Irrlicht scene
my_application.Add(hmmwv_vehicle.GetChassisBody(), my_terrain)

# ------------------
# Simulation loop
# ------------------

# Set the simulation time step
my_system.SetTimestep(1./240.)

# Simulation loop
for i in range(1000):

    # Update the driver inputs
    driver.Synchronize()

    # Advance the system by one timestep
    my_system.DoStepDynamics()

    # Update the IMU and GPS sensor data
    imu_sensor.Update()
    gps_sensor.Update()

    # Output the vehicle mass
    print('Vehicle mass:', hmmwv_vehicle.GetMass())

    # Render the scene
    my_application.DrawAll()
    my_application.GetDevice().sleep(10)

# Finalize the Irrlicht visualization
my_application.Destroy()
```

Replace the placeholder paths with the actual file paths for your HMMWV vehicle, terrain, and data directory. This script initializes the PyChrono environment, creates the required physical systems and objects, sets default parameters, and runs a simulation loop that synchronizes and advances the vehicle, terrain, driver, and visual system modules while outputting vehicle mass and rendering scenes.
To create the simulation script based on the given instructions, follow the steps below. This script uses PyChrono 2.0 and Irrlicht for visualization. Make sure to install the required packages and have the necessary 3D models and textures in your working directory.

```python
import pychrono as chrono
import pychrono.irrlicht as chronoirr
import numpy as np

# 1. Initialize the PyChrono environment and core components
chrono.ChSystemSMC()
visualization = chronoirr.ChVisualSystemIrrlicht()
visualization.SetWindowSize(1280, 720)
visualization.SetWindowTitle("CityBus Simulation")
visualization.Initialize()
visualization.AddLogo(chronoirr.GetChronoDataFile('logo.png'))
visualization.AddSkyBox()
visualization.AddCamera(chronoirr.vector3df(0, 5, -10), chronoirr.vector3df(0, 1, 0))
visualization.AttachSystem(chrono.GetSystem())

# 2. Add the required physical systems and objects

# CityBus vehicle
bus_path = chrono.GetChronoDataFile('vehicle/citybus/citybus.json')
bus = chrono.ChVehicle(bus_path)
bus.SetChassisVisualizationType(chrono.ChVehicleVisualizationType.MESH)
bus.SetSuspensionVisualizationType(chrono.ChVehicleVisualizationType.PRIMITIVES)
bus.SetSteeringVisualizationType(chrono.ChVehicleVisualizationType.PRIMITIVES)
bus.SetTireVisualizationType(chrono.ChVehicleVisualizationType.MESH)
bus.Initialize(chrono.ChCoordsysD(chrono.ChVectorD(0, 0, 0), chrono.Q_from_AngAxis(np.pi / 2, chrono.ChVectorD(0, 1, 0))))

# Rigid terrain
terrain = chrono.ChBodyEasyBox(100, 1, 100, 1000, True, True)
terrain.SetPos(chrono.ChVectorD(0, -0.5, 0))
terrain_texture = chronoirr.GetChronoDataFile('textures/terrain.jpg')
terrain.AddAsset(chrono.ChTexture(terrain_texture))
chrono.GetSystem().Add(terrain)

# 3. Set necessary default parameters such as positions, forces, and interactions

# Tire model
bus.GetTire(0).SetTireModel(chrono.ChPacejkaTire)

# Camera follow
visualization.SetCameraTarget(bus.GetChassisBody())
visualization.SetCameraPosition(chrono.ChVectorD(0, 5, -10) + bus.GetChassisBody().GetPos())

# Interactive driver system
class Driver(chrono.ChDriver):
    def __init__(self):
        super().__init__()
        self.steering = 0
        self.throttle = 0
        self.braking = 0

    def Update(self, time):
        bus.GetSteeringController().SetSteering(self.steering)
        bus.GetPowertrain().SetThrottle(self.throttle)
        bus.GetPowertrain().SetBraking(self.braking)

driver = Driver()
chrono.GetSystem().Add(driver)

# Simulation loop
timestep = 0.02
simulation_time = 0

while visualization.Run():
    visualization.BeginScene()
    visualization.Render()

    # Update driver inputs
    driver.steering = ...  # Set steering input (e.g., from user input)
    driver.throttle = ...  # Set throttle input (e.g., from user input)
    driver.braking = ...  # Set braking input (e.g., from user input)

    # Update vehicle dynamics
    bus.Update(timestep)

    # Update camera position
    visualization.SetCameraPosition(chrono.ChVectorD(0, 5, -10) + bus.GetChassisBody().GetPos())

    # Advance simulation
    simulation_time += timestep
    chrono.GetSystem().DoStepDynamics(timestep)

    visualization.EndScene()
```

Replace the `...` placeholders with the desired user input for steering, throttle, and braking. The simulation loop runs at 50 frames per second (timestep = 0.02 seconds).

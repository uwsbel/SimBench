```python

import pychrono

import pychrono.irrlicht

import pychrono.contact as contact

import pychrono.tire as tire

import pychrono.vehicle as vehicle

import pychrono.rigid_body as rb

import pychrono.sphere as sphere

import pychrono.tire_model as tire_model


# Initialize PyChrono and Irrlicht

chrono = pychrono.ChRono()

irr = pychrono.irrlicht.ChIrrApp()


# Set up the visualization

irr.SetWindowSize(1280, 720)

irr.SetFov(60)


# Create the terrain

terrain = contact.RigidTerrain(chrono)

terrain.SetDimensions(10, 10)

terrain.SetTexture("custom_terrain_texture.jpg")


# Create the Gator vehicle

gator = vehicle.Vehicle(chrono)

gator.SetMass(1000)

gator.SetLength(3)

gator.SetWidth(2)


# Add the vehicle to the simulation

gator.AddRigidBody(chrono)


# Set up the TMEASY tire model

tire_model = tire.TireModel(chrono)

tire_model.SetName("TMEASY")

tire_model.SetFrictionCoefficient(0.8)

tire_model.SetStiffness(10000)

tire_model.SetDamping(100)


# Set up the tires

front_left_tire = tire.Tire(chrono, tire_model)

front_right_tire = tire.Tire(chrono, tire_model)

rear_left_tire = tire.Tire(chrono, tire_model)

rear_right_tire = tire.Tire(chrono, tire_model)


# Set up the tire positions and orientations

front_left_tire.SetPosition(sphere.Sphere(chrono, gator.GetBody().GetPos() + pychrono.ChVectorD(0.5, 0.5, 0)))

front_left_tire.SetOrientation(pychrono.ChQuaternionD(0, 0, 0, 1))


front_right_tire.SetPosition(sphere.Sphere(chrono, gator.GetBody().GetPos() + pychrono.ChVectorD(-0.5, 0.5, 0)))

front_right_tires.SetOrientation(pychrono.ChQuaternionD(0, 0, 0, 1))


rear_left_tire.SetPosition(sphere.Sphere(chrono, gator.GetBody().GetPos() + pychrono.ChVectorD(-0.5, -0.5, 0)))

rear_left_tire.SetOrientation(pychrono.ChQuaternionD(0, 0, 0, 1))


rear_right_tire.SetPosition(sphere.Sphere(chrono, gator.GetBody().GetPos() + pychrono.ChVectorD(0.5, -0.5, 0)))

rear_right_tire.SetOrientation(pychrono.ChQuaternionD(0, 0, 0, 1))


# Add the tires to the vehicle

gator.AddTire(front_left_tire)

gator.AddTire(front_right_tire)

gator.AddTire(rear_left_tire)

gator.AddTire(rear_right_tire)


# Set up the driver system

driver = vehicle.Driver(chrono)

driver.SetSteeringGain(1.0)

driver.SetThrottleGain(1.0)

driver.SetBrakeGain(1.0)


# Set up the vehicle dynamics

gator.SetDriver(driver)

gator.SetContactMethod(contact.ContactMethod.STRICT_CONTACT)

gator.SetTireModel(tire_model)


# Set up the simulation loop

def update_simulation(time_step):

    # Update the vehicle dynamics

    gator.Update(time_step)


    # Update the visualization

    irr.BeginScene()

    irr.DrawModel(gator.GetBody().GetModel())

    irr.DrawModel(terrain.GetModel())

    irr.EndScene()


# Set the simulation time step and frame rate

time_step = 1.0 / 50.0


# Start the simulation loop

while irr.GetDevice().poll() == pychrono.irrlicht.etShutdownRequested:

    irr.BeginScene()

    irr.DrawModel(terrain.GetModel())

    irr.EndScene()

    update_simulation(time_step)

    chrono.DoStepDynamics(time_step)

    irr.DoStepIrr(time_step)


# Clean up and exit

irr.EndApp()

```


This script initializes the PyChrono environment and sets up a simulation of a Gator vehicle on a flat rigid terrain using the Irrlicht visualization library. The vehicle is initialized with parameters such as location, orientation, contact method, and the TMEASY tire model. The simulation loop updates vehicle dynamics and rendering at 50 frames per second in real time.
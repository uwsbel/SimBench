```python

# Import the PyChrono library

import pychrono

import pychrono.ChSystemNSC as ChSystemNSC


# Initialize the PyChrono environment and core components

ch = ChSystemNSC()


# Add required physical systems and objects

# Create a ground object

ground = pychrono.ChBody()

ground.SetStaticMass(1.0)

ground.SetName("Ground")

ch.AddBody(ground)


# Create a ball object

ball = pychrono.ChBody()

ball.SetMass(1.0)

ball.SetName("Ball")

ch.AddBody(ball)


# Set initial position and velocity of the ball

ball.SetPos(pychrono.ChVector(0, 0, 10)

ball.SetLinearVel(pychrono.ChVector(0, 0, 0))


# Set the gravitational force

ch.SetGravity(pychrono.ChVector(0, 0, -9.81))


# Set the interaction between the ball and the ground

ball.SetFriction(0.5)

ground.SetFriction(0.5)


# Set the contact properties

contact = pychrono.ChContactGeometry()

contact.SetFriction(0.5)

contact.SetRestitution(0.8)


# Add the contact between the ball and the ground

ch.AddContact(ball, ground, contact)


# Simulation parameters

sim_time = 5.0

time_step = 0.01


# Run the simulation

ch.SetSolverIterations(10)

ch.SetSolverIterations(10)

ch.SetSolverTolerance(1e-6)

ch.SetSolverTolerance(1e-6)

ch.SetSolverMaxIterations(100)

ch.SetSolverMaxTimeStep(0.01)


# Start the simulation

ch.DoStepDynamics(time_step)


# Simulate the system

while ch.GetChTime() < sim_time:

    ch.DoStepDynamics(time_step)


# Print the final position of the ball

print("Final position of the ball:", ball.GetPos())

```

This script initializes the PyChrono environment, adds a ground object and a ball object, sets their positions and velocities, and defines the interaction between them. It then runs the simulation for a specified time and prints the final position of the ball.
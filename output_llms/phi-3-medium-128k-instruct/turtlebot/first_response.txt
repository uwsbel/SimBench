 ```python

import chrono

import irrlicht

import numpy as np


# Initialize PyChrono environment

chrono.Init()


# Create the main simulation scene

s = chrono.ChSystemNSC()


# Set gravity

s.SetGravity(chrono.ChVectorD(0, -9.81, 0))


# Add a ground body

ground_shape = chrono.ChBodyDSG(chrono.ChEntityExt::CreateBox(s, 10, 1, 1))

ground_shape.SetBodyFixed(True)

s.AddBody(ground_shape)


# Initialize Turtlebot

turtlebot = chrono.ChBody(chrono.ChVectorD(0, 0, 0.1), chrono.ChQuaternionD(0, 0, 0, 1))

turtlebot.SetMass(10)

s.AddBody(turtlebot)


# Add Turtlebot's wheel bodies and joints

# ... (code to add wheels and joints)


# Set initial position and orientation

turtlebot.SetPos(chrono.ChVectorD(0, 0, 0))

turtlebot.SetRot(chrono.ChQuaternionD(0, 0, 0, 1))


# Set up Irrlicht visualization

irr = irrlicht.IrrEngine()


# Camera settings

camera = irr.getCamera()

camera.setPosition(chrono.ChVectorD(0, 0, 10))

camera.setTarget(chrono.ChVectorD(0, 0, 0))


# Lighting

light = irr.getLightScene().createLight()

light.setType(irrlicht.video.ETC_LIGHT_SPOT)

light.setDirection(chrono.ChVectorD(0, 0, -1))

light.setRange(1000)


# Simulation loop

sim_time = 0

while True:

    # Update Turtlebot's motors for turning

    # ... (code to update motors)


    # Step the simulation

    s.DoStep()


    # Update Irrlicht visualization

    irr.beginScene()

    irr.drawAll()

    irr.endScene()


    # Increment simulation time

    sim_time += 1e-3


    # Break condition

    if sim_time > 10:

        break


# Clean up

chrono.reset()

irr.end()

```


This script initializes a PyChrono simulation with a Turtlebot robot on a rigid terrain. It sets up the Chrono system with gravity and a ground body, initializes the Turtlebot with a specific position and orientation, and creates a real-time visualization using Irrlicht with camera settings and lighting. The simulation loop updates the Turtlebot's motors to control left and right turns at specified times, updates, and renders the robot at each timestep.
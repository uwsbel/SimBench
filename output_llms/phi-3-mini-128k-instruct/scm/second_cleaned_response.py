import pychrono.core as chrono
import pychrono.irrlicht as irr
import pychrono.vehicle as veh
import math


class SCMTerrainParameters:
    def __init__(self, terrain_type):
        self.terrain_type = terrain_type
        self.set_parameters(terrain_type)

    def set_parameters(self, terrain_type):
        if terrain_type == "soft":
            self.Bekker_Kphi = 2e6
            self.Bekker_Kc = 0
            self.n_exponent = 1.1
            self.Mohr_cohesive_limit = 0
            self.Mohr_friction_limit = 30
            self.Janosi_shear_coefficient = 0.01
            self.Elastic_stiffness = 2e8
            self.Damping = 3e4
        elif terrain_type == "mid":
            self.Bekker_Kphi = 1e6
            self.Bekker_Kc = 0.5
            self.n_exponent = 1.0
            self.Mohr_cohesive_limit = 10
            self.Mohr_friction_limit = 25
            self.Janosi_shear_coefficient = 0.02
            self.Elastic_stiffness = 1e9
            self.Damping = 1e4
        elif terrain_type == "hard":
            self.Bekker_Kphi = 5e6
            self.Bekker_Kc = 1
            self.n_exponent = 1.2
            self.Mohr_cohesive_limit = 20
            self.Mohr_friction_limit = 45
            self.Janosi_shear_coefficient = 0.03
            self.Elastic_stiffness = 5e9
            self.Damping = 5e4
        else:
            raise ValueError("Invalid terrain type")

    def get_parameters(self):
        return {
            "Bekker_Kphi": self.Bekker_Kphi,
            "Bekker_Kc": self.Bekker_Kc,
            "n_exponent": self.n_exponent,
            "Mohr_cohesive_limit": self.Mohr_cohesive_limit,
            "Mohr_friction_limit": self.Mohr_friction_limit,
            "Janosi_shear_coefficient": self.Janosi_shear_coefficient,
            "Elastic_stiffness": self.Elastic_stiffness,
            "Damping": self.Damping
        }



initLoc = chrono.ChVector3d(-8, 0, 0.6)
initRot = chrono.ChQuaterniond(1, 0, 0, 0)


vis_type = veh.VisualizationType_MESH


chassis_collision_type = veh.CollisionType_NONE


tire_model = veh.TireModelType_RIGID


terrain_height = 0      
terrainLength = 100.0  
terrainWidth = 100.0   


trackPoint = chrono.ChVector3d(0.0, 0.0, 1.71)


contact_method = chrono.ChContactMethod_SMC
contact_vis = False


step_size = 1e-3
tire_step_size = step_size


render_step_size = 1.0 / 50  


vehicle = veh.HMMWV_Full()
vehicle.SetContactMethod(contact_method)
vehicle.SetChassisCollisionType(chassis_collision_type)
vehicle.SetChassisFixed(False)
vehicle.SetInitPosition(chrono.ChCoordsysd(initLoc, initRot))
vehicle.SetTireType(tire_model)
vehicle.SetTireStepSize(tire_step_size)

vehicle.Initialize()

vehicle.SetChassisVisualizationType(vis_type)
vehicle.SetSuspensionVisualizationType(vis_type)
vehicle.SetSteeringVisualizationType(vis_type)
vehicle.SetWheelVisualizationType(vis_type)
vehicle.SetTireVisualizationType(vis_type)

vehicle.GetSystem().SetCollisionSystemType(chrono.ChCollisionSystem.Type_BULLET)


terrain = veh.SCMTerrain(vehicle.GetSystem())
terrain_params = SCMTerrainParameters("mid")  
terrain_params_dict = terrain_params.get_parameters()
terrain.SetSoilParameters(**terrain_params_dict)


terrain.AddMovingPatch(vehicle.GetChassisBody(), chrono.ChVector3d(0, 0, 0), chrono.ChVector3d(5, 3, 1))


terrain.SetPlotType(veh.SCMTerrain.PLOT_SINKAGE, 0, 0.1)


terrain.Initialize(20, 20, 0.02)


vis = veh.ChWheeledVehicleVisualSystemIrrlicht()
vis.SetWindowTitle('HMMWV Demo')
vis.SetWindowSize(1280, 1024)
vis.SetChaseCamera(trackPoint, 6.0, 0.5)
vis.Initialize()
vis.AddLogo(chrono.GetChronoDataFile('logo_pychrono_alpha.png'))
vis.AddLightDirectional()
vis.AddSkyBox()
vis.AttachVehicle(vehicle.GetVehicle())


driver = veh.ChInteractiveDriverIRR(vis)


steering_time = 1.0
throttle_time = 1.0
braking_time = 0.3
driver.SetSteeringDelta(render_step_size / steering_time)
driver.SetThrottleDelta(render_step_size / throttle_time)
driver.SetBrakingDelta(render_step_size / braking_time)

driver.Initialize()






print("VEHICLE MASS: ", vehicle.GetVehicle().GetMass())


render_steps = math.ceil(render_step_size / step_size)


realtime_timer = chrono.ChRealtimeStepTimer()
step_number = 0
render_frame = 0

while vis.Run():
    time = vehicle.GetSystem().GetChTime()

    
    if (step_number % render_steps == 0):
        vis.BeginScene()
        vis.Render()
        vis.EndScene()
        render_frame += 1

    
    driver_inputs = driver.GetInputs()

    
    driver.Synchronize(time)
    terrain.Synchronize(time)
    vehicle.Synchronize(time, driver_input







































































,,
,
,, ,),0














,,,




,,,











































,































































































































       



























































































,


















)




















)))





























,,,



























)







)











)
)

















)

































































)








































)




















































































)





















































































)
       





























   






















.




       

,.













































,,




,,








,














..





























.


























,,




















































































































,




































,
,



































































































































































,

































,








,

,



,





,
,
,,




















.




,,











,
,
,






 *...















































..





























































,

















































































)
)











,,,



,









































,,,,,



,,
,
,,,









,,



,,
)






,)











,
,,





,,,,















































,

























































































































































































,
print("error happened with only start ```python")
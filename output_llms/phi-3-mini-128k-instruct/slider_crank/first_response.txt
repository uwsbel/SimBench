```python

import chrono

import chrono.irrlicht as ir


# Initialize PyChrono environment

app = chrono.ChApplication(chrono.VNULL, False, True, 50.0)


# Create the floor (truss)

floor = chrono.ChBody(

    name="floor",

    mass=1000.0,

    invInertiaXX=1.0,

    invInertiaXY=0.0,

    invInertiaYZ=0.0,

    invInertiaZZ=1.0,

    pos=chrono.ChVectorD(0.0, 0.0, 0.0),

    eulerAngles=chrono.ChQuaternionD(0.0, 0.0, 0.0),

    type=chrono.ChBody.CT_TRUSSES)


# Create the crankshaft

crankshaft = chrono.ChBody(

    name="crankshaft",

    mass=50.0,

    invInertiaXX=1.0,

    invInertiaXY=0.0,

    invInertiaYZ=0.0,

    invInertiaZZ=1.0,

    pos=chrono.ChVectorD(0.0, 0.0, 0.0),

    eulerAngles=chrono.ChQuaternionD(0.0, 0.0, 0.0),

    type=chrono.ChBody.CT_ROTATION)


# Create the connecting rod

connecting_rod = chrono.ChBody(

    name="connecting_rod",

    mass=10.0,

    invInertiaXX=1.0,

    invInertiaXY=0.0,

    invInertiaYZ=0.0,

    invInertiaZZ=1.0,

    pos=chrono.ChVectorD(0.0, 0.0, 0.0),

    eulerAngles=chrono.ChQuaternionD(0.0, 0.0, 0.0),

    type=chrono.ChBody.CT_ROTATION)


# Create the piston

piston = chrono.ChBody(

    name="piston",

    mass=5.0,

    invInertiaXX=1.0,

    invInertiaXY=0.0,

    invInertiaYZ=0.0,

    invInertiaZZ=1.0,

    pos=chrono.ChVectorD(0.0, 0.0, 0.0),

    eulerAngles=chrono.ChQuaternionD(0.0, 0.0, 0.0),

    type=chrono.ChBody.CT_ROTATION)


# Create joints

crankshaft_joint = chrono.ChLinkUDrvCrank(

    name="crankshaft_joint",

    bodyA=crankshaft,

    bodyB=piston,

    axis=chrono.ChVectorD(0.0, 1.0, 0.0),

    parentA=crankshaft,

    parentB=piston)


connecting_rod_joint = chrono.ChLinkUDrvRod(

    name="connecting_rod_joint",

    bodyA=connecting_rod,

    bodyB=piston,

    axis=chrono.ChVectorD(0.0, 0.0, 1.0),

    parentA=connecting_rod,

    parentB=piston)


# Create motor

motor = chrono.ChLinkUDrvMotor(

    name="motor",

    bodyA=crankshaft,

    bodyB=crankshaft_joint,

    axis=chrono.ChVectorD(1.0, 0.0, 0.0),

    parentA=crankshaft,

    parentB=crankshaft_joint)


# Set default parameters

crankshaft.SetPos(chrono.ChVectorD(0.0, 0.0, 0.0))

piston.SetPos(chrono.ChVectorD(0.0, 0.0, 0.0))

connecting_rod.SetPos(chrono.ChVectorD(0.0, 0.0, 0.0))


# Add bodies to the world

app.Add(floor)

app.Add(crankshaft)

app.Add(connecting_rod)

app.Add(piston)


# Set up visualization

vis = ir.IrrlichtVisualizer(app)

vis.SetWindowTitle("Crank-Slider Mechanism")

vis.SetWindowSize(1280, 720)

vis.SetWindowVisible(True)


# Set up camera

camera = ir.IrrlichtDevice.GetCamera()

camera.SetPosition(chrono.ChVectorD(5.0, 5.0, 5.0))

camera.SetFov(60.0)


# Set up lighting

light = ir.IrrlichtDevice.GetLight()

light.SetColor(ir.vector3df(1.0, 1.0, 1.0))

light.SetPos(chrono.ChVectorD(0.0, 0.0, 10.0))


# Set up textures and logos

logo = ir.IrrlichtDevice.GetLogo()

logo.SetTexture(ir.vector4df(1.0, 1.0, 1.0, 1.0))

logo.SetPosition(chrono.ChVectorD(0.0, 0.0, 0.0))


# Run the simulation

app.Step(1.0 / 60.0, True)


# Keep the application running until the user closes the window

app.RenderGraphics()

app.MainLoop()

```


This script sets up a simple crank-slider mechanism using PyChrono and visualizes it with the Irrlicht engine. The crankshaft is driven by a motor, and the piston moves in response to the crankshaft's rotation. The camera, lighting, and additional visual elements are configured for a clear view of the mechanism.